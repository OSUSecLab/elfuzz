diff --git a/HTMLparser.c b/HTMLparser.c
index 3be74648..c2bca67c 100644
--- a/HTMLparser.c
+++ b/HTMLparser.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * HTMLparser.c : an HTML 4.0 non-verifying parser
  *
@@ -1335,8 +1339,23 @@ htmlCompareTags(const void *key, const void *member) {
  */
 const htmlElemDesc *
 htmlTagLookup(const xmlChar *tag) {
-    if (tag == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1554]) {
+      if ((tag == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1554\n");
+      else
+        fprintf(stderr, "reached bug index 1554\n");
+    }
+    if ((!FIXREVERTER[1554] && (tag == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     return((const htmlElemDesc *) bsearch(tag, html40ElementTable,
                 sizeof(html40ElementTable) / sizeof(htmlElemDesc),
@@ -2067,8 +2086,35 @@ UTF8ToHtml(unsigned char* out, int *outlen,
     unsigned int c, d;
     int trailing;
 
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);
-    if (in == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1565]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1565\n");
+      else
+        fprintf(stderr, "reached bug index 1565\n");
+    }
+    if ((!FIXREVERTER[1565] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1566]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1566\n");
+      else
+        fprintf(stderr, "reached bug index 1566\n");
+    }
+    if ((!FIXREVERTER[1566] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
 	 * initialization nothing to do
 	 */
@@ -2076,6 +2122,9 @@ UTF8ToHtml(unsigned char* out, int *outlen,
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend = in + (*inlen);
     outend = out + (*outlen);
     while (in < inend) {
@@ -2109,8 +2158,23 @@ UTF8ToHtml(unsigned char* out, int *outlen,
 
 	/* assertion: c is a single UTF-4 value */
 	if (c < 0x80) {
-	    if (out + 1 >= outend)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1567]) {
+	      if ((out + 1 >= outend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1567\n");
+	      else
+	        fprintf(stderr, "reached bug index 1567\n");
+	    }
+	    if ((!FIXREVERTER[1567] && (out + 1 >= outend ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    *out++ = c;
 	} else {
 	    int len;
@@ -2348,8 +2412,23 @@ htmlNewDocNoDtD(const xmlChar *URI, const xmlChar *ExternalID) {
      * Allocate a new document and fill the fields.
      */
     cur = (xmlDocPtr) xmlMalloc(sizeof(xmlDoc));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1573]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1573\n");
+      else
+        fprintf(stderr, "reached bug index 1573\n");
+    }
+    if ((!FIXREVERTER[1573] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlDoc));
 
     cur->type = XML_HTML_DOCUMENT_NODE;
@@ -2373,10 +2452,25 @@ htmlNewDocNoDtD(const xmlChar *URI, const xmlChar *ExternalID) {
         xmlDtdPtr intSubset;
 
 	intSubset = xmlCreateIntSubset(cur, BAD_CAST "html", ExternalID, URI);
-        if (intSubset == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1574]) {
+          if ((intSubset == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1574\n");
+          else
+            fprintf(stderr, "reached bug index 1574\n");
+        }
+        if ((!FIXREVERTER[1574] && (intSubset == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFree(cur);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
 	xmlRegisterNodeDefaultValue((xmlNodePtr)cur);
diff --git a/HTMLtree.c b/HTMLtree.c
index 6e8baf48..2238594e 100644
--- a/HTMLtree.c
+++ b/HTMLtree.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * HTMLtree.c : implementation of access function for an HTML tree.
  *
@@ -48,8 +52,23 @@ htmlGetMetaEncoding(htmlDocPtr doc) {
     const xmlChar *content;
     const xmlChar *encoding;
 
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4101]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4101\n");
+      else
+        fprintf(stderr, "reached bug index 4101\n");
+    }
+    if ((!FIXREVERTER[4101] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     cur = doc->children;
 
     /*
@@ -66,8 +85,23 @@ htmlGetMetaEncoding(htmlDocPtr doc) {
 	}
 	cur = cur->next;
     }
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4102]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4102\n");
+      else
+        fprintf(stderr, "reached bug index 4102\n");
+    }
+    if ((!FIXREVERTER[4102] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     cur = cur->children;
 
     /*
@@ -82,8 +116,23 @@ htmlGetMetaEncoding(htmlDocPtr doc) {
 	}
 	cur = cur->next;
     }
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4103]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4103\n");
+      else
+        fprintf(stderr, "reached bug index 4103\n");
+    }
+    if ((!FIXREVERTER[4103] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 found_head:
     cur = cur->children;
 
@@ -124,18 +173,78 @@ found_meta:
 
 found_content:
     encoding = xmlStrstr(content, BAD_CAST"charset=");
-    if (encoding == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4104]) {
+      if ((encoding == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4104\n");
+      else
+        fprintf(stderr, "reached bug index 4104\n");
+    }
+    if ((!FIXREVERTER[4104] && (encoding == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	encoding = xmlStrstr(content, BAD_CAST"Charset=");
-    if (encoding == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4105]) {
+      if ((encoding == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4105\n");
+      else
+        fprintf(stderr, "reached bug index 4105\n");
+    }
+    if ((!FIXREVERTER[4105] && (encoding == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	encoding = xmlStrstr(content, BAD_CAST"CHARSET=");
+	#ifdef FRCOV
+	}
+	#endif
     if (encoding != NULL) {
 	encoding += 8;
     } else {
 	encoding = xmlStrstr(content, BAD_CAST"charset =");
-	if (encoding == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4106]) {
+	  if ((encoding == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4106\n");
+	  else
+	    fprintf(stderr, "reached bug index 4106\n");
+	}
+	if ((!FIXREVERTER[4106] && (encoding == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    encoding = xmlStrstr(content, BAD_CAST"Charset =");
-	if (encoding == NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4107]) {
+	  if ((encoding == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4107\n");
+	  else
+	    fprintf(stderr, "reached bug index 4107\n");
+	}
+	if ((!FIXREVERTER[4107] && (encoding == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    encoding = xmlStrstr(content, BAD_CAST"CHARSET =");
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (encoding != NULL)
 	    encoding += 9;
     }
@@ -164,8 +273,23 @@ htmlSetMetaEncoding(htmlDocPtr doc, const xmlChar *encoding) {
 
     newcontent[0] = 0;
 
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4108]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4108\n");
+      else
+        fprintf(stderr, "reached bug index 4108\n");
+    }
+    if ((!FIXREVERTER[4108] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     /* html isn't a real encoding it's just libxml2 way to get entities */
     if (!xmlStrcasecmp(encoding, BAD_CAST "html"))
@@ -193,8 +317,23 @@ htmlSetMetaEncoding(htmlDocPtr doc, const xmlChar *encoding) {
 	}
 	cur = cur->next;
     }
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4109]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4109\n");
+      else
+        fprintf(stderr, "reached bug index 4109\n");
+    }
+    if ((!FIXREVERTER[4109] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     cur = cur->children;
 
     /*
@@ -211,12 +350,42 @@ htmlSetMetaEncoding(htmlDocPtr doc, const xmlChar *encoding) {
 	}
 	cur = cur->next;
     }
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4110]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4110\n");
+      else
+        fprintf(stderr, "reached bug index 4110\n");
+    }
+    if ((!FIXREVERTER[4110] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 found_head:
     head = cur;
-    if (cur->children == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4111]) {
+      if ((cur -> children == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4111\n");
+      else
+        fprintf(stderr, "reached bug index 4111\n");
+    }
+    if ((!FIXREVERTER[4111] && (cur -> children == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto create;
+        #ifdef FRCOV
+        }
+        #endif
     cur = cur->children;
 
 found_meta:
@@ -263,7 +432,22 @@ found_meta:
     }
 create:
     if (meta == NULL) {
-        if ((encoding != NULL) && (head != NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4112]) {
+          fprintf(stderr, "reached bug index 4112\n");
+        }
+        if ((FIXREVERTER[4112] && (encoding != (void *) 0 )) || (!FIXREVERTER[4112] && (encoding != (void *) 0 && head != (void *) 0 ))
+        #else
+        if (encoding != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(head != (void *) 0 ))
+            fprintf(stderr, "triggered bug index 4112\n");
+          #endif
+        
             /*
              * Create a new Meta element with the right attributes
              */
@@ -276,6 +460,9 @@ create:
             xmlNewProp(meta, BAD_CAST"http-equiv", BAD_CAST"Content-Type");
             xmlNewProp(meta, BAD_CAST"content", BAD_CAST newcontent);
         }
+        #ifdef FRCOV
+        }
+        #endif
     } else {
         /* remove the meta tag if NULL is passed */
         if (encoding == NULL) {
@@ -624,10 +811,25 @@ htmlDtdDumpOutput(xmlOutputBufferPtr buf, xmlDocPtr doc,
 	          const char *encoding ATTRIBUTE_UNUSED) {
     xmlDtdPtr cur = doc->intSubset;
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4123]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4123\n");
+      else
+        fprintf(stderr, "reached bug index 4123\n");
+    }
+    if ((!FIXREVERTER[4123] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	htmlSaveErr(XML_SAVE_NO_DOCTYPE, (xmlNodePtr) doc, NULL);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     xmlOutputBufferWriteString(buf, "<!DOCTYPE ");
     xmlOutputBufferWriteString(buf, (const char *)cur->name);
     if (cur->ExternalID != NULL) {
@@ -664,9 +866,24 @@ htmlAttrDumpOutput(xmlOutputBufferPtr buf, xmlDocPtr doc, xmlAttrPtr cur) {
      * This is implemented in xmlEncodeEntitiesReentrant
      */
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4124]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4124\n");
+      else
+        fprintf(stderr, "reached bug index 4124\n");
+    }
+    if ((!FIXREVERTER[4124] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     xmlOutputBufferWriteString(buf, " ");
     if ((cur->ns != NULL) && (cur->ns->prefix != NULL)) {
         xmlOutputBufferWriteString(buf, (const char *)cur->ns->prefix);
@@ -735,9 +952,24 @@ htmlNodeDumpFormatOutput(xmlOutputBufferPtr buf, xmlDocPtr doc,
 
     xmlInitParser();
 
-    if ((cur == NULL) || (buf == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4125]) {
+      if ((cur == (void *) 0 || buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4125\n");
+      else
+        fprintf(stderr, "reached bug index 4125\n");
+    }
+    if ((!FIXREVERTER[4125] && (cur == (void *) 0 || buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     root = cur;
     parent = cur->parent;
@@ -841,8 +1073,23 @@ htmlNodeDumpFormatOutput(xmlOutputBufferPtr buf, xmlDocPtr doc,
             break;
 
         case HTML_TEXT_NODE:
-            if (cur->content == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[4126]) {
+              if ((cur -> content == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 4126\n");
+              else
+                fprintf(stderr, "reached bug index 4126\n");
+            }
+            if ((!FIXREVERTER[4126] && (cur -> content == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
             if (((cur->name == (const xmlChar *)xmlStringText) ||
                  (cur->name != (const xmlChar *)xmlStringTextNoenc)) &&
                 ((parent == NULL) ||
@@ -851,10 +1098,25 @@ htmlNodeDumpFormatOutput(xmlOutputBufferPtr buf, xmlDocPtr doc,
                 xmlChar *buffer;
 
                 buffer = xmlEncodeEntitiesReentrant(doc, cur->content);
-                if (buffer == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[4127]) {
+                  if ((buffer == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 4127\n");
+                  else
+                    fprintf(stderr, "reached bug index 4127\n");
+                }
+                if ((!FIXREVERTER[4127] && (buffer == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     buf->error = XML_ERR_NO_MEMORY;
                     return;
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 xmlOutputBufferWriteString(buf, (const char *)buffer);
                 xmlFree(buffer);
             } else {
diff --git a/SAX2.c b/SAX2.c
index 267a5fb3..027b4a8d 100644
--- a/SAX2.c
+++ b/SAX2.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * SAX2.c : Default SAX2 handler to build a tree.
  *
@@ -59,8 +63,23 @@ xmlErrValid(xmlParserCtxtPtr ctxt, xmlParserErrors error,
 {
     xmlCtxtErr(ctxt, NULL, XML_FROM_DTD, error, XML_ERR_ERROR,
                str1, str2, NULL, 0, msg, str1, str2);
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[204]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 204\n");
+      else
+        fprintf(stderr, "reached bug index 204\n");
+    }
+    if ((!FIXREVERTER[204] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->valid = 0;
+	#ifdef FRCOV
+	}
+	#endif
 }
 
 /**
@@ -144,7 +163,22 @@ const xmlChar *
 xmlSAX2GetSystemId(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctx == NULL) || (ctxt->input == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[205]) {
+      if ((ctx == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 205\n");
+      else
+        fprintf(stderr, "reached bug index 205\n");
+    }
+    if ((!FIXREVERTER[205] && (ctx == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     return((const xmlChar *) ctxt->input->filename);
 }
 
@@ -160,7 +194,22 @@ int
 xmlSAX2GetLineNumber(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctx == NULL) || (ctxt->input == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[206]) {
+      if ((ctx == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 206\n");
+      else
+        fprintf(stderr, "reached bug index 206\n");
+    }
+    if ((!FIXREVERTER[206] && (ctx == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->input->line);
 }
 
@@ -176,7 +225,22 @@ int
 xmlSAX2GetColumnNumber(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctx == NULL) || (ctxt->input == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[207]) {
+      if ((ctx == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 207\n");
+      else
+        fprintf(stderr, "reached bug index 207\n");
+    }
+    if ((!FIXREVERTER[207] && (ctx == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->input->col);
 }
 
@@ -192,7 +256,22 @@ int
 xmlSAX2IsStandalone(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctx == NULL) || (ctxt->myDoc == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[208]) {
+      if ((ctx == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 208\n");
+      else
+        fprintf(stderr, "reached bug index 208\n");
+    }
+    if ((!FIXREVERTER[208] && (ctx == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->myDoc->standalone == 1);
 }
 
@@ -208,7 +287,22 @@ int
 xmlSAX2HasInternalSubset(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[209]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 209\n");
+      else
+        fprintf(stderr, "reached bug index 209\n");
+    }
+    if ((!FIXREVERTER[209] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->myDoc->intSubset != NULL);
 }
 
@@ -224,7 +318,22 @@ int
 xmlSAX2HasExternalSubset(void *ctx)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[210]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 210\n");
+      else
+        fprintf(stderr, "reached bug index 210\n");
+    }
+    if ((!FIXREVERTER[210] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->myDoc->extSubset != NULL);
 }
 
@@ -243,10 +352,40 @@ xmlSAX2InternalSubset(void *ctx, const xmlChar *name,
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlDtdPtr dtd;
-    if (ctx == NULL) return;
-
-    if (ctxt->myDoc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[211]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 211\n");
+      else
+        fprintf(stderr, "reached bug index 211\n");
+    }
+    if ((!FIXREVERTER[211] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[212]) {
+      if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 212\n");
+      else
+        fprintf(stderr, "reached bug index 212\n");
+    }
+    if ((!FIXREVERTER[212] && (ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     dtd = xmlGetIntSubset(ctxt->myDoc);
     if (dtd != NULL) {
 	if (ctxt->html)
@@ -275,7 +414,22 @@ xmlSAX2ExternalSubset(void *ctx, const xmlChar *name,
 	       const xmlChar *ExternalID, const xmlChar *SystemID)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[213]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 213\n");
+      else
+        fprintf(stderr, "reached bug index 213\n");
+    }
+    if ((!FIXREVERTER[213] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if ((SystemID != NULL) &&
         ((ctxt->options & XML_PARSE_NO_XXE) == 0) &&
         (((ctxt->validate) || (ctxt->loadsubset)) &&
@@ -298,9 +452,24 @@ xmlSAX2ExternalSubset(void *ctx, const xmlChar *name,
 	if ((ctxt->sax != NULL) && (ctxt->sax->resolveEntity != NULL))
 	    input = ctxt->sax->resolveEntity(ctxt->userData, ExternalID,
 	                                        SystemID);
-	if (input == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[214]) {
+	  if ((input == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 214\n");
+	  else
+	    fprintf(stderr, "reached bug index 214\n");
+	}
+	if ((!FIXREVERTER[214] && (input == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	if (xmlNewDtd(ctxt->myDoc, name, ExternalID, SystemID) == NULL) {
             xmlSAX2ErrMemory(ctxt);
@@ -335,8 +504,23 @@ xmlSAX2ExternalSubset(void *ctx, const xmlChar *name,
 	ctxt->input = NULL;
 	xmlPushInput(ctxt, input);
 
-	if (input->filename == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[215]) {
+	  if ((input -> filename == (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 215\n");
+	  else
+	    fprintf(stderr, "reached bug index 215\n");
+	}
+	if ((!FIXREVERTER[215] && (input -> filename == (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    input->filename = (char *) xmlCanonicPath(SystemID);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	input->line = 1;
 	input->col = 1;
 	input->base = ctxt->input->cur;
@@ -408,9 +592,39 @@ xmlSAX2ResolveEntity(void *ctx, const xmlChar *publicId, const xmlChar *systemId
     const xmlChar *base = NULL;
     int res;
 
-    if (ctx == NULL) return(NULL);
-    if (ctxt->input != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[216]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 216\n");
+      else
+        fprintf(stderr, "reached bug index 216\n");
+    }
+    if ((!FIXREVERTER[216] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[217]) {
+      if ((ctxt -> input != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 217\n");
+      else
+        fprintf(stderr, "reached bug index 217\n");
+    }
+    if ((!FIXREVERTER[217] && (ctxt -> input != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	base = BAD_CAST ctxt->input->filename;
+	#ifdef FRCOV
+	}
+	#endif
 
     if ((xmlStrlen(systemId) > XML_MAX_URI_LENGTH) ||
         (xmlStrlen(base) > XML_MAX_URI_LENGTH)) {
@@ -418,7 +632,19 @@ xmlSAX2ResolveEntity(void *ctx, const xmlChar *publicId, const xmlChar *systemId
         return(NULL);
     }
     res = xmlBuildURISafe(systemId, base, &URI);
-    if (URI == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[218]) {
+      if ((URI == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 218\n");
+      else
+        fprintf(stderr, "reached bug index 218\n");
+    }
+    if ((!FIXREVERTER[218] && (URI == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if (res < 0)
             xmlSAX2ErrMemory(ctxt);
         else
@@ -426,6 +652,9 @@ xmlSAX2ResolveEntity(void *ctx, const xmlChar *publicId, const xmlChar *systemId
                        "Can't resolve URI: %s\n", systemId);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlStrlen(URI) > XML_MAX_URI_LENGTH) {
         xmlFatalErr(ctxt, XML_ERR_RESOURCE_LIMIT, "URI too long");
     } else {
@@ -452,7 +681,22 @@ xmlSAX2GetEntity(void *ctx, const xmlChar *name)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlEntityPtr ret = NULL;
 
-    if (ctx == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[219]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 219\n");
+      else
+        fprintf(stderr, "reached bug index 219\n");
+    }
+    if ((!FIXREVERTER[219] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (ctxt->inSubset == 0) {
 	ret = xmlGetPredefinedEntity(name);
@@ -498,7 +742,22 @@ xmlSAX2GetParameterEntity(void *ctx, const xmlChar *name)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlEntityPtr ret;
 
-    if (ctx == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[220]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 220\n");
+      else
+        fprintf(stderr, "reached bug index 220\n");
+    }
+    if ((!FIXREVERTER[220] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = xmlGetParameterEntity(ctxt->myDoc, name);
     return(ret);
@@ -525,8 +784,23 @@ xmlSAX2EntityDecl(void *ctx, const xmlChar *name, int type,
     int extSubset;
     int res;
 
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[221]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 221\n");
+      else
+        fprintf(stderr, "reached bug index 221\n");
+    }
+    if ((!FIXREVERTER[221] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     extSubset = ctxt->inSubset == 2;
     res = xmlAddEntity(ctxt->myDoc, extSubset, name, type, publicId, systemId,
@@ -616,8 +890,23 @@ xmlSAX2AttributeDecl(void *ctx, const xmlChar *elem, const xmlChar *fullname,
     /* Avoid unused variable warning if features are disabled. */
     (void) attr;
 
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[222]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 222\n");
+      else
+        fprintf(stderr, "reached bug index 222\n");
+    }
+    if ((!FIXREVERTER[222] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((xmlStrEqual(fullname, BAD_CAST "xml:id")) &&
         (type != XML_ATTRIBUTE_ID)) {
@@ -684,8 +973,23 @@ xmlSAX2ElementDecl(void *ctx, const xmlChar * name, int type,
     /* Avoid unused variable warning if features are disabled. */
     (void) elem;
 
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[223]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 223\n");
+      else
+        fprintf(stderr, "reached bug index 223\n");
+    }
+    if ((!FIXREVERTER[223] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (ctxt->inSubset == 1)
         elem = xmlAddElementDecl(&ctxt->vctxt, ctxt->myDoc->intSubset,
@@ -700,8 +1004,23 @@ xmlSAX2ElementDecl(void *ctx, const xmlChar * name, int type,
         return;
     }
 #ifdef LIBXML_VALID_ENABLED
-    if (elem == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[224]) {
+      if ((elem == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 224\n");
+      else
+        fprintf(stderr, "reached bug index 224\n");
+    }
+    if ((!FIXREVERTER[224] && (elem == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->valid = 0;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->validate && ctxt->wellFormed &&
         ctxt->myDoc && ctxt->myDoc->intSubset)
         ctxt->valid &=
@@ -728,8 +1047,23 @@ xmlSAX2NotationDecl(void *ctx, const xmlChar *name,
     /* Avoid unused variable warning if features are disabled. */
     (void) nota;
 
-    if ((ctxt == NULL) || (ctxt->myDoc == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[225]) {
+      if ((ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 225\n");
+      else
+        fprintf(stderr, "reached bug index 225\n");
+    }
+    if ((!FIXREVERTER[225] && (ctxt == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((publicId == NULL) && (systemId == NULL)) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NOTATION_PROCESSING,
@@ -749,7 +1083,22 @@ xmlSAX2NotationDecl(void *ctx, const xmlChar *name,
 	return;
     }
 #ifdef LIBXML_VALID_ENABLED
-    if (nota == NULL) ctxt->valid = 0;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[226]) {
+      if ((nota == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 226\n");
+      else
+        fprintf(stderr, "reached bug index 226\n");
+    }
+    if ((!FIXREVERTER[226] && (nota == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    ) ctxt->valid = 0;
+    #ifdef FRCOV
+    }
+    #endif
     if ((ctxt->validate) && (ctxt->wellFormed) &&
         (ctxt->myDoc->intSubset != NULL))
 	ctxt->valid &= xmlValidateNotationDecl(&ctxt->vctxt, ctxt->myDoc,
@@ -801,16 +1150,61 @@ xmlSAX2StartDocument(void *ctx)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlDocPtr doc;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[227]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 227\n");
+      else
+        fprintf(stderr, "reached bug index 227\n");
+    }
+    if ((!FIXREVERTER[227] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef LIBXML_HTML_ENABLED
     if (ctxt->html) {
-	if (ctxt->myDoc == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[228]) {
+	  if ((ctxt -> myDoc == (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 228\n");
+	  else
+	    fprintf(stderr, "reached bug index 228\n");
+	}
+	if ((!FIXREVERTER[228] && (ctxt -> myDoc == (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->myDoc = htmlNewDocNoDtD(NULL, NULL);
-	if (ctxt->myDoc == NULL) {
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[229]) {
+	  if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 229\n");
+	  else
+	    fprintf(stderr, "reached bug index 229\n");
+	}
+	if ((!FIXREVERTER[229] && (ctxt -> myDoc == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSAX2ErrMemory(ctxt);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->myDoc->properties = XML_DOC_HTML;
 	ctxt->myDoc->parseFlags = ctxt->options;
     } else
@@ -852,7 +1246,22 @@ xmlSAX2EndDocument(void *ctx)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlDocPtr doc;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[230]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 230\n");
+      else
+        fprintf(stderr, "reached bug index 230\n");
+    }
+    if ((!FIXREVERTER[230] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef LIBXML_VALID_ENABLED
     if (ctxt->validate && ctxt->wellFormed &&
         ctxt->myDoc && ctxt->myDoc->intSubset)
@@ -882,8 +1291,23 @@ xmlSAX2AppendChild(xmlParserCtxtPtr ctxt, xmlNodePtr node) {
 	parent = (xmlNodePtr) ctxt->myDoc->extSubset;
     } else {
         parent = ctxt->node;
-        if (parent == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[231]) {
+          if ((parent == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 231\n");
+          else
+            fprintf(stderr, "reached bug index 231\n");
+        }
+        if ((!FIXREVERTER[231] && (parent == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             parent = (xmlNodePtr) ctxt->myDoc;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     last = parent->last;
@@ -975,12 +1399,27 @@ xmlSAX2AttributeInternal(void *ctx, const xmlChar *fullname,
 	    name = xmlStrdup(fullname);
 	}
     }
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[232]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 232\n");
+      else
+        fprintf(stderr, "reached bug index 232\n");
+    }
+    if ((!FIXREVERTER[232] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSAX2ErrMemory(ctxt);
 	if (ns != NULL)
 	    xmlFree(ns);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef LIBXML_HTML_ENABLED
     if ((ctxt->html) &&
@@ -1005,8 +1444,23 @@ xmlSAX2AttributeInternal(void *ctx, const xmlChar *fullname,
         if (ctxt->vctxt.valid != 1) {
             ctxt->valid = 0;
         }
-        if (nval != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[233]) {
+          if ((nval != (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 233\n");
+          else
+            fprintf(stderr, "reached bug index 233\n");
+        }
+        if ((!FIXREVERTER[233] && (nval != (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             value = nval;
+            #ifdef FRCOV
+            }
+            #endif
 #else
         nval = NULL;
 #endif /* LIBXML_VALID_ENABLED */
@@ -1193,10 +1647,25 @@ xmlSAX2AttributeInternal(void *ctx, const xmlChar *fullname,
 
     /* !!!!!! <a toto:arg="" xmlns:toto="http://toto.com"> */
     ret = xmlNewNsPropEatName(ctxt->node, namespace, name, NULL);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[234]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 234\n");
+      else
+        fprintf(stderr, "reached bug index 234\n");
+    }
+    if ((!FIXREVERTER[234] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSAX2ErrMemory(ctxt);
         goto error;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((ctxt->replaceEntities == 0) && (!ctxt->html)) {
         if (xmlNodeParseContent((xmlNodePtr) ret, value, INT_MAX) < 0)
@@ -1337,17 +1806,62 @@ process_external_subset:
 
 		    if (attr->prefix != NULL) {
 			fulln = xmlStrdup(attr->prefix);
-                        if (fulln != NULL)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[235]) {
+                          if ((fulln != (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 235\n");
+                          else
+                            fprintf(stderr, "reached bug index 235\n");
+                        }
+                        if ((!FIXREVERTER[235] && (fulln != (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
 			    fulln = xmlStrcat(fulln, BAD_CAST ":");
-                        if (fulln != NULL)
+			    #ifdef FRCOV
+			    }
+			    #endif
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[236]) {
+                          if ((fulln != (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 236\n");
+                          else
+                            fprintf(stderr, "reached bug index 236\n");
+                        }
+                        if ((!FIXREVERTER[236] && (fulln != (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
 			    fulln = xmlStrcat(fulln, attr->name);
+			    #ifdef FRCOV
+			    }
+			    #endif
 		    } else {
 			fulln = xmlStrdup(attr->name);
 		    }
-                    if (fulln == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[237]) {
+                      if ((fulln == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 237\n");
+                      else
+                        fprintf(stderr, "reached bug index 237\n");
+                    }
+                    if ((!FIXREVERTER[237] && (fulln == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlSAX2ErrMemory(ctxt);
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
 
 		    /*
 		     * Check that the attribute is not declared in the
@@ -1410,10 +1924,25 @@ process_external_subset:
 			xmlChar *fulln;
 
                         fulln = xmlBuildQName(attr->name, attr->prefix, fn, 50);
-			if (fulln == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[238]) {
+			  if ((fulln == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 238\n");
+			  else
+			    fprintf(stderr, "reached bug index 238\n");
+			}
+			if ((!FIXREVERTER[238] && (fulln == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    xmlSAX2ErrMemory(ctxt);
 			    return;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 
 			/*
 			 * Check that the attribute is not declared in the
@@ -1471,7 +2000,22 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
     const xmlChar *value;
     int i;
 
-    if ((ctx == NULL) || (fullname == NULL) || (ctxt->myDoc == NULL)) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[240]) {
+      if ((ctx == (void *) 0 || fullname == (void *) 0 || ctxt -> myDoc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 240\n");
+      else
+        fprintf(stderr, "reached bug index 240\n");
+    }
+    if ((!FIXREVERTER[240] && (ctx == (void *) 0 || fullname == (void *) 0 || ctxt -> myDoc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * First check on validity:
@@ -1495,10 +2039,25 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
          * Split the full name into a namespace prefix and the tag name
          */
         name = xmlSplitQName(ctxt, fullname, &prefix);
-        if (name == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[241]) {
+          if ((name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 241\n");
+          else
+            fprintf(stderr, "reached bug index 241\n");
+        }
+        if ((!FIXREVERTER[241] && (name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlSAX2ErrMemory(ctxt);
             return;
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
 
     /*
@@ -1507,17 +2066,47 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
      *        an attribute at this level.
      */
     ret = xmlNewDocNodeEatName(ctxt->myDoc, NULL, name, NULL);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[242]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 242\n");
+      else
+        fprintf(stderr, "reached bug index 242\n");
+    }
+    if ((!FIXREVERTER[242] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(prefix);
 	xmlSAX2ErrMemory(ctxt);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->nodemem = -1;
 
     /* Initialize parent before pushing node */
     parent = ctxt->node;
-    if (parent == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[243]) {
+      if ((parent == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 243\n");
+      else
+        fprintf(stderr, "reached bug index 243\n");
+    }
+    if ((!FIXREVERTER[243] && (parent == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         parent = (xmlNodePtr) ctxt->myDoc;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Link the child element
@@ -1554,7 +2143,21 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
             i = 0;
             att = atts[i++];
             value = atts[i++];
-	    while ((att != NULL) && (value != NULL)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[244])
+	      fprintf(stderr, "reached bug index 244\n");
+	    while ((FIXREVERTER[244] && (att != (void *) 0 )) || (!FIXREVERTER[244] && (att != (void *) 0 && value != (void *) 0 ))
+	    #else
+	    while (att != (void *) 0 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(value != (void *) 0 ))
+	        fprintf(stderr, "triggered bug index 244\n");
+	      #endif
+	    
 		if ((att[0] == 'x') && (att[1] == 'm') && (att[2] == 'l') &&
 		    (att[3] == 'n') && (att[4] == 's'))
 		    xmlSAX2AttributeInternal(ctxt, att, value, prefix);
@@ -1562,6 +2165,9 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 		att = atts[i++];
 		value = atts[i++];
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
         }
 
         /*
@@ -1608,7 +2214,21 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 		value = atts[i++];
 	    }
 	} else {
-	    while ((att != NULL) && (value != NULL)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[245])
+	      fprintf(stderr, "reached bug index 245\n");
+	    while ((FIXREVERTER[245] && (att != (void *) 0 )) || (!FIXREVERTER[245] && (att != (void *) 0 && value != (void *) 0 ))
+	    #else
+	    while (att != (void *) 0 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(value != (void *) 0 ))
+	        fprintf(stderr, "triggered bug index 245\n");
+	      #endif
+	    
 		if ((att[0] != 'x') || (att[1] != 'm') || (att[2] != 'l') ||
 		    (att[3] != 'n') || (att[4] != 's'))
 		    xmlSAX2AttributeInternal(ctxt, att, value, NULL);
@@ -1619,6 +2239,9 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 		att = atts[i++];
 		value = atts[i++];
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
     }
 
@@ -1632,10 +2255,40 @@ xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
 	int chk;
 
 	chk = xmlValidateDtdFinal(&ctxt->vctxt, ctxt->myDoc);
-	if (chk <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[246]) {
+	  if ((chk <= 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 246\n");
+	  else
+	    fprintf(stderr, "reached bug index 246\n");
+	}
+	if ((!FIXREVERTER[246] && (chk <= 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->valid = 0;
-	if (chk < 0)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[247]) {
+	  if ((chk < 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 247\n");
+	  else
+	    fprintf(stderr, "reached bug index 247\n");
+	}
+	if ((!FIXREVERTER[247] && (chk < 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->wellFormed = 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->valid &= xmlValidateRoot(&ctxt->vctxt, ctxt->myDoc);
 	ctxt->vctxt.flags |= XML_VCTXT_DTD_VALIDATED;
     }
@@ -1658,7 +2311,22 @@ xmlSAX2EndElement(void *ctx, const xmlChar *name ATTRIBUTE_UNUSED)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[248]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 248\n");
+      else
+        fprintf(stderr, "reached bug index 248\n");
+    }
+    if ((!FIXREVERTER[248] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     ctxt->nodemem = -1;
 
@@ -1702,10 +2370,25 @@ xmlSAX2TextNode(xmlParserCtxtPtr ctxt, const xmlChar *str, int len) {
     } else {
 	ret = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
     }
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[249]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 249\n");
+      else
+        fprintf(stderr, "reached bug index 249\n");
+    }
+    if ((!FIXREVERTER[249] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlCtxtErrMemory(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlNode));
     /*
      * intern the formatting blanks found between tags, or the
@@ -1724,11 +2407,26 @@ xmlSAX2TextNode(xmlParserCtxtPtr ctxt, const xmlChar *str, int len) {
 	} else if ((len <= 3) && ((cur == '"') || (cur == '\'') ||
 	    ((cur == '<') && (str[len + 1] != '!')))) {
 	    intern = xmlDictLookup(ctxt->dict, str, len);
-            if (intern == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[250]) {
+              if ((intern == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 250\n");
+              else
+                fprintf(stderr, "reached bug index 250\n");
+            }
+            if ((!FIXREVERTER[250] && (intern == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlSAX2ErrMemory(ctxt);
                 xmlFree(ret);
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	} else if (IS_BLANK_CH(*str) && (len < 60) && (cur == '<') &&
 	           (str[len + 1] != '!')) {
 	    int i;
@@ -1737,11 +2435,26 @@ xmlSAX2TextNode(xmlParserCtxtPtr ctxt, const xmlChar *str, int len) {
 		if (!IS_BLANK_CH(str[i])) goto skip;
 	    }
 	    intern = xmlDictLookup(ctxt->dict, str, len);
-            if (intern == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[251]) {
+              if ((intern == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 251\n");
+              else
+                fprintf(stderr, "reached bug index 251\n");
+            }
+            if ((!FIXREVERTER[251] && (intern == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlSAX2ErrMemory(ctxt);
                 xmlFree(ret);
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	}
     }
 skip:
@@ -1750,11 +2463,26 @@ skip:
     ret->name = xmlStringText;
     if (intern == NULL) {
 	ret->content = xmlStrndup(str, len);
-	if (ret->content == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[252]) {
+	  if ((ret -> content == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 252\n");
+	  else
+	    fprintf(stderr, "reached bug index 252\n");
+	}
+	if ((!FIXREVERTER[252] && (ret -> content == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSAX2ErrMemory(ctxt);
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else
 	ret->content = (xmlChar *) intern;
 
@@ -1844,10 +2572,25 @@ xmlSAX2AttributeNs(xmlParserCtxtPtr ctxt,
 	ctxt->freeAttrsNr--;
     } else {
         ret = xmlMalloc(sizeof(*ret));
-        if (ret == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[253]) {
+          if ((ret == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 253\n");
+          else
+            fprintf(stderr, "reached bug index 253\n");
+        }
+        if ((!FIXREVERTER[253] && (ret == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlSAX2ErrMemory(ctxt);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
 
     memset(ret, 0, sizeof(xmlAttr));
@@ -2062,7 +2805,22 @@ xmlSAX2StartElementNs(void *ctx,
     xmlChar *lname = NULL;
     int i, j;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[254]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 254\n");
+      else
+        fprintf(stderr, "reached bug index 254\n");
+    }
+    if ((!FIXREVERTER[254] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     /*
      * First check on validity:
      */
@@ -2085,17 +2843,47 @@ xmlSAX2StartElementNs(void *ctx,
 	    const xmlChar *fullname;
 
 	    fullname = xmlDictQLookup(ctxt->dict, prefix, localname);
-	    if (fullname == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[255]) {
+	      if ((fullname == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 255\n");
+	      else
+	        fprintf(stderr, "reached bug index 255\n");
+	    }
+	    if ((!FIXREVERTER[255] && (fullname == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 xmlSAX2ErrMemory(ctxt);
                 return;
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    localname = fullname;
 	} else {
 	    lname = xmlBuildQName(localname, prefix, NULL, 0);
-            if (lname == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[256]) {
+              if ((lname == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 256\n");
+              else
+                fprintf(stderr, "reached bug index 256\n");
+            }
+            if ((!FIXREVERTER[256] && (lname == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlSAX2ErrMemory(ctxt);
                 return;
             }
+            #ifdef FRCOV
+            }
+            #endif
 	}
     }
     /*
@@ -2116,11 +2904,26 @@ xmlSAX2StartElementNs(void *ctx,
 		ret->name = xmlStrdup(localname);
 	    else
 	        ret->name = lname;
-	    if (ret->name == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[257]) {
+	      if ((ret -> name == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 257\n");
+	      else
+	        fprintf(stderr, "reached bug index 257\n");
+	    }
+	    if ((!FIXREVERTER[257] && (ret -> name == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlSAX2ErrMemory(ctxt);
                 xmlFree(ret);
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
 	    xmlRegisterNodeDefaultValue(ret);
@@ -2133,10 +2936,25 @@ xmlSAX2StartElementNs(void *ctx,
 	else
 	    ret = xmlNewDocNodeEatName(ctxt->myDoc, NULL,
 	                               (xmlChar *) lname, NULL);
-	if (ret == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[258]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 258\n");
+	  else
+	    fprintf(stderr, "reached bug index 258\n");
+	}
+	if ((!FIXREVERTER[258] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSAX2ErrMemory(ctxt);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
 
     /*
@@ -2208,11 +3026,26 @@ xmlSAX2StartElementNs(void *ctx,
 	}
 	if (ret->ns == NULL) {
 	    ns = xmlNewNs(ret, NULL, prefix);
-	    if (ns == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[259]) {
+	      if ((ns == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 259\n");
+	      else
+	        fprintf(stderr, "reached bug index 259\n");
+	    }
+	    if ((!FIXREVERTER[259] && (ns == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 
 	        xmlSAX2ErrMemory(ctxt);
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
             if (prefix != NULL)
                 xmlNsWarnMsg(ctxt, XML_NS_ERR_UNDEFINED_NAMESPACE,
                              "Namespace prefix %s was not found\n",
@@ -2242,10 +3075,25 @@ xmlSAX2StartElementNs(void *ctx,
 
 		    fullname = xmlDictQLookup(ctxt->dict, attributes[j+1],
 		                              attributes[j]);
-		    if (fullname == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[260]) {
+		      if ((fullname == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 260\n");
+		      else
+		        fprintf(stderr, "reached bug index 260\n");
+		    }
+		    if ((!FIXREVERTER[260] && (fullname == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
                         xmlSAX2ErrMemory(ctxt);
                         return;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     attr = xmlSAX2AttributeNs(ctxt, fullname, NULL,
                                               attributes[j+3],
                                               attributes[j+4]);
@@ -2253,10 +3101,25 @@ xmlSAX2StartElementNs(void *ctx,
 		} else {
 		    lname = xmlBuildQName(attributes[j], attributes[j+1],
 		                          NULL, 0);
-		    if (lname == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[261]) {
+		      if ((lname == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 261\n");
+		      else
+		        fprintf(stderr, "reached bug index 261\n");
+		    }
+		    if ((!FIXREVERTER[261] && (lname == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
                         xmlSAX2ErrMemory(ctxt);
                         return;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     attr = xmlSAX2AttributeNs(ctxt, lname, NULL,
                                               attributes[j+3],
                                               attributes[j+4]);
@@ -2267,8 +3130,23 @@ xmlSAX2StartElementNs(void *ctx,
             attr = xmlSAX2AttributeNs(ctxt, attributes[j], attributes[j+1],
                                       attributes[j+3], attributes[j+4]);
 have_attr:
-            if (attr == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[262]) {
+              if ((attr == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 262\n");
+              else
+                fprintf(stderr, "reached bug index 262\n");
+            }
+            if ((!FIXREVERTER[262] && (attr == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 continue;
+                #ifdef FRCOV
+                }
+                #endif
 
             /* link at the end to preserve order */
             if (prev == NULL) {
@@ -2292,10 +3170,40 @@ have_attr:
 	int chk;
 
 	chk = xmlValidateDtdFinal(&ctxt->vctxt, ctxt->myDoc);
-	if (chk <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[263]) {
+	  if ((chk <= 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 263\n");
+	  else
+	    fprintf(stderr, "reached bug index 263\n");
+	}
+	if ((!FIXREVERTER[263] && (chk <= 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->valid = 0;
-	if (chk < 0)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[264]) {
+	  if ((chk < 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 264\n");
+	  else
+	    fprintf(stderr, "reached bug index 264\n");
+	}
+	if ((!FIXREVERTER[264] && (chk < 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->wellFormed = 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->valid &= xmlValidateRoot(&ctxt->vctxt, ctxt->myDoc);
 	ctxt->vctxt.flags |= XML_VCTXT_DTD_VALIDATED;
     }
@@ -2320,7 +3228,22 @@ xmlSAX2EndElementNs(void *ctx,
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[265]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 265\n");
+      else
+        fprintf(stderr, "reached bug index 265\n");
+    }
+    if ((!FIXREVERTER[265] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->nodemem = -1;
 
 #ifdef LIBXML_VALID_ENABLED
@@ -2349,12 +3272,42 @@ xmlSAX2Reference(void *ctx, const xmlChar *name)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNodePtr ret;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[266]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 266\n");
+      else
+        fprintf(stderr, "reached bug index 266\n");
+    }
+    if ((!FIXREVERTER[266] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlNewReference(ctxt->myDoc, name);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[267]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 267\n");
+      else
+        fprintf(stderr, "reached bug index 267\n");
+    }
+    if ((!FIXREVERTER[267] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSAX2ErrMemory(ctxt);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     xmlSAX2AppendChild(ctxt, ret);
 }
@@ -2374,16 +3327,46 @@ xmlSAX2Text(xmlParserCtxtPtr ctxt, const xmlChar *ch, int len,
 {
     xmlNodePtr lastChild;
 
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[268]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 268\n");
+      else
+        fprintf(stderr, "reached bug index 268\n");
+    }
+    if ((!FIXREVERTER[268] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     /*
      * Handle the data if any. If there is no child
      * add it as content, otherwise if the last child is text,
      * concatenate it, else create a new node of type text.
      */
 
-    if (ctxt->node == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[269]) {
+      if ((ctxt -> node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 269\n");
+      else
+        fprintf(stderr, "reached bug index 269\n");
+    }
+    if ((!FIXREVERTER[269] && (ctxt -> node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     lastChild = ctxt->node->last;
 
     /*
@@ -2430,16 +3413,46 @@ xmlSAX2Text(xmlParserCtxtPtr ctxt, const xmlChar *ch, int len,
 	               (xmlDictOwns(ctxt->dict, lastChild->content))) {
 		lastChild->content = xmlStrdup(lastChild->content);
 	    }
-	    if (lastChild->content == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[270]) {
+	      if ((lastChild -> content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 270\n");
+	      else
+	        fprintf(stderr, "reached bug index 270\n");
+	    }
+	    if ((!FIXREVERTER[270] && (lastChild -> content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSAX2ErrMemory(ctxt);
 		return;
  	    }
-            if ((len > maxLength) || (ctxt->nodelen > maxLength - len)) {
+ 	    #ifdef FRCOV
+ 	    }
+ 	    #endif
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[271]) {
+              if ((len > maxLength || ctxt -> nodelen > maxLength - len ) && !(0))
+                fprintf(stderr, "triggered bug index 271\n");
+              else
+                fprintf(stderr, "reached bug index 271\n");
+            }
+            if ((!FIXREVERTER[271] && (len > maxLength || ctxt -> nodelen > maxLength - len ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlFatalErr(ctxt, XML_ERR_RESOURCE_LIMIT,
                             "Text node too long, try XML_PARSE_HUGE");
                 xmlHaltParser(ctxt);
                 return;
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    if (ctxt->nodelen + len >= ctxt->nodemem) {
 		xmlChar *newbuf;
 		int size;
@@ -2449,10 +3462,25 @@ xmlSAX2Text(xmlParserCtxtPtr ctxt, const xmlChar *ch, int len,
                        ctxt->nodemem + len;
 		size = size > INT_MAX / 2 ? INT_MAX : size * 2;
                 newbuf = (xmlChar *) xmlRealloc(lastChild->content,size);
-		if (newbuf == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[272]) {
+		  if ((newbuf == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 272\n");
+		  else
+		    fprintf(stderr, "reached bug index 272\n");
+		}
+		if ((!FIXREVERTER[272] && (newbuf == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSAX2ErrMemory(ctxt);
 		    return;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ctxt->nodemem = size;
 		lastChild->content = newbuf;
 	    }
@@ -2471,8 +3499,23 @@ xmlSAX2Text(xmlParserCtxtPtr ctxt, const xmlChar *ch, int len,
 	    /* Mixed content, first time */
             if (type == XML_TEXT_NODE) {
                 lastChild = xmlSAX2TextNode(ctxt, ch, len);
-                if (lastChild != NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[273]) {
+                  if ((lastChild != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 273\n");
+                  else
+                    fprintf(stderr, "reached bug index 273\n");
+                }
+                if ((!FIXREVERTER[273] && (lastChild != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     lastChild->doc = ctxt->myDoc;
+                    #ifdef FRCOV
+                    }
+                    #endif
             } else
                 lastChild = xmlNewCDataBlock(ctxt->myDoc, ch, len);
 	    if (lastChild == NULL) {
@@ -2544,13 +3587,43 @@ xmlSAX2ProcessingInstruction(void *ctx, const xmlChar *target,
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNodePtr ret;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[274]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 274\n");
+      else
+        fprintf(stderr, "reached bug index 274\n");
+    }
+    if ((!FIXREVERTER[274] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = xmlNewDocPI(ctxt->myDoc, target, data);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[275]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 275\n");
+      else
+        fprintf(stderr, "reached bug index 275\n");
+    }
+    if ((!FIXREVERTER[275] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSAX2ErrMemory(ctxt);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     xmlSAX2AppendChild(ctxt, ret);
 }
@@ -2568,13 +3641,43 @@ xmlSAX2Comment(void *ctx, const xmlChar *value)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNodePtr ret;
 
-    if (ctx == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[276]) {
+      if ((ctx == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 276\n");
+      else
+        fprintf(stderr, "reached bug index 276\n");
+    }
+    if ((!FIXREVERTER[276] && (ctx == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = xmlNewDocComment(ctxt->myDoc, value);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[277]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 277\n");
+      else
+        fprintf(stderr, "reached bug index 277\n");
+    }
+    if ((!FIXREVERTER[277] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSAX2ErrMemory(ctxt);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     xmlSAX2AppendChild(ctxt, ret);
 }
@@ -2634,7 +3737,22 @@ xmlSAXDefaultVersion(int version)
 int
 xmlSAXVersion(xmlSAXHandler *hdlr, int version)
 {
-    if (hdlr == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[278]) {
+      if ((hdlr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 278\n");
+      else
+        fprintf(stderr, "reached bug index 278\n");
+    }
+    if ((!FIXREVERTER[278] && (hdlr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (version == 2) {
 	hdlr->startElementNs = xmlSAX2StartElementNs;
 	hdlr->endElementNs = xmlSAX2EndElementNs;
diff --git a/buf.c b/buf.c
index f9f59b26..ad6f10dc 100644
--- a/buf.c
+++ b/buf.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * buf.c: memory buffers for libxml2
  *
@@ -91,8 +95,23 @@ struct _xmlBuf {
 static void
 xmlBufMemoryError(xmlBufPtr buf)
 {
-    if (buf->error == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[87]) {
+      if ((buf -> error == 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 87\n");
+      else
+        fprintf(stderr, "reached bug index 87\n");
+    }
+    if ((!FIXREVERTER[87] && (buf -> error == 0  ))
+    #else
+    if (0
+    #endif
+    )
         buf->error = XML_ERR_NO_MEMORY;
+        #ifdef FRCOV
+        }
+        #endif
 }
 
 /**
@@ -121,8 +140,23 @@ xmlBufCreate(void) {
     xmlBufPtr ret;
 
     ret = (xmlBufPtr) xmlMalloc(sizeof(xmlBuf));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[89]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 89\n");
+      else
+        fprintf(stderr, "reached bug index 89\n");
+    }
+    if ((!FIXREVERTER[89] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret->use = 0;
     ret->error = 0;
     ret->buffer = NULL;
@@ -130,10 +164,25 @@ xmlBufCreate(void) {
     UPDATE_COMPAT(ret);
     ret->alloc = xmlBufferAllocScheme;
     ret->content = (xmlChar *) xmlMallocAtomic(ret->size);
-    if (ret->content == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[90]) {
+      if ((ret -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 90\n");
+      else
+        fprintf(stderr, "reached bug index 90\n");
+    }
+    if ((!FIXREVERTER[90] && (ret -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(ret);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->content[0] = 0;
     ret->contentIO = NULL;
     return(ret);
@@ -153,8 +202,23 @@ xmlBufCreateSize(size_t size) {
     if (size == SIZE_MAX)
         return(NULL);
     ret = (xmlBufPtr) xmlMalloc(sizeof(xmlBuf));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[91]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 91\n");
+      else
+        fprintf(stderr, "reached bug index 91\n");
+    }
+    if ((!FIXREVERTER[91] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret->use = 0;
     ret->error = 0;
     ret->buffer = NULL;
@@ -163,10 +227,25 @@ xmlBufCreateSize(size_t size) {
     UPDATE_COMPAT(ret);
     if (ret->size){
         ret->content = (xmlChar *) xmlMallocAtomic(ret->size);
-        if (ret->content == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[92]) {
+          if ((ret -> content == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 92\n");
+          else
+            fprintf(stderr, "reached bug index 92\n");
+        }
+        if ((!FIXREVERTER[92] && (ret -> content == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFree(ret);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ret->content[0] = 0;
     } else
 	ret->content = NULL;
@@ -188,8 +267,23 @@ xmlChar *
 xmlBufDetach(xmlBufPtr buf) {
     xmlChar *ret;
 
-    if (buf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[93]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 93\n");
+      else
+        fprintf(stderr, "reached bug index 93\n");
+    }
+    if ((!FIXREVERTER[93] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (buf->buffer != NULL)
         return(NULL);
     if (buf->error)
@@ -240,9 +334,24 @@ xmlBufGetAllocationScheme(xmlBufPtr buf) {
 int
 xmlBufSetAllocationScheme(xmlBufPtr buf,
                           xmlBufferAllocationScheme scheme) {
-    if ((buf == NULL) || (buf->error != 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[95]) {
+      if ((buf == (void *) 0 || buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 95\n");
+      else
+        fprintf(stderr, "reached bug index 95\n");
+    }
+    if ((!FIXREVERTER[95] && (buf == (void *) 0 || buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (buf->alloc == XML_BUFFER_ALLOC_IO)
         return(-1);
     if ((scheme == XML_BUFFER_ALLOC_DOUBLEIT) ||
@@ -274,9 +383,24 @@ xmlBufSetAllocationScheme(xmlBufPtr buf,
  */
 void
 xmlBufFree(xmlBufPtr buf) {
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[96]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 96\n");
+      else
+        fprintf(stderr, "reached bug index 96\n");
+    }
+    if ((!FIXREVERTER[96] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((buf->alloc == XML_BUFFER_ALLOC_IO) &&
         (buf->contentIO != NULL)) {
@@ -326,10 +450,55 @@ xmlBufEmpty(xmlBufPtr buf) {
  */
 size_t
 xmlBufShrink(xmlBufPtr buf, size_t len) {
-    if ((buf == NULL) || (buf->error != 0)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[99]) {
+      if ((buf == (void *) 0 || buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 99\n");
+      else
+        fprintf(stderr, "reached bug index 99\n");
+    }
+    if ((!FIXREVERTER[99] && (buf == (void *) 0 || buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     CHECK_COMPAT(buf)
-    if (len == 0) return(0);
-    if (len > buf->use) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[100]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 100\n");
+      else
+        fprintf(stderr, "reached bug index 100\n");
+    }
+    if ((!FIXREVERTER[100] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[101]) {
+      if ((len > buf -> use ) && !(0))
+        fprintf(stderr, "triggered bug index 101\n");
+      else
+        fprintf(stderr, "reached bug index 101\n");
+    }
+    if ((!FIXREVERTER[101] && (len > buf -> use ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     buf->use -= len;
     if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) {
@@ -377,11 +546,41 @@ xmlBufGrowInternal(xmlBufPtr buf, size_t len) {
     size_t size;
     xmlChar *newbuf;
 
-    if ((buf == NULL) || (buf->error != 0)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[102]) {
+      if ((buf == (void *) 0 || buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 102\n");
+      else
+        fprintf(stderr, "reached bug index 102\n");
+    }
+    if ((!FIXREVERTER[102] && (buf == (void *) 0 || buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     CHECK_COMPAT(buf)
 
-    if (len < buf->size - buf->use)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[103]) {
+      if ((len < buf -> size - buf -> use ) && !(0))
+        fprintf(stderr, "triggered bug index 103\n");
+      else
+        fprintf(stderr, "reached bug index 103\n");
+    }
+    if ((!FIXREVERTER[103] && (len < buf -> size - buf -> use ))
+    #else
+    if (0
+    #endif
+    )
         return(buf->size - buf->use - 1);
+        #ifdef FRCOV
+        }
+        #endif
     if (len >= SIZE_MAX - buf->use) {
         xmlBufMemoryError(buf);
         return(0);
@@ -403,25 +602,70 @@ xmlBufGrowInternal(xmlBufPtr buf, size_t len) {
 	    xmlBufMemoryError(buf);
 	    return(0);
 	}
-	if (size >= XML_MAX_TEXT_LENGTH)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[104]) {
+	  if ((size >= 10000000 ) && !(0))
+	    fprintf(stderr, "triggered bug index 104\n");
+	  else
+	    fprintf(stderr, "reached bug index 104\n");
+	}
+	if ((!FIXREVERTER[104] && (size >= 10000000 ))
+	#else
+	if (0
+	#endif
+	)
 	    size = XML_MAX_TEXT_LENGTH;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) {
         size_t start_buf = buf->content - buf->contentIO;
 
 	newbuf = (xmlChar *) xmlRealloc(buf->contentIO, start_buf + size);
-	if (newbuf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[105]) {
+	  if ((newbuf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 105\n");
+	  else
+	    fprintf(stderr, "reached bug index 105\n");
+	}
+	if ((!FIXREVERTER[105] && (newbuf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlBufMemoryError(buf);
 	    return(0);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	buf->contentIO = newbuf;
 	buf->content = newbuf + start_buf;
     } else {
 	newbuf = (xmlChar *) xmlRealloc(buf->content, size);
-	if (newbuf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[106]) {
+	  if ((newbuf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 106\n");
+	  else
+	    fprintf(stderr, "reached bug index 106\n");
+	}
+	if ((!FIXREVERTER[106] && (newbuf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlBufMemoryError(buf);
 	    return(0);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	buf->content = newbuf;
     }
     buf->size = size;
@@ -443,12 +687,57 @@ int
 xmlBufGrow(xmlBufPtr buf, int len) {
     size_t ret;
 
-    if ((buf == NULL) || (len < 0)) return(-1);
-    if (len == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[107]) {
+      if ((buf == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 107\n");
+      else
+        fprintf(stderr, "reached bug index 107\n");
+    }
+    if ((!FIXREVERTER[107] && (buf == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[108]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 108\n");
+      else
+        fprintf(stderr, "reached bug index 108\n");
+    }
+    if ((!FIXREVERTER[108] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     ret = xmlBufGrowInternal(buf, len);
-    if (buf->error != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[109]) {
+      if ((buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 109\n");
+      else
+        fprintf(stderr, "reached bug index 109\n");
+    }
+    if ((!FIXREVERTER[109] && (buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     return(ret > INT_MAX ? INT_MAX : ret);
 }
 
@@ -530,8 +819,23 @@ xmlBufAddLen(xmlBufPtr buf, size_t len) {
     if ((buf == NULL) || (buf->error))
         return(-1);
     CHECK_COMPAT(buf)
-    if (len >= (buf->size - buf->use))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[113]) {
+      if ((len >= buf -> size - buf -> use ) && !(0))
+        fprintf(stderr, "triggered bug index 113\n");
+      else
+        fprintf(stderr, "reached bug index 113\n");
+    }
+    if ((!FIXREVERTER[113] && (len >= buf -> size - buf -> use ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     buf->use += len;
     buf->content[buf->use] = 0;
     UPDATE_COMPAT(buf)
@@ -640,15 +944,45 @@ xmlBufResize(xmlBufPtr buf, size_t size)
         /*
 	 * Used to provide parsing limits
 	 */
-        if (size >= XML_MAX_TEXT_LENGTH) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[114]) {
+          if ((size >= 10000000 ) && !(0))
+            fprintf(stderr, "triggered bug index 114\n");
+          else
+            fprintf(stderr, "reached bug index 114\n");
+        }
+        if ((!FIXREVERTER[114] && (size >= 10000000 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlBufMemoryError(buf);
 	    return(0);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
 
     /* Don't resize if we don't have to */
-    if (size < buf->size)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[115]) {
+      if ((size < buf -> size ) && !(0))
+        fprintf(stderr, "triggered bug index 115\n");
+      else
+        fprintf(stderr, "reached bug index 115\n");
+    }
+    if ((!FIXREVERTER[115] && (size < buf -> size ))
+    #else
+    if (0
+    #endif
+    )
         return 1;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* figure out new size */
     switch (buf->alloc){
@@ -702,10 +1036,25 @@ xmlBufResize(xmlBufPtr buf, size_t size)
 	    buf->size += start_buf;
 	} else {
 	    rebuf = (xmlChar *) xmlRealloc(buf->contentIO, start_buf + newSize);
-	    if (rebuf == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[116]) {
+	      if ((rebuf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 116\n");
+	      else
+	        fprintf(stderr, "reached bug index 116\n");
+	    }
+	    if ((!FIXREVERTER[116] && (rebuf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlBufMemoryError(buf);
 		return 0;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf->contentIO = rebuf;
 	    buf->content = rebuf + start_buf;
 	}
@@ -730,10 +1079,25 @@ xmlBufResize(xmlBufPtr buf, size_t size)
 		rebuf[buf->use] = 0;
 	    }
 	}
-	if (rebuf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[117]) {
+	  if ((rebuf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 117\n");
+	  else
+	    fprintf(stderr, "reached bug index 117\n");
+	}
+	if ((!FIXREVERTER[117] && (rebuf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlBufMemoryError(buf);
 	    return 0;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	buf->content = rebuf;
     }
     buf->size = newSize;
@@ -764,13 +1128,73 @@ xmlBufAdd(xmlBufPtr buf, const xmlChar *str, int len) {
     if (len < -1) {
 	return -1;
     }
-    if (len == 0) return 0;
-
-    if (len < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[118]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 118\n");
+      else
+        fprintf(stderr, "reached bug index 118\n");
+    }
+    if ((!FIXREVERTER[118] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[119]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 119\n");
+      else
+        fprintf(stderr, "reached bug index 119\n");
+    }
+    if ((!FIXREVERTER[119] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
         len = xmlStrlen(str);
-
-    if (len < 0) return -1;
-    if (len == 0) return 0;
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[120]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 120\n");
+      else
+        fprintf(stderr, "reached bug index 120\n");
+    }
+    if ((!FIXREVERTER[120] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[121]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 121\n");
+      else
+        fprintf(stderr, "reached bug index 121\n");
+    }
+    if ((!FIXREVERTER[121] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
 
     /* Note that both buf->size and buf->use can be zero here. */
     if ((size_t) len >= buf->size - buf->use) {
@@ -783,10 +1207,25 @@ xmlBufAdd(xmlBufPtr buf, const xmlChar *str, int len) {
 	    /*
 	     * Used to provide parsing limits
 	     */
-	    if (needSize >= XML_MAX_TEXT_LENGTH) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[122]) {
+	      if ((needSize >= 10000000 ) && !(0))
+	        fprintf(stderr, "triggered bug index 122\n");
+	      else
+	        fprintf(stderr, "reached bug index 122\n");
+	    }
+	    if ((!FIXREVERTER[122] && (needSize >= 10000000 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlBufMemoryError(buf);
 		return(-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
         if (!xmlBufResize(buf, needSize))
             return(-1);
@@ -814,7 +1253,22 @@ xmlBufCat(xmlBufPtr buf, const xmlChar *str) {
     if ((buf == NULL) || (buf->error))
         return(-1);
     CHECK_COMPAT(buf)
-    if (str == NULL) return -1;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[123]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 123\n");
+      else
+        fprintf(stderr, "reached bug index 123\n");
+    }
+    if ((!FIXREVERTER[123] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
     return xmlBufAdd(buf, str, -1);
 }
 
@@ -944,8 +1398,23 @@ xmlBufResetInput(xmlBufPtr buf, xmlParserInputPtr input) {
  */
 int
 xmlBufUpdateInput(xmlBufPtr buf, xmlParserInputPtr input, size_t pos) {
-    if ((buf == NULL) || (input == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[127]) {
+      if ((buf == (void *) 0 || input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 127\n");
+      else
+        fprintf(stderr, "reached bug index 127\n");
+    }
+    if ((!FIXREVERTER[127] && (buf == (void *) 0 || input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     CHECK_COMPAT(buf)
     input->base = buf->content;
     input->cur = input->base + pos;
diff --git a/catalog.c b/catalog.c
index ef0eef57..18f2b18b 100644
--- a/catalog.c
+++ b/catalog.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /**
  * catalog.c: set of generic Catalog related routines
  *
@@ -259,18 +263,48 @@ xmlNewCatalogEntry(xmlCatalogEntryType type, const xmlChar *name,
     xmlChar *normid = NULL;
 
     ret = (xmlCatalogEntryPtr) xmlMalloc(sizeof(xmlCatalogEntry));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[534]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 534\n");
+      else
+        fprintf(stderr, "reached bug index 534\n");
+    }
+    if ((!FIXREVERTER[534] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlCatalogErrMemory();
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->next = NULL;
     ret->parent = NULL;
     ret->children = NULL;
     ret->type = type;
     if (type == XML_CATA_PUBLIC || type == XML_CATA_DELEGATE_PUBLIC) {
         normid = xmlCatalogNormalizePublic(name);
-        if (normid != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[535]) {
+          if ((normid != (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 535\n");
+          else
+            fprintf(stderr, "reached bug index 535\n");
+        }
+        if ((!FIXREVERTER[535] && (normid != (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             name = (*normid != 0 ? normid : NULL);
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (name != NULL)
 	ret->name = xmlStrdup(name);
@@ -282,8 +316,23 @@ xmlNewCatalogEntry(xmlCatalogEntryType type, const xmlChar *name,
 	ret->value = xmlStrdup(value);
     else
 	ret->value = NULL;
-    if (URL == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[536]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 536\n");
+      else
+        fprintf(stderr, "reached bug index 536\n");
+    }
+    if ((!FIXREVERTER[536] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	URL = value;
+	#ifdef FRCOV
+	}
+	#endif
     if (URL != NULL)
 	ret->URL = xmlStrdup(URL);
     else
@@ -307,14 +356,44 @@ xmlFreeCatalogEntryList(xmlCatalogEntryPtr ret);
 static void
 xmlFreeCatalogEntry(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlCatalogEntryPtr ret = (xmlCatalogEntryPtr) payload;
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[537]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 537\n");
+      else
+        fprintf(stderr, "reached bug index 537\n");
+    }
+    if ((!FIXREVERTER[537] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     /*
      * Entries stored in the file hash must be deallocated
      * only by the file hash cleaner !
      */
-    if (ret->dealloc == 1)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[538]) {
+      if ((ret -> dealloc == 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 538\n");
+      else
+        fprintf(stderr, "reached bug index 538\n");
+    }
+    if ((!FIXREVERTER[538] && (ret -> dealloc == 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (xmlDebugCatalogs) {
 	if (ret->name != NULL)
@@ -367,8 +446,23 @@ xmlFreeCatalogHashEntryList(void *payload,
     xmlCatalogEntryPtr catal = (xmlCatalogEntryPtr) payload;
     xmlCatalogEntryPtr children, next;
 
-    if (catal == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[539]) {
+      if ((catal == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 539\n");
+      else
+        fprintf(stderr, "reached bug index 539\n");
+    }
+    if ((!FIXREVERTER[539] && (catal == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     children = catal->children;
     while (children != NULL) {
@@ -397,10 +491,25 @@ xmlCreateNewCatalog(xmlCatalogType type, xmlCatalogPrefer prefer) {
     xmlCatalogPtr ret;
 
     ret = (xmlCatalogPtr) xmlMalloc(sizeof(xmlCatalog));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[540]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 540\n");
+      else
+        fprintf(stderr, "reached bug index 540\n");
+    }
+    if ((!FIXREVERTER[540] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlCatalogErrMemory();
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlCatalog));
     ret->type = type;
     ret->catalNr = 0;
@@ -716,9 +825,23 @@ xmlCatalogConvertEntry(void *payload, void *data,
                        const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlCatalogEntryPtr entry = (xmlCatalogEntryPtr) payload;
     xmlCatalogPtr catal = (xmlCatalogPtr) data;
-    if ((entry == NULL) || (catal == NULL) || (catal->sgml == NULL) ||
-	(catal->xml == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[547]) {
+      if ((entry == (void *) 0 || catal == (void *) 0 || catal -> sgml == (void *) 0 || catal -> xml == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 547\n");
+      else
+        fprintf(stderr, "reached bug index 547\n");
+    }
+    if ((!FIXREVERTER[547] && (entry == (void *) 0 || catal == (void *) 0 || catal -> sgml == (void *) 0 || catal -> xml == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     switch (entry->type) {
 	case SGML_CATA_ENTITY:
 	    entry->type = XML_CATA_PUBLIC;
@@ -1020,8 +1143,23 @@ xmlCatalogNormalizePublic(const xmlChar *pubID)
     xmlChar *ret;
     xmlChar *q;
 
-    if (pubID == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[555]) {
+      if ((pubID == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 555\n");
+      else
+        fprintf(stderr, "reached bug index 555\n");
+    }
+    if ((!FIXREVERTER[555] && (pubID == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     white = 1;
     for (p = pubID;*p != 0 && ok;p++) {
@@ -3100,8 +3238,23 @@ xmlInitializeCatalog(void) {
 	xmlCatalogEntryPtr *nextent;
 
 	catalogs = (const char *) getenv("XML_CATALOG_FILES");
-	if (catalogs == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[633]) {
+	  if ((catalogs == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 633\n");
+	  else
+	    fprintf(stderr, "reached bug index 633\n");
+	}
+	if ((!FIXREVERTER[633] && (catalogs == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    catalogs = XML_XML_DEFAULT_CATALOG;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	catal = xmlCreateNewCatalog(XML_XML_CATALOG_TYPE,
 		xmlCatalogDefaultPrefer);
@@ -3577,8 +3730,23 @@ xmlCatalogAddLocal(void *catalogs, const xmlChar *URL) {
     if (!xmlCatalogInitialized)
 	xmlInitializeCatalog();
 
-    if (URL == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[638]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 638\n");
+      else
+        fprintf(stderr, "reached bug index 638\n");
+    }
+    if ((!FIXREVERTER[638] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(catalogs);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (xmlDebugCatalogs)
 	fprintf(stderr,
@@ -3586,12 +3754,42 @@ xmlCatalogAddLocal(void *catalogs, const xmlChar *URL) {
 
     add = xmlNewCatalogEntry(XML_CATA_CATALOG, NULL, URL, NULL,
 	                     xmlCatalogDefaultPrefer, NULL);
-    if (add == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[639]) {
+      if ((add == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 639\n");
+      else
+        fprintf(stderr, "reached bug index 639\n");
+    }
+    if ((!FIXREVERTER[639] && (add == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(catalogs);
+	#ifdef FRCOV
+	}
+	#endif
 
     catal = (xmlCatalogEntryPtr) catalogs;
-    if (catal == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[640]) {
+      if ((catal == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 640\n");
+      else
+        fprintf(stderr, "reached bug index 640\n");
+    }
+    if ((!FIXREVERTER[640] && (catal == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return((void *) add);
+	#ifdef FRCOV
+	}
+	#endif
 
     while (catal->next != NULL)
 	catal = catal->next;
diff --git a/chvalid.c b/chvalid.c
index fb2c715a..38ee54f3 100644
--- a/chvalid.c
+++ b/chvalid.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * chvalid.c:	this module implements the character range
  *		validation APIs
@@ -172,10 +176,40 @@ xmlCharInRange (unsigned int val, const xmlChRangeGroup *rptr) {
     const xmlChSRange *sptr;
     const xmlChLRange *lptr;
 
-    if (rptr == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1409]) {
+      if ((rptr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1409\n");
+      else
+        fprintf(stderr, "reached bug index 1409\n");
+    }
+    if ((!FIXREVERTER[1409] && (rptr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (val < 0x10000) {	/* is val in 'short' or 'long'  array? */
-	if (rptr->nbShortRange == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1410]) {
+	  if ((rptr -> nbShortRange == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1410\n");
+	  else
+	    fprintf(stderr, "reached bug index 1410\n");
+	}
+	if ((!FIXREVERTER[1410] && (rptr -> nbShortRange == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	low = 0;
 	high = rptr->nbShortRange - 1;
 	sptr = rptr->shortRange;
@@ -192,9 +226,24 @@ xmlCharInRange (unsigned int val, const xmlChRangeGroup *rptr) {
 	    }
 	}
     } else {
-	if (rptr->nbLongRange == 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1411]) {
+	  if ((rptr -> nbLongRange == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1411\n");
+	  else
+	    fprintf(stderr, "reached bug index 1411\n");
+	}
+	if ((!FIXREVERTER[1411] && (rptr -> nbLongRange == 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    return 0;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	low = 0;
 	high = rptr->nbLongRange - 1;
 	lptr = rptr->longRange;
diff --git a/dict.c b/dict.c
index 49e1c6bf..61fb4723 100644
--- a/dict.c
+++ b/dict.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * dict.c: dictionary of reusable strings, just used to avoid allocation
  *         and freeing operations.
@@ -145,7 +149,22 @@ xmlDictAddString(xmlDictPtr dict, const xmlChar *name, unsigned int namelen) {
     while (pool != NULL) {
 	if ((size_t)(pool->end - pool->free) > namelen)
 	    goto found_pool;
-	if (pool->size > size) size = pool->size;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3717]) {
+	  if ((pool -> size > size ) && !(0))
+	    fprintf(stderr, "triggered bug index 3717\n");
+	  else
+	    fprintf(stderr, "reached bug index 3717\n");
+	}
+	if ((!FIXREVERTER[3717] && (pool -> size > size ))
+	#else
+	if (0
+	#endif
+	) size = pool->size;
+	#ifdef FRCOV
+	}
+	#endif
         limit += pool->size;
 	pool = pool->next;
     }
@@ -172,8 +191,23 @@ xmlDictAddString(xmlDictPtr dict, const xmlChar *name, unsigned int namelen) {
                 return(NULL);
         }
 	pool = (xmlDictStringsPtr) xmlMalloc(sizeof(xmlDictStrings) + size);
-	if (pool == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3718]) {
+	  if ((pool == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3718\n");
+	  else
+	    fprintf(stderr, "reached bug index 3718\n");
+	}
+	if ((!FIXREVERTER[3718] && (pool == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	pool->size = size;
 	pool->nbStrings = 0;
 	pool->free = &pool->array[0];
@@ -215,7 +249,22 @@ xmlDictAddQString(xmlDictPtr dict, const xmlChar *prefix, unsigned int plen,
     while (pool != NULL) {
 	if ((size_t)(pool->end - pool->free) > namelen + plen + 1)
 	    goto found_pool;
-	if (pool->size > size) size = pool->size;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3719]) {
+	  if ((pool -> size > size ) && !(0))
+	    fprintf(stderr, "triggered bug index 3719\n");
+	  else
+	    fprintf(stderr, "reached bug index 3719\n");
+	}
+	if ((!FIXREVERTER[3719] && (pool -> size > size ))
+	#else
+	if (0
+	#endif
+	) size = pool->size;
+	#ifdef FRCOV
+	}
+	#endif
         limit += pool->size;
 	pool = pool->next;
     }
@@ -232,8 +281,23 @@ xmlDictAddQString(xmlDictPtr dict, const xmlChar *prefix, unsigned int plen,
         if (size < 4 * (namelen + plen + 1))
 	    size = 4 * (namelen + plen + 1); /* just in case ! */
 	pool = (xmlDictStringsPtr) xmlMalloc(sizeof(xmlDictStrings) + size);
-	if (pool == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3720]) {
+	  if ((pool == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3720\n");
+	  else
+	    fprintf(stderr, "reached bug index 3720\n");
+	}
+	if ((!FIXREVERTER[3720] && (pool == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	pool->size = size;
 	pool->nbStrings = 0;
 	pool->free = &pool->array[0];
@@ -267,8 +331,23 @@ xmlDictCreate(void) {
     xmlInitParser();
 
     dict = xmlMalloc(sizeof(xmlDict));
-    if (dict == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3721]) {
+      if ((dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3721\n");
+      else
+        fprintf(stderr, "reached bug index 3721\n");
+    }
+    if ((!FIXREVERTER[3721] && (dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     dict->ref_counter = 1;
     dict->limit = 0;
 
@@ -317,7 +396,22 @@ xmlDictCreateSub(xmlDictPtr sub) {
  */
 int
 xmlDictReference(xmlDictPtr dict) {
-    if (dict == NULL) return -1;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3723]) {
+      if ((dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3723\n");
+      else
+        fprintf(stderr, "reached bug index 3723\n");
+    }
+    if ((!FIXREVERTER[3723] && (dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
     xmlMutexLock(&xmlDictMutex);
     dict->ref_counter++;
     xmlMutexUnlock(&xmlDictMutex);
@@ -335,16 +429,46 @@ void
 xmlDictFree(xmlDictPtr dict) {
     xmlDictStringsPtr pool, nextp;
 
-    if (dict == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3724]) {
+      if ((dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3724\n");
+      else
+        fprintf(stderr, "reached bug index 3724\n");
+    }
+    if ((!FIXREVERTER[3724] && (dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     /* decrement the counter, it may be shared by a parser and docs */
     xmlMutexLock(&xmlDictMutex);
     dict->ref_counter--;
-    if (dict->ref_counter > 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3725]) {
+      if ((dict -> ref_counter > 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3725\n");
+      else
+        fprintf(stderr, "reached bug index 3725\n");
+    }
+    if ((!FIXREVERTER[3725] && (dict -> ref_counter > 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlMutexUnlock(&xmlDictMutex);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     xmlMutexUnlock(&xmlDictMutex);
 
@@ -378,8 +502,23 @@ int
 xmlDictOwns(xmlDictPtr dict, const xmlChar *str) {
     xmlDictStringsPtr pool;
 
-    if ((dict == NULL) || (str == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3726]) {
+      if ((dict == (void *) 0 || str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3726\n");
+      else
+        fprintf(stderr, "reached bug index 3726\n");
+    }
+    if ((!FIXREVERTER[3726] && (dict == (void *) 0 || str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     pool = dict->strings;
     while (pool != NULL) {
         if ((str >= &pool->array[0]) && (str <= pool->free))
@@ -423,8 +562,23 @@ size_t
 xmlDictSetLimit(xmlDictPtr dict, size_t limit) {
     size_t ret;
 
-    if (dict == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3728]) {
+      if ((dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3728\n");
+      else
+        fprintf(stderr, "reached bug index 3728\n");
+    }
+    if ((!FIXREVERTER[3728] && (dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     ret = dict->limit;
     dict->limit = limit;
     return(ret);
@@ -635,8 +789,23 @@ xmlDictGrow(xmlDictPtr dict, unsigned size) {
     if ((size_t) size + 0 > SIZE_MAX / sizeof(table[0]))
         return(-1);
     table = xmlMalloc(size * sizeof(table[0]));
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3730]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3730\n");
+      else
+        fprintf(stderr, "reached bug index 3730\n");
+    }
+    if ((!FIXREVERTER[3730] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     memset(table, 0, size * sizeof(table[0]));
 
     oldsize = dict->size;
@@ -845,8 +1014,23 @@ xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len) {
     const xmlDictEntry *entry;
 
     entry = xmlDictLookupInternal(dict, NULL, name, len, 1);
-    if (entry == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3732]) {
+      if ((entry == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3732\n");
+      else
+        fprintf(stderr, "reached bug index 3732\n");
+    }
+    if ((!FIXREVERTER[3732] && (entry == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     return(entry->name);
 }
 
@@ -915,8 +1099,23 @@ xmlDictQLookup(xmlDictPtr dict, const xmlChar *prefix, const xmlChar *name) {
     const xmlDictEntry *entry;
 
     entry = xmlDictLookupInternal(dict, prefix, name, -1, 1);
-    if (entry == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3734]) {
+      if ((entry == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3734\n");
+      else
+        fprintf(stderr, "reached bug index 3734\n");
+    }
+    if ((!FIXREVERTER[3734] && (entry == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     return(entry->name);
 }
 
diff --git a/encoding.c b/encoding.c
index 04c24e42..2381153e 100644
--- a/encoding.c
+++ b/encoding.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * encoding.c : implements the encoding conversion functions needed for XML
  *
@@ -107,8 +111,23 @@ asciiToUTF8(unsigned char* out, int *outlen,
     while ((in < inend) && (out - outstart + 5 < *outlen)) {
 	c= *in++;
 
-        if (out >= outend)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1412]) {
+          if ((out >= outend ) && !(0))
+            fprintf(stderr, "triggered bug index 1412\n");
+          else
+            fprintf(stderr, "reached bug index 1412\n");
+        }
+        if ((!FIXREVERTER[1412] && (out >= outend ))
+        #else
+        if (0
+        #endif
+        )
 	    break;
+	    #ifdef FRCOV
+	    }
+	    #endif
         if (c < 0x80) {
 	    *out++ = c;
 	} else {
@@ -152,9 +171,36 @@ UTF8Toascii(unsigned char* out, int *outlen,
     unsigned int c, d;
     int trailing;
 
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1413]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1413\n");
+      else
+        fprintf(stderr, "reached bug index 1413\n");
+    }
+    if ((!FIXREVERTER[1413] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ENC_ERR_INTERNAL);
-    if (in == NULL) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1414]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1414\n");
+      else
+        fprintf(stderr, "reached bug index 1414\n");
+    }
+    if ((!FIXREVERTER[1414] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
 	 * initialization nothing to do
 	 */
@@ -162,6 +208,9 @@ UTF8Toascii(unsigned char* out, int *outlen,
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend = in + (*inlen);
     outend = out + (*outlen);
     while (in < inend) {
@@ -195,8 +244,23 @@ UTF8Toascii(unsigned char* out, int *outlen,
 
 	/* assertion: c is a single UTF-4 value */
 	if (c < 0x80) {
-	    if (out >= outend)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1415]) {
+	      if ((out >= outend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1415\n");
+	      else
+	        fprintf(stderr, "reached bug index 1415\n");
+	    }
+	    if ((!FIXREVERTER[1415] && (out >= outend ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    *out++ = c;
 	} else {
 	    /* no chance for this in Ascii */
@@ -237,14 +301,43 @@ isolat1ToUTF8(unsigned char* out, int *outlen,
     const unsigned char* inend;
     const unsigned char* instop;
 
-    if ((out == NULL) || (in == NULL) || (outlen == NULL) || (inlen == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1416]) {
+      if ((out == (void *) 0 || in == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1416\n");
+      else
+        fprintf(stderr, "reached bug index 1416\n");
+    }
+    if ((!FIXREVERTER[1416] && (out == (void *) 0 || in == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(XML_ENC_ERR_INTERNAL);
+	#ifdef FRCOV
+	}
+	#endif
 
     outend = out + *outlen;
     inend = in + (*inlen);
     instop = inend;
 
-    while ((in < inend) && (out < outend - 1)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1417])
+      fprintf(stderr, "reached bug index 1417\n");
+    while ((FIXREVERTER[1417] && (in < inend )) || (!FIXREVERTER[1417] && (in < inend && out < outend - 1 ))
+    #else
+    while (in < inend 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(out < outend - 1 ))
+        fprintf(stderr, "triggered bug index 1417\n");
+      #endif
+    
 	if (*in >= 0x80) {
 	    *out++ = (((*in) >>  6) & 0x1F) | 0xC0;
             *out++ = ((*in) & 0x3F) | 0x80;
@@ -255,6 +348,9 @@ isolat1ToUTF8(unsigned char* out, int *outlen,
 	    *out++ = *in++;
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((in < inend) && (out < outend) && (*in < 0x80)) {
         *out++ = *in++;
     }
@@ -283,21 +379,66 @@ UTF8ToUTF8(unsigned char* out, int *outlen,
 {
     int len;
 
-    if ((out == NULL) || (outlen == NULL) || (inlenb == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1418]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlenb == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1418\n");
+      else
+        fprintf(stderr, "reached bug index 1418\n");
+    }
+    if ((!FIXREVERTER[1418] && (out == (void *) 0 || outlen == (void *) 0 || inlenb == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(XML_ENC_ERR_INTERNAL);
-    if (inb == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1419]) {
+      if ((inb == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1419\n");
+      else
+        fprintf(stderr, "reached bug index 1419\n");
+    }
+    if ((!FIXREVERTER[1419] && (inb == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /* inb == NULL means output is initialized. */
         *outlen = 0;
         *inlenb = 0;
         return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (*outlen > *inlenb) {
 	len = *inlenb;
     } else {
 	len = *outlen;
     }
-    if (len < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1420]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1420\n");
+      else
+        fprintf(stderr, "reached bug index 1420\n");
+    }
+    if ((!FIXREVERTER[1420] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(XML_ENC_ERR_INTERNAL);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * FIXME: Conversion functions must assure valid UTF-8, so we have
@@ -340,9 +481,36 @@ UTF8Toisolat1(unsigned char* out, int *outlen,
     unsigned int c, d;
     int trailing;
 
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1421]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1421\n");
+      else
+        fprintf(stderr, "reached bug index 1421\n");
+    }
+    if ((!FIXREVERTER[1421] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ENC_ERR_INTERNAL);
-    if (in == NULL) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1422]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1422\n");
+      else
+        fprintf(stderr, "reached bug index 1422\n");
+    }
+    if ((!FIXREVERTER[1422] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
 	 * initialization nothing to do
 	 */
@@ -350,6 +518,9 @@ UTF8Toisolat1(unsigned char* out, int *outlen,
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend = in + (*inlen);
     outend = out + (*outlen);
     while (in < inend) {
@@ -375,8 +546,23 @@ UTF8Toisolat1(unsigned char* out, int *outlen,
 	}
 
 	for ( ; trailing; trailing--) {
-	    if (in >= inend)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1423]) {
+	      if ((in >= inend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1423\n");
+	      else
+	        fprintf(stderr, "reached bug index 1423\n");
+	    }
+	    if ((!FIXREVERTER[1423] && (in >= inend ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    if (((d= *in++) & 0xC0) != 0x80) {
 		*outlen = out - outstart;
 		*inlen = processed - instart;
@@ -388,8 +574,23 @@ UTF8Toisolat1(unsigned char* out, int *outlen,
 
 	/* assertion: c is a single UTF-4 value */
 	if (c <= 0xFF) {
-	    if (out >= outend)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1424]) {
+	      if ((out >= outend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1424\n");
+	      else
+	        fprintf(stderr, "reached bug index 1424\n");
+	    }
+	    if ((!FIXREVERTER[1424] && (out >= outend ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    *out++ = c;
 	} else {
 	    /* no chance for this in IsoLat1 */
@@ -454,9 +655,24 @@ UTF16LEToUTF8(unsigned char* out, int *outlen,
 	    in++;
 	}
         if ((c & 0xFC00) == 0xD800) {    /* surrogates */
-	    if (in >= inend) {           /* handle split mutli-byte characters */
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1425]) {
+	      if ((in >= inend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1425\n");
+	      else
+	        fprintf(stderr, "reached bug index 1425\n");
+	    }
+	    if ((!FIXREVERTER[1425] && (in >= inend ))
+	    #else
+	    if (0
+	    #endif
+	    ) {           /* handle split mutli-byte characters */
 		break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (xmlLittleEndian) {
 		d = *in++;
 	    } else {
@@ -479,16 +695,46 @@ UTF16LEToUTF8(unsigned char* out, int *outlen,
         }
 
 	/* assertion: c is a single UTF-4 value */
-        if (out >= outend)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1426]) {
+          if ((out >= outend ) && !(0))
+            fprintf(stderr, "triggered bug index 1426\n");
+          else
+            fprintf(stderr, "reached bug index 1426\n");
+        }
+        if ((!FIXREVERTER[1426] && (out >= outend ))
+        #else
+        if (0
+        #endif
+        )
 	    break;
+	    #ifdef FRCOV
+	    }
+	    #endif
         if      (c <    0x80) {  *out++=  c;                bits= -6; }
         else if (c <   0x800) {  *out++= ((c >>  6) & 0x1F) | 0xC0;  bits=  0; }
         else if (c < 0x10000) {  *out++= ((c >> 12) & 0x0F) | 0xE0;  bits=  6; }
         else                  {  *out++= ((c >> 18) & 0x07) | 0xF0;  bits= 12; }
 
         for ( ; bits >= 0; bits-= 6) {
-            if (out >= outend)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1427]) {
+              if ((out >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1427\n");
+              else
+                fprintf(stderr, "reached bug index 1427\n");
+            }
+            if ((!FIXREVERTER[1427] && (out >= outend ))
+            #else
+            if (0
+            #endif
+            )
 	        break;
+	        #ifdef FRCOV
+	        }
+	        #endif
             *out++= ((c >> bits) & 0x3F) | 0x80;
         }
 	processed = (const unsigned char*) in;
@@ -527,13 +773,43 @@ UTF8ToUTF16LE(unsigned char* outb, int *outlen,
     unsigned short tmp1, tmp2;
 
     /* UTF16LE encoding has no BOM */
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1428]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1428\n");
+      else
+        fprintf(stderr, "reached bug index 1428\n");
+    }
+    if ((!FIXREVERTER[1428] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ENC_ERR_INTERNAL);
-    if (in == NULL) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1429]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1429\n");
+      else
+        fprintf(stderr, "reached bug index 1429\n");
+    }
+    if ((!FIXREVERTER[1429] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	*outlen = 0;
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend= in + *inlen;
     outend = out + (*outlen / 2);
     while (in < inend) {
@@ -567,8 +843,23 @@ UTF8ToUTF16LE(unsigned char* outb, int *outlen,
 
       /* assertion: c is a single UTF-4 value */
         if (c < 0x10000) {
-            if (out >= outend)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1430]) {
+              if ((out >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1430\n");
+              else
+                fprintf(stderr, "reached bug index 1430\n");
+            }
+            if ((!FIXREVERTER[1430] && (out >= outend ))
+            #else
+            if (0
+            #endif
+            )
 	        break;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    if (xmlLittleEndian) {
 		*out++ = c;
 	    } else {
@@ -579,8 +870,23 @@ UTF8ToUTF16LE(unsigned char* outb, int *outlen,
 	    }
         }
         else if (c < 0x110000) {
-            if (out+1 >= outend)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1431]) {
+              if ((out + 1 >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1431\n");
+              else
+                fprintf(stderr, "reached bug index 1431\n");
+            }
+            if ((!FIXREVERTER[1431] && (out + 1 >= outend ))
+            #else
+            if (0
+            #endif
+            )
 	        break;
+	        #ifdef FRCOV
+	        }
+	        #endif
             c -= 0x10000;
 	    if (xmlLittleEndian) {
 		*out++ = 0xD800 | (c >> 10);
@@ -692,9 +998,24 @@ UTF16BEToUTF8(unsigned char* out, int *outlen,
 	    c= *in++;
 	}
         if ((c & 0xFC00) == 0xD800) {    /* surrogates */
-	    if (in >= inend) {           /* handle split mutli-byte characters */
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1432]) {
+	      if ((in >= inend ) && !(0))
+	        fprintf(stderr, "triggered bug index 1432\n");
+	      else
+	        fprintf(stderr, "reached bug index 1432\n");
+	    }
+	    if ((!FIXREVERTER[1432] && (in >= inend ))
+	    #else
+	    if (0
+	    #endif
+	    ) {           /* handle split mutli-byte characters */
                 break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (xmlLittleEndian) {
 		tmp = (unsigned char *) in;
 		d = *tmp++;
@@ -717,16 +1038,46 @@ UTF16BEToUTF8(unsigned char* out, int *outlen,
         }
 
 	/* assertion: c is a single UTF-4 value */
-        if (out >= outend)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1433]) {
+          if ((out >= outend ) && !(0))
+            fprintf(stderr, "triggered bug index 1433\n");
+          else
+            fprintf(stderr, "reached bug index 1433\n");
+        }
+        if ((!FIXREVERTER[1433] && (out >= outend ))
+        #else
+        if (0
+        #endif
+        )
 	    break;
+	    #ifdef FRCOV
+	    }
+	    #endif
         if      (c <    0x80) {  *out++=  c;                bits= -6; }
         else if (c <   0x800) {  *out++= ((c >>  6) & 0x1F) | 0xC0;  bits=  0; }
         else if (c < 0x10000) {  *out++= ((c >> 12) & 0x0F) | 0xE0;  bits=  6; }
         else                  {  *out++= ((c >> 18) & 0x07) | 0xF0;  bits= 12; }
 
         for ( ; bits >= 0; bits-= 6) {
-            if (out >= outend)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1434]) {
+              if ((out >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1434\n");
+              else
+                fprintf(stderr, "reached bug index 1434\n");
+            }
+            if ((!FIXREVERTER[1434] && (out >= outend ))
+            #else
+            if (0
+            #endif
+            )
 	        break;
+	        #ifdef FRCOV
+	        }
+	        #endif
             *out++= ((c >> bits) & 0x3F) | 0x80;
         }
 	processed = (const unsigned char*) in;
@@ -765,13 +1116,43 @@ UTF8ToUTF16BE(unsigned char* outb, int *outlen,
     unsigned short tmp1, tmp2;
 
     /* UTF-16BE has no BOM */
-    if ((outb == NULL) || (outlen == NULL) || (inlen == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1435]) {
+      if ((outb == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1435\n");
+      else
+        fprintf(stderr, "reached bug index 1435\n");
+    }
+    if ((!FIXREVERTER[1435] && (outb == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ENC_ERR_INTERNAL);
-    if (in == NULL) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1436]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1436\n");
+      else
+        fprintf(stderr, "reached bug index 1436\n");
+    }
+    if ((!FIXREVERTER[1436] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	*outlen = 0;
 	*inlen = 0;
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inend= in + *inlen;
     outend = out + (*outlen / 2);
     while (in < inend) {
@@ -804,7 +1185,22 @@ UTF8ToUTF16BE(unsigned char* outb, int *outlen,
 
       /* assertion: c is a single UTF-4 value */
         if (c < 0x10000) {
-            if (out >= outend)  break;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1437]) {
+              if ((out >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1437\n");
+              else
+                fprintf(stderr, "reached bug index 1437\n");
+            }
+            if ((!FIXREVERTER[1437] && (out >= outend ))
+            #else
+            if (0
+            #endif
+            )  break;
+            #ifdef FRCOV
+            }
+            #endif
 	    if (xmlLittleEndian) {
 		tmp = (unsigned char *) out;
 		*tmp = c >> 8;
@@ -815,7 +1211,22 @@ UTF8ToUTF16BE(unsigned char* outb, int *outlen,
 	    }
         }
         else if (c < 0x110000) {
-            if (out+1 >= outend)  break;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1438]) {
+              if ((out + 1 >= outend ) && !(0))
+                fprintf(stderr, "triggered bug index 1438\n");
+              else
+                fprintf(stderr, "reached bug index 1438\n");
+            }
+            if ((!FIXREVERTER[1438] && (out + 1 >= outend ))
+            #else
+            if (0
+            #endif
+            )  break;
+            #ifdef FRCOV
+            }
+            #endif
             c -= 0x10000;
 	    if (xmlLittleEndian) {
 		tmp1 = 0xD800 | (c >> 10);
@@ -953,8 +1364,23 @@ xmlGetEncodingAlias(const char *alias) {
     int i;
     char upper[100];
 
-    if (alias == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1441]) {
+      if ((alias == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1441\n");
+      else
+        fprintf(stderr, "reached bug index 1441\n");
+    }
+    if ((!FIXREVERTER[1441] && (alias == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (xmlCharEncodingAliases == NULL)
 	return(NULL);
@@ -1100,15 +1526,45 @@ xmlParseCharEncoding(const char* name)
     char upper[500];
     int i;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1450]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1450\n");
+      else
+        fprintf(stderr, "reached bug index 1450\n");
+    }
+    if ((!FIXREVERTER[1450] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(XML_CHAR_ENCODING_NONE);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Do the alias resolution
      */
     alias = xmlGetEncodingAlias(name);
-    if (alias != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1451]) {
+      if ((alias != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1451\n");
+      else
+        fprintf(stderr, "reached bug index 1451\n");
+    }
+    if ((!FIXREVERTER[1451] && (alias != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	name = alias;
+	#ifdef FRCOV
+	}
+	#endif
 
     for (i = 0;i < 499;i++) {
         upper[i] = (char) toupper((unsigned char) name[i]);
@@ -1519,17 +1975,47 @@ xmlCreateIconvHandler(const char *name, xmlCharEncodingHandler **out) {
     }
 
     enc = xmlMalloc(sizeof(*enc));
-    if (enc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1460]) {
+      if ((enc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1460\n");
+      else
+        fprintf(stderr, "reached bug index 1460\n");
+    }
+    if ((!FIXREVERTER[1460] && (enc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         ret = XML_ERR_NO_MEMORY;
         goto error;
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(enc, 0, sizeof(*enc));
 
     enc->name = xmlMemStrdup(name);
-    if (enc->name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1461]) {
+      if ((enc -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1461\n");
+      else
+        fprintf(stderr, "reached bug index 1461\n");
+    }
+    if ((!FIXREVERTER[1461] && (enc -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         ret = XML_ERR_NO_MEMORY;
         goto error;
     }
+    #ifdef FRCOV
+    }
+    #endif
     enc->iconv_in = icv_in;
     enc->iconv_out = icv_out;
 
@@ -1700,8 +2186,23 @@ xmlFindExtraHandler(const char *name, int output,
     ret = xmlCreateIconvHandler(name, out);
     if (*out != NULL)
         return(0);
-    if (ret != XML_ERR_UNSUPPORTED_ENCODING)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1462]) {
+      if ((ret != XML_ERR_UNSUPPORTED_ENCODING ) && !(0))
+        fprintf(stderr, "triggered bug index 1462\n");
+      else
+        fprintf(stderr, "reached bug index 1462\n");
+    }
+    if ((!FIXREVERTER[1462] && (ret != XML_ERR_UNSUPPORTED_ENCODING ))
+    #else
+    if (0
+    #endif
+    )
         return(ret);
+        #ifdef FRCOV
+        }
+        #endif
 #endif /* LIBXML_ICONV_ENABLED */
 
 #ifdef LIBXML_ICU_ENABLED
@@ -1796,8 +2297,23 @@ xmlLookupCharEncodingHandler(xmlCharEncoding enc,
     int ret;
     int i;
 
-    if (out == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1463]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1463\n");
+      else
+        fprintf(stderr, "reached bug index 1463\n");
+    }
+    if ((!FIXREVERTER[1463] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ERR_ARGUMENT);
+        #ifdef FRCOV
+        }
+        #endif
     *out = NULL;
 
     switch (enc) {
@@ -1884,8 +2400,23 @@ xmlLookupCharEncodingHandler(xmlCharEncoding enc,
             ret = xmlFindExtraHandler(names[i], 0, out);
             if (*out != NULL)
                 return(0);
-            if (ret != XML_ERR_UNSUPPORTED_ENCODING)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1464]) {
+              if ((ret != XML_ERR_UNSUPPORTED_ENCODING ) && !(0))
+                fprintf(stderr, "triggered bug index 1464\n");
+              else
+                fprintf(stderr, "reached bug index 1464\n");
+            }
+            if ((!FIXREVERTER[1464] && (ret != XML_ERR_UNSUPPORTED_ENCODING ))
+            #else
+            if (0
+            #endif
+            )
                 return(ret);
+                #ifdef FRCOV
+                }
+                #endif
         }
     }
 
@@ -1934,26 +2465,86 @@ xmlOpenCharEncodingHandler(const char *name, int output,
     xmlCharEncoding enc;
     int ret;
 
-    if (out == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1465]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1465\n");
+      else
+        fprintf(stderr, "reached bug index 1465\n");
+    }
+    if ((!FIXREVERTER[1465] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ERR_ARGUMENT);
+        #ifdef FRCOV
+        }
+        #endif
     *out = NULL;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1466]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1466\n");
+      else
+        fprintf(stderr, "reached bug index 1466\n");
+    }
+    if ((!FIXREVERTER[1466] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ERR_ARGUMENT);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Do the alias resolution
      */
     norig = name;
     nalias = xmlGetEncodingAlias(name);
-    if (nalias != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1467]) {
+      if ((nalias != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1467\n");
+      else
+        fprintf(stderr, "reached bug index 1467\n");
+    }
+    if ((!FIXREVERTER[1467] && (nalias != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	name = nalias;
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = xmlFindHandler(name, output, out);
     if (*out != NULL)
         return(0);
-    if (ret != XML_ERR_UNSUPPORTED_ENCODING)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1468]) {
+      if ((ret != XML_ERR_UNSUPPORTED_ENCODING ) && !(0))
+        fprintf(stderr, "triggered bug index 1468\n");
+      else
+        fprintf(stderr, "reached bug index 1468\n");
+    }
+    if ((!FIXREVERTER[1468] && (ret != XML_ERR_UNSUPPORTED_ENCODING ))
+    #else
+    if (0
+    #endif
+    )
         return(ret);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Fallback using the canonical names
@@ -2009,10 +2600,25 @@ xmlIconvWrapper(iconv_t cd, unsigned char *out, int *outlen,
     char *icv_out = (char *) out;
     size_t ret;
 
-    if ((out == NULL) || (outlen == NULL) || (inlen == NULL) || (in == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1469]) {
+      if ((out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 || in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1469\n");
+      else
+        fprintf(stderr, "reached bug index 1469\n");
+    }
+    if ((!FIXREVERTER[1469] && (out == (void *) 0 || outlen == (void *) 0 || inlen == (void *) 0 || in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if (outlen != NULL) *outlen = 0;
         return(XML_ENC_ERR_INTERNAL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     icv_inlen = *inlen;
     icv_outlen = *outlen;
     /*
@@ -2196,8 +2802,23 @@ xmlEncInputChunk(xmlCharEncodingHandler *handler, unsigned char *out,
     }
 
     /* Ignore partial errors when reading. */
-    if (ret == XML_ENC_ERR_PARTIAL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1470]) {
+      if ((ret == XML_ENC_ERR_PARTIAL ) && !(0))
+        fprintf(stderr, "triggered bug index 1470\n");
+      else
+        fprintf(stderr, "reached bug index 1470\n");
+    }
+    if ((!FIXREVERTER[1470] && (ret == XML_ENC_ERR_PARTIAL ))
+    #else
+    if (0
+    #endif
+    )
         ret = XML_ENC_ERR_SUCCESS;
+        #ifdef FRCOV
+        }
+        #endif
 
     return(ret);
 }
@@ -2256,8 +2877,23 @@ xmlEncOutputChunk(xmlCharEncodingHandler *handler, unsigned char *out,
     }
 
     /* We shouldn't generate partial sequences when writing. */
-    if (ret == XML_ENC_ERR_PARTIAL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1471]) {
+      if ((ret == XML_ENC_ERR_PARTIAL ) && !(0))
+        fprintf(stderr, "triggered bug index 1471\n");
+      else
+        fprintf(stderr, "reached bug index 1471\n");
+    }
+    if ((!FIXREVERTER[1471] && (ret == XML_ENC_ERR_PARTIAL ))
+    #else
+    if (0
+    #endif
+    )
         ret = XML_ENC_ERR_INTERNAL;
+        #ifdef FRCOV
+        }
+        #endif
 
     return(ret);
 }
@@ -2299,15 +2935,44 @@ xmlCharEncInput(xmlParserInputBufferPtr input)
     const xmlChar *inData;
     size_t inTotal = 0;
 
-    if ((input == NULL) || (input->encoder == NULL) ||
-        (input->buffer == NULL) || (input->raw == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1472]) {
+      if ((input == (void *) 0 || input -> encoder == (void *) 0 || input -> buffer == (void *) 0 || input -> raw == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1472\n");
+      else
+        fprintf(stderr, "reached bug index 1472\n");
+    }
+    if ((!FIXREVERTER[1472] && (input == (void *) 0 || input -> encoder == (void *) 0 || input -> buffer == (void *) 0 || input -> raw == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ENC_ERR_INTERNAL);
+        #ifdef FRCOV
+        }
+        #endif
     out = input->buffer;
     in = input->raw;
 
     toconv = xmlBufUse(in);
-    if (toconv == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1473]) {
+      if ((toconv == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1473\n");
+      else
+        fprintf(stderr, "reached bug index 1473\n");
+    }
+    if ((!FIXREVERTER[1473] && (toconv == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     inData = xmlBufContent(in);
     inTotal = 0;
 
@@ -2315,8 +2980,23 @@ xmlCharEncInput(xmlParserInputBufferPtr input)
         c_in = toconv > INT_MAX / 2 ? INT_MAX / 2 : toconv;
 
         avail = xmlBufAvail(out);
-        if (avail > INT_MAX)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1474]) {
+          if ((avail > 2147483647 ) && !(0))
+            fprintf(stderr, "triggered bug index 1474\n");
+          else
+            fprintf(stderr, "reached bug index 1474\n");
+        }
+        if ((!FIXREVERTER[1474] && (avail > 2147483647 ))
+        #else
+        if (0
+        #endif
+        )
             avail = INT_MAX;
+            #ifdef FRCOV
+            }
+            #endif
         if (avail < 4096) {
             if (xmlBufGrow(out, 4096) < 0) {
                 input->error = XML_ERR_NO_MEMORY;
@@ -2344,8 +3024,23 @@ xmlCharEncInput(xmlParserInputBufferPtr input)
 
     if (((ret != 0) && (c_out == 0)) ||
         (ret == XML_ENC_ERR_MEMORY)) {
-        if (input->error == 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1475]) {
+          if ((input -> error == 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 1475\n");
+          else
+            fprintf(stderr, "reached bug index 1475\n");
+        }
+        if ((!FIXREVERTER[1475] && (input -> error == 0  ))
+        #else
+        if (0
+        #endif
+        )
             input->error = xmlEncConvertError(ret);
+            #ifdef FRCOV
+            }
+            #endif
         return(ret);
     }
 
@@ -2421,9 +3116,23 @@ xmlCharEncOutput(xmlOutputBufferPtr output, int init)
     xmlBufPtr in;
     xmlBufPtr out;
 
-    if ((output == NULL) || (output->encoder == NULL) ||
-        (output->buffer == NULL) || (output->conv == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1480]) {
+      if ((output == (void *) 0 || output -> encoder == (void *) 0 || output -> buffer == (void *) 0 || output -> conv == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1480\n");
+      else
+        fprintf(stderr, "reached bug index 1480\n");
+    }
+    if ((!FIXREVERTER[1480] && (output == (void *) 0 || output -> encoder == (void *) 0 || output -> buffer == (void *) 0 || output -> conv == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ENC_ERR_INTERNAL);
+        #ifdef FRCOV
+        }
+        #endif
     out = output->conv;
     in = output->buffer;
 
@@ -2448,8 +3157,23 @@ retry:
      * Conversion itself.
      */
     toconv = xmlBufUse(in);
-    if (toconv > 64 * 1024)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1481]) {
+      if ((toconv > 64 * 1024 ) && !(0))
+        fprintf(stderr, "triggered bug index 1481\n");
+      else
+        fprintf(stderr, "reached bug index 1481\n");
+    }
+    if ((!FIXREVERTER[1481] && (toconv > 64 * 1024 ))
+    #else
+    if (0
+    #endif
+    )
         toconv = 64 * 1024;
+        #ifdef FRCOV
+        }
+        #endif
     if (toconv * 4 >= written) {
         if (xmlBufGrow(out, toconv * 4) < 0) {
             ret = XML_ENC_ERR_MEMORY;
@@ -2457,8 +3181,23 @@ retry:
         }
         written = xmlBufAvail(out);
     }
-    if (written > 256 * 1024)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1482]) {
+      if ((written > 256 * 1024 ) && !(0))
+        fprintf(stderr, "triggered bug index 1482\n");
+      else
+        fprintf(stderr, "reached bug index 1482\n");
+    }
+    if ((!FIXREVERTER[1482] && (written > 256 * 1024 ))
+    #else
+    if (0
+    #endif
+    )
         written = 256 * 1024;
+        #ifdef FRCOV
+        }
+        #endif
 
     c_in = toconv;
     c_out = written;
@@ -2468,8 +3207,23 @@ retry:
     xmlBufAddLen(out, c_out);
     writtentot += c_out;
 
-    if (ret == XML_ENC_ERR_SPACE)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1483]) {
+      if ((ret == XML_ENC_ERR_SPACE ) && !(0))
+        fprintf(stderr, "triggered bug index 1483\n");
+      else
+        fprintf(stderr, "reached bug index 1483\n");
+    }
+    if ((!FIXREVERTER[1483] && (ret == XML_ENC_ERR_SPACE ))
+    #else
+    if (0
+    #endif
+    )
         goto retry;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Attempt to handle error cases
@@ -2496,10 +3250,25 @@ retry:
         c_in = charrefLen;
         ret = xmlEncOutputChunk(output->encoder, xmlBufEnd(out), &c_out,
                                 charref, &c_in);
-        if ((ret < 0) || (c_in != charrefLen)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1485]) {
+          if ((ret < 0 || c_in != charrefLen ) && !(0))
+            fprintf(stderr, "triggered bug index 1485\n");
+          else
+            fprintf(stderr, "reached bug index 1485\n");
+        }
+        if ((!FIXREVERTER[1485] && (ret < 0 || c_in != charrefLen ))
+        #else
+        if (0
+        #endif
+        ) {
             ret = XML_ENC_ERR_INTERNAL;
             goto error;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         xmlBufShrink(in, len);
         xmlBufAddLen(out, c_out);
@@ -2510,8 +3279,23 @@ retry:
 error:
     if (((writtentot <= 0) && (ret != 0)) ||
         (ret == XML_ENC_ERR_MEMORY)) {
-        if (output->error == 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1486]) {
+          if ((output -> error == 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 1486\n");
+          else
+            fprintf(stderr, "reached bug index 1486\n");
+        }
+        if ((!FIXREVERTER[1486] && (output -> error == 0  ))
+        #else
+        if (0
+        #endif
+        )
             output->error = xmlEncConvertError(ret);
+            #ifdef FRCOV
+            }
+            #endif
         return(ret);
     }
 
@@ -2634,7 +3418,22 @@ xmlCharEncCloseFunc(xmlCharEncodingHandler *handler) {
     int tofree = 0;
     int i = 0;
 
-    if (handler == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1492]) {
+      if ((handler == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1492\n");
+      else
+        fprintf(stderr, "reached bug index 1492\n");
+    }
+    if ((!FIXREVERTER[1492] && (handler == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     for (i = 0; i < (int) NUM_DEFAULT_HANDLERS; i++) {
         if (handler == &defaultHandlers[i])
diff --git a/entities.c b/entities.c
index f7792a81..f01d3e03 100644
--- a/entities.c
+++ b/entities.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * entities.c : implementation for the XML entities handling
  *
@@ -80,11 +84,41 @@ xmlFreeEntity(xmlEntityPtr entity)
 {
     xmlDictPtr dict = NULL;
 
-    if (entity == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2737]) {
+      if ((entity == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2737\n");
+      else
+        fprintf(stderr, "reached bug index 2737\n");
+    }
+    if ((!FIXREVERTER[2737] && (entity == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
-
-    if (entity->doc != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2738]) {
+      if ((entity -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2738\n");
+      else
+        fprintf(stderr, "reached bug index 2738\n");
+    }
+    if ((!FIXREVERTER[2738] && (entity -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = entity->doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
 
     if ((entity->children) &&
@@ -118,8 +152,23 @@ xmlCreateEntity(xmlDocPtr doc, const xmlChar *name, int type,
     xmlEntityPtr ret;
 
     ret = (xmlEntityPtr) xmlMalloc(sizeof(xmlEntity));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2739]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2739\n");
+      else
+        fprintf(stderr, "reached bug index 2739\n");
+    }
+    if ((!FIXREVERTER[2739] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(ret, 0, sizeof(xmlEntity));
     ret->doc = doc;
     ret->type = XML_ENTITY_DECL;
@@ -132,23 +181,83 @@ xmlCreateEntity(xmlDocPtr doc, const xmlChar *name, int type,
 	ret->name = xmlStrdup(name);
     else
         ret->name = xmlDictLookup(doc->dict, name, -1);
-    if (ret->name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2740]) {
+      if ((ret -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2740\n");
+      else
+        fprintf(stderr, "reached bug index 2740\n");
+    }
+    if ((!FIXREVERTER[2740] && (ret -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     if (ExternalID != NULL) {
         ret->ExternalID = xmlStrdup(ExternalID);
-        if (ret->ExternalID == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2741]) {
+          if ((ret -> ExternalID == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2741\n");
+          else
+            fprintf(stderr, "reached bug index 2741\n");
+        }
+        if ((!FIXREVERTER[2741] && (ret -> ExternalID == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (SystemID != NULL) {
         ret->SystemID = xmlStrdup(SystemID);
-        if (ret->SystemID == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2742]) {
+          if ((ret -> SystemID == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2742\n");
+          else
+            fprintf(stderr, "reached bug index 2742\n");
+        }
+        if ((!FIXREVERTER[2742] && (ret -> SystemID == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (content != NULL) {
         ret->length = xmlStrlen(content);
 	ret->content = xmlStrndup(content, ret->length);
-        if (ret->content == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2743]) {
+          if ((ret -> content == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2743\n");
+          else
+            fprintf(stderr, "reached bug index 2743\n");
+        }
+        if ((!FIXREVERTER[2743] && (ret -> content == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
      } else {
         ret->length = 0;
         ret->content = NULL;
@@ -193,16 +302,46 @@ xmlAddEntity(xmlDocPtr doc, int extSubset, const xmlChar *name, int type,
 
     if (out != NULL)
         *out = NULL;
-    if ((doc == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2744]) {
+      if ((doc == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2744\n");
+      else
+        fprintf(stderr, "reached bug index 2744\n");
+    }
+    if ((!FIXREVERTER[2744] && (doc == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(XML_ERR_ARGUMENT);
+	#ifdef FRCOV
+	}
+	#endif
     dict = doc->dict;
 
     if (extSubset)
         dtd = doc->extSubset;
     else
         dtd = doc->intSubset;
-    if (dtd == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2745]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2745\n");
+      else
+        fprintf(stderr, "reached bug index 2745\n");
+    }
+    if ((!FIXREVERTER[2745] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_DTD_NO_DTD);
+        #ifdef FRCOV
+        }
+        #endif
 
     switch (type) {
         case XML_INTERNAL_GENERAL_ENTITY:
@@ -213,8 +352,22 @@ xmlAddEntity(xmlDocPtr doc, int extSubset, const xmlChar *name, int type,
                 int valid = 0;
 
                 /* 4.6 Predefined Entities */
-                if ((type == XML_INTERNAL_GENERAL_ENTITY) &&
-                    (content != NULL)) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2746]) {
+                  fprintf(stderr, "reached bug index 2746\n");
+                }
+                if ((FIXREVERTER[2746] && (type == XML_INTERNAL_GENERAL_ENTITY )) || (!FIXREVERTER[2746] && (type == XML_INTERNAL_GENERAL_ENTITY && content != (void *) 0 ))
+                #else
+                if (type == XML_INTERNAL_GENERAL_ENTITY 
+                #endif
+                ) {
+                      
+                    #ifdef FRCOV
+                      if (!(content != (void *) 0 ))
+                        fprintf(stderr, "triggered bug index 2746\n");
+                      #endif
+                    
                     int c = predef->content[0];
 
                     if (((content[0] == c) && (content[1] == 0)) &&
@@ -239,13 +392,31 @@ xmlAddEntity(xmlDocPtr doc, int extSubset, const xmlChar *name, int type,
                         }
                     }
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 if (!valid)
                     return(XML_ERR_REDECL_PREDEF_ENTITY);
             }
 	    if (dtd->entities == NULL) {
 		dtd->entities = xmlHashCreateDict(0, dict);
-                if (dtd->entities == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2747]) {
+                  if ((dtd -> entities == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2747\n");
+                  else
+                    fprintf(stderr, "reached bug index 2747\n");
+                }
+                if ((!FIXREVERTER[2747] && (dtd -> entities == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return(XML_ERR_NO_MEMORY);
+                    #ifdef FRCOV
+                    }
+                    #endif
             }
 	    table = dtd->entities;
 	    break;
@@ -253,8 +424,23 @@ xmlAddEntity(xmlDocPtr doc, int extSubset, const xmlChar *name, int type,
         case XML_EXTERNAL_PARAMETER_ENTITY:
 	    if (dtd->pentities == NULL) {
 		dtd->pentities = xmlHashCreateDict(0, dict);
-                if (dtd->pentities == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2748]) {
+                  if ((dtd -> pentities == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2748\n");
+                  else
+                    fprintf(stderr, "reached bug index 2748\n");
+                }
+                if ((!FIXREVERTER[2748] && (dtd -> pentities == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return(XML_ERR_NO_MEMORY);
+                    #ifdef FRCOV
+                    }
+                    #endif
             }
 	    table = dtd->pentities;
 	    break;
@@ -262,8 +448,23 @@ xmlAddEntity(xmlDocPtr doc, int extSubset, const xmlChar *name, int type,
 	    return(XML_ERR_ARGUMENT);
     }
     ret = xmlCreateEntity(dtd->doc, name, type, ExternalID, SystemID, content);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2749]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2749\n");
+      else
+        fprintf(stderr, "reached bug index 2749\n");
+    }
+    if ((!FIXREVERTER[2749] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ERR_NO_MEMORY);
+        #ifdef FRCOV
+        }
+        #endif
 
     res = xmlHashAdd(table, name, ret);
     if (res < 0) {
@@ -305,7 +506,22 @@ xmlAddEntity(xmlDocPtr doc, int extSubset, const xmlChar *name, int type,
  */
 xmlEntityPtr
 xmlGetPredefinedEntity(const xmlChar *name) {
-    if (name == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2751]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2751\n");
+      else
+        fprintf(stderr, "reached bug index 2751\n");
+    }
+    if ((!FIXREVERTER[2751] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     switch (name[0]) {
         case 'l':
 	    if (xmlStrEqual(name, BAD_CAST "lt"))
@@ -437,8 +653,23 @@ xmlGetParameterEntity(xmlDocPtr doc, const xmlChar *name) {
     xmlEntitiesTablePtr table;
     xmlEntityPtr ret;
 
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2753]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2753\n");
+      else
+        fprintf(stderr, "reached bug index 2753\n");
+    }
+    if ((!FIXREVERTER[2753] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((doc->intSubset != NULL) && (doc->intSubset->pentities != NULL)) {
 	table = (xmlEntitiesTablePtr) doc->intSubset->pentities;
 	ret = xmlGetEntityFromTable(table, name);
@@ -546,7 +777,22 @@ xmlEncodeEntitiesInternal(xmlDocPtr doc, const xmlChar *input, int attr) {
     size_t buffer_size = 0;
     int html = 0;
 
-    if (input == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2755]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2755\n");
+      else
+        fprintf(stderr, "reached bug index 2755\n");
+    }
+    if ((!FIXREVERTER[2755] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (doc != NULL)
         html = (doc->type == XML_HTML_DOCUMENT_NODE);
 
@@ -555,8 +801,23 @@ xmlEncodeEntitiesInternal(xmlDocPtr doc, const xmlChar *input, int attr) {
      */
     buffer_size = 1000;
     buffer = (xmlChar *) xmlMalloc(buffer_size);
-    if (buffer == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2757]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2757\n");
+      else
+        fprintf(stderr, "reached bug index 2757\n");
+    }
+    if ((!FIXREVERTER[2757] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     out = buffer;
 
     while (*cur != '\0') {
@@ -745,15 +1006,45 @@ xmlEncodeSpecialChars(const xmlDoc *doc ATTRIBUTE_UNUSED, const xmlChar *input)
     xmlChar *buffer = NULL;
     xmlChar *out = NULL;
     size_t buffer_size = 0;
-    if (input == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2758]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2758\n");
+      else
+        fprintf(stderr, "reached bug index 2758\n");
+    }
+    if ((!FIXREVERTER[2758] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * allocate an translation buffer.
      */
     buffer_size = 1000;
     buffer = (xmlChar *) xmlMalloc(buffer_size);
-    if (buffer == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2759]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2759\n");
+      else
+        fprintf(stderr, "reached bug index 2759\n");
+    }
+    if ((!FIXREVERTER[2759] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     out = buffer;
 
     while (*cur != '\0') {
@@ -865,41 +1156,146 @@ xmlCopyEntity(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlEntityPtr cur;
 
     cur = (xmlEntityPtr) xmlMalloc(sizeof(xmlEntity));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2760]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2760\n");
+      else
+        fprintf(stderr, "reached bug index 2760\n");
+    }
+    if ((!FIXREVERTER[2760] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlEntity));
     cur->type = XML_ENTITY_DECL;
 
     cur->etype = ent->etype;
     if (ent->name != NULL) {
 	cur->name = xmlStrdup(ent->name);
-        if (cur->name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2761]) {
+          if ((cur -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2761\n");
+          else
+            fprintf(stderr, "reached bug index 2761\n");
+        }
+        if ((!FIXREVERTER[2761] && (cur -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (ent->ExternalID != NULL) {
 	cur->ExternalID = xmlStrdup(ent->ExternalID);
-        if (cur->ExternalID == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2762]) {
+          if ((cur -> ExternalID == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2762\n");
+          else
+            fprintf(stderr, "reached bug index 2762\n");
+        }
+        if ((!FIXREVERTER[2762] && (cur -> ExternalID == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (ent->SystemID != NULL) {
 	cur->SystemID = xmlStrdup(ent->SystemID);
-        if (cur->SystemID == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2763]) {
+          if ((cur -> SystemID == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2763\n");
+          else
+            fprintf(stderr, "reached bug index 2763\n");
+        }
+        if ((!FIXREVERTER[2763] && (cur -> SystemID == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (ent->content != NULL) {
 	cur->content = xmlStrdup(ent->content);
-        if (cur->content == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2764]) {
+          if ((cur -> content == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2764\n");
+          else
+            fprintf(stderr, "reached bug index 2764\n");
+        }
+        if ((!FIXREVERTER[2764] && (cur -> content == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (ent->orig != NULL) {
 	cur->orig = xmlStrdup(ent->orig);
-        if (cur->orig == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2765]) {
+          if ((cur -> orig == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2765\n");
+          else
+            fprintf(stderr, "reached bug index 2765\n");
+        }
+        if ((!FIXREVERTER[2765] && (cur -> orig == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (ent->URI != NULL) {
 	cur->URI = xmlStrdup(ent->URI);
-        if (cur->URI == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2766]) {
+          if ((cur -> URI == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2766\n");
+          else
+            fprintf(stderr, "reached bug index 2766\n");
+        }
+        if ((!FIXREVERTER[2766] && (cur -> URI == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     return(cur);
 
diff --git a/error.c b/error.c
index b678a0ee..273f5e0c 100644
--- a/error.c
+++ b/error.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * error.c: module displaying/handling XML parser errors
  *
@@ -40,10 +44,25 @@ xmlVSetError(xmlError *err,
     char *str2Copy = NULL;
     char *str3Copy = NULL;
 
-    if (code == XML_ERR_OK) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4140]) {
+      if ((code == XML_ERR_OK ) && !(0))
+        fprintf(stderr, "triggered bug index 4140\n");
+      else
+        fprintf(stderr, "reached bug index 4140\n");
+    }
+    if ((!FIXREVERTER[4140] && (code == XML_ERR_OK ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlResetError(err);
         return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Formatting the message
@@ -59,28 +78,103 @@ xmlVSetError(xmlError *err,
             goto err_memory;
         message = (char *) tmp;
     }
-    if (message == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4142]) {
+      if ((message == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4142\n");
+      else
+        fprintf(stderr, "reached bug index 4142\n");
+    }
+    if ((!FIXREVERTER[4142] && (message == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto err_memory;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (file != NULL) {
         fileCopy = (char *) xmlStrdup((const xmlChar *) file);
-        if (fileCopy == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4143]) {
+          if ((fileCopy == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4143\n");
+          else
+            fprintf(stderr, "reached bug index 4143\n");
+        }
+        if ((!FIXREVERTER[4143] && (fileCopy == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto err_memory;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (str1 != NULL) {
         str1Copy = (char *) xmlStrdup((const xmlChar *) str1);
-        if (str1Copy == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4144]) {
+          if ((str1Copy == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4144\n");
+          else
+            fprintf(stderr, "reached bug index 4144\n");
+        }
+        if ((!FIXREVERTER[4144] && (str1Copy == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto err_memory;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (str2 != NULL) {
         str2Copy = (char *) xmlStrdup((const xmlChar *) str2);
-        if (str2Copy == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4145]) {
+          if ((str2Copy == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4145\n");
+          else
+            fprintf(stderr, "reached bug index 4145\n");
+        }
+        if ((!FIXREVERTER[4145] && (str2Copy == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto err_memory;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (str3 != NULL) {
         str3Copy = (char *) xmlStrdup((const xmlChar *) str3);
-        if (str3Copy == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4146]) {
+          if ((str3Copy == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4146\n");
+          else
+            fprintf(stderr, "reached bug index 4146\n");
+        }
+        if ((!FIXREVERTER[4146] && (str3Copy == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto err_memory;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     xmlResetError(err);
@@ -329,8 +423,23 @@ xmlParserPrintFileContextInternal(xmlParserInputPtr input ,
     xmlChar  content[81]; /* space for 80 chars + line terminator */
     xmlChar *ctnt;
 
-    if ((input == NULL) || (input->cur == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4147]) {
+      if ((input == (void *) 0 || input -> cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4147\n");
+      else
+        fprintf(stderr, "reached bug index 4147\n");
+    }
+    if ((!FIXREVERTER[4147] && (input == (void *) 0 || input -> cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = input->cur;
     base = input->base;
@@ -362,8 +471,23 @@ xmlParserPrintFileContextInternal(xmlParserInputPtr input ,
         int len = input->end - cur;
         int c = xmlGetUTF8Char(cur, &len);
 
-        if ((c < 0) || (n + len > sizeof(content)-1))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4148]) {
+          if ((n + len > sizeof ( content ) - 1 ) && !(c < 0 ))
+            fprintf(stderr, "triggered bug index 4148\n");
+          else
+            fprintf(stderr, "reached bug index 4148\n");
+        }
+        if ((FIXREVERTER[4148] && (c < 0 )) || (!FIXREVERTER[4148] && (c < 0 || n + len > sizeof ( content ) - 1 ))
+        #else
+        if (c < 0 
+        #endif
+        )
             break;
+            #ifdef FRCOV
+            }
+            #endif
         cur += len;
 	n += len;
     }
@@ -427,8 +551,23 @@ xmlFormatError(const xmlError *err, xmlGenericErrorFunc channel, void *data)
     xmlParserInputPtr input = NULL;
     xmlParserInputPtr cur = NULL;
 
-    if ((err == NULL) || (channel == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4149]) {
+      if ((err == (void *) 0 || channel == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4149\n");
+      else
+        fprintf(stderr, "reached bug index 4149\n");
+    }
+    if ((!FIXREVERTER[4149] && (err == (void *) 0 || channel == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     message = err->message;
     file = err->file;
@@ -454,7 +593,22 @@ xmlFormatError(const xmlError *err, xmlGenericErrorFunc channel, void *data)
     /*
      * Maintain the compatibility with the legacy error handling
      */
-    if ((ctxt != NULL) && (ctxt->input != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4152]) {
+      fprintf(stderr, "reached bug index 4152\n");
+    }
+    if ((FIXREVERTER[4152] && (ctxt != (void *) 0 )) || (!FIXREVERTER[4152] && (ctxt != (void *) 0 && ctxt -> input != (void *) 0 ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> input != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 4152\n");
+      #endif
+    
         input = ctxt->input;
         if ((input->filename == NULL) &&
             (ctxt->inputNr > 1)) {
@@ -463,8 +617,25 @@ xmlFormatError(const xmlError *err, xmlGenericErrorFunc channel, void *data)
         }
         if (input->filename)
             channel(data, "%s:%d: ", input->filename, input->line);
-        else if ((line != 0) && (domain == XML_FROM_PARSER))
+        else 
+        #ifdef FRCOV
+        {if (FIXREVERTER[4151]) {
+          fprintf(stderr, "reached bug index 4151\n");
+        }
+        if ((FIXREVERTER[4151] && (domain == XML_FROM_PARSER )) || (!FIXREVERTER[4151] && (line != 0 && domain == XML_FROM_PARSER ))
+        #else
+        if (domain == XML_FROM_PARSER 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(line != 0 ))
+              fprintf(stderr, "triggered bug index 4151\n");
+            #endif
             channel(data, "Entity: line %d: ", input->line);
+            #ifdef FRCOV
+            }}
+            #endif
     } else {
         if (file != NULL)
             channel(data, "%s:%d: ", file, line);
@@ -474,6 +645,9 @@ xmlFormatError(const xmlError *err, xmlGenericErrorFunc channel, void *data)
 		  (domain == XML_FROM_RELAXNGP)||(domain == XML_FROM_RELAXNGV)))
             channel(data, "Entity: line %d: ", line);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (name != NULL) {
         channel(data, "element %s: ", name);
     }
@@ -585,8 +759,23 @@ xmlFormatError(const xmlError *err, xmlGenericErrorFunc channel, void *data)
 
             channel(data, "Bytes:");
             for (i = 0; i < 4; i++) {
-                if (input->cur + i >= input->end)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[4153]) {
+                  if ((input -> cur + i >= input -> end ) && !(0))
+                    fprintf(stderr, "triggered bug index 4153\n");
+                  else
+                    fprintf(stderr, "reached bug index 4153\n");
+                }
+                if ((!FIXREVERTER[4153] && (input -> cur + i >= input -> end ))
+                #else
+                if (0
+                #endif
+                )
                     break;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 channel(data, " 0x%02X", input->cur[i]);
             }
             channel(data, "\n");
@@ -597,8 +786,25 @@ xmlFormatError(const xmlError *err, xmlGenericErrorFunc channel, void *data)
         if (cur != NULL) {
             if (cur->filename)
                 channel(data, "%s:%d: \n", cur->filename, cur->line);
-            else if ((line != 0) && (domain == XML_FROM_PARSER))
+            else 
+            #ifdef FRCOV
+            {if (FIXREVERTER[4154]) {
+              fprintf(stderr, "reached bug index 4154\n");
+            }
+            if ((FIXREVERTER[4154] && (domain == XML_FROM_PARSER )) || (!FIXREVERTER[4154] && (line != 0 && domain == XML_FROM_PARSER ))
+            #else
+            if (domain == XML_FROM_PARSER 
+            #endif
+            )
+                
+                #ifdef FRCOV
+                {if (!(line != 0 ))
+                  fprintf(stderr, "triggered bug index 4154\n");
+                #endif
                 channel(data, "Entity: line %d: \n", cur->line);
+                #ifdef FRCOV
+                }}
+                #endif
             xmlParserPrintFileContextInternal(cur, channel, data);
         }
     }
@@ -697,8 +903,23 @@ xmlVRaiseError(xmlStructuredErrorFunc schannel,
     xmlErrorPtr lastError = &xmlLastError;
     xmlErrorPtr to = lastError;
 
-    if (code == XML_ERR_OK)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4155]) {
+      if ((code == XML_ERR_OK ) && !(0))
+        fprintf(stderr, "triggered bug index 4155\n");
+      else
+        fprintf(stderr, "reached bug index 4155\n");
+    }
+    if ((!FIXREVERTER[4155] && (code == XML_ERR_OK ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
     if (code == XML_ERR_INTERNAL_ERROR) {
         fprintf(stderr, "Unexpected error: %d\n", code);
@@ -713,8 +934,23 @@ xmlVRaiseError(xmlStructuredErrorFunc schannel,
 	(domain == XML_FROM_IO) || (domain == XML_FROM_VALID)) {
 	ctxt = (xmlParserCtxtPtr) ctx;
 
-        if (ctxt != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4156]) {
+          if ((ctxt != (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4156\n");
+          else
+            fprintf(stderr, "reached bug index 4156\n");
+        }
+        if ((!FIXREVERTER[4156] && (ctxt != (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             to = &ctxt->lastError;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     if (xmlVUpdateError(to, ctxt, node, domain, code, level, file, line,
@@ -935,10 +1171,40 @@ xmlGetLastError(void)
 void
 xmlResetError(xmlErrorPtr err)
 {
-    if (err == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4157]) {
+      if ((err == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4157\n");
+      else
+        fprintf(stderr, "reached bug index 4157\n");
+    }
+    if ((!FIXREVERTER[4157] && (err == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
-    if (err->code == XML_ERR_OK)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4158]) {
+      if ((err -> code == XML_ERR_OK ) && !(0))
+        fprintf(stderr, "triggered bug index 4158\n");
+      else
+        fprintf(stderr, "reached bug index 4158\n");
+    }
+    if ((!FIXREVERTER[4158] && (err -> code == XML_ERR_OK ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (err->message != NULL)
         xmlFree(err->message);
     if (err->file != NULL)
@@ -1020,11 +1286,41 @@ int
 xmlCopyError(const xmlError *from, xmlErrorPtr to) {
     const char *fmt = NULL;
 
-    if ((from == NULL) || (to == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4161]) {
+      if ((from == (void *) 0 || to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4161\n");
+      else
+        fprintf(stderr, "reached bug index 4161\n");
+    }
+    if ((!FIXREVERTER[4161] && (from == (void *) 0 || to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
-
-    if (from->message != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4162]) {
+      if ((from -> message != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4162\n");
+      else
+        fprintf(stderr, "reached bug index 4162\n");
+    }
+    if ((!FIXREVERTER[4162] && (from -> message != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         fmt = "%s";
+        #ifdef FRCOV
+        }
+        #endif
 
     return(xmlSetError(to, from->ctxt, from->node,
                        from->domain, from->code, from->level,
diff --git a/fuzz/xml.c b/fuzz/xml.c
index 31ab2102..5814355f 100644
--- a/fuzz/xml.c
+++ b/fuzz/xml.c
@@ -1,121 +1,298 @@
+#ifdef FRCOV
+#define FIXREVERTER_SIZE 4815
+short FIXREVERTER[FIXREVERTER_SIZE];
+#endif
+#include <stdio.h>
 /*
+
  * xml.c: a libFuzzer target to test several XML parser interfaces.
+
  *
+
  * See Copyright for the status of this software.
+
  */
 
+
+
 #include <libxml/catalog.h>
+
 #include <libxml/parser.h>
+
 #include <libxml/tree.h>
+
 #include <libxml/xmlerror.h>
+
 #include <libxml/xmlsave.h>
+
 #include "fuzz.h"
 
+
+
 int
+
 LLVMFuzzerInitialize(int *argc ATTRIBUTE_UNUSED,
+
                      char ***argv ATTRIBUTE_UNUSED) {
+
     xmlFuzzMemSetup();
+
     xmlInitParser();
+
 #ifdef LIBXML_CATALOG_ENABLED
+
     xmlInitializeCatalog();
+
     xmlCatalogSetDefaults(XML_CATA_ALLOW_NONE);
+
 #endif
+
     xmlSetGenericErrorFunc(NULL, xmlFuzzErrorFunc);
+
     xmlSetExternalEntityLoader(xmlFuzzEntityLoader);
 
+
+
     return 0;
+
 }
 
+
+
+
+#ifdef FRCOV
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#endif
 int
+
 LLVMFuzzerTestOneInput(const char *data, size_t size) {
+
+    
+    #ifdef FRCOV
+    char *fixReverterEnv = getenv("FIXREVERTER");
+    char *fixReverterToken = strtok(fixReverterEnv, " ");
+    if (fixReverterToken == NULL) {
+      for (int i = 0; i < FIXREVERTER_SIZE; i++)
+        FIXREVERTER[i] = 1;
+    } else if (!strcmp("on", fixReverterToken)) {
+      for (int i = 0; i < FIXREVERTER_SIZE; i++)
+        FIXREVERTER[i] = 0;
+      fixReverterToken = strtok(NULL, " ");
+      while (fixReverterToken != NULL) {
+        FIXREVERTER[atoi(fixReverterToken)] = 1;
+        fixReverterToken = strtok(NULL, " ");
+      }
+    } else if (!strcmp("off", fixReverterToken)) {
+      for (int i = 0; i < FIXREVERTER_SIZE; i++)
+        FIXREVERTER[i] = 1;
+      fixReverterToken = strtok(NULL, " ");
+      while (fixReverterToken != NULL) {
+        FIXREVERTER[atoi(fixReverterToken)] = 0;
+        fixReverterToken = strtok(NULL, " ");
+      }
+    } else {
+      fprintf(stderr, "[FIXREVERTER] - first token must be on or off\n");
+      exit(0);
+    }
+    #endif
     xmlParserCtxtPtr ctxt;
+
     xmlDocPtr doc;
+
     const char *docBuffer, *docUrl;
+
     size_t maxAlloc, docSize;
+
     int opts;
 
+
+
     xmlFuzzDataInit(data, size);
+
     opts = (int) xmlFuzzReadInt(4);
+
     /*
+
      * Disable options that are known to cause timeouts
+
      */
+
     opts &= ~XML_PARSE_XINCLUDE &
+
             ~XML_PARSE_DTDVALID &
+
             ~XML_PARSE_SAX1;
+
     maxAlloc = xmlFuzzReadInt(4) % (size + 100);
 
+
+
     xmlFuzzReadEntities();
+
     docBuffer = xmlFuzzMainEntity(&docSize);
+
     docUrl = xmlFuzzMainUrl();
+
     if (docBuffer == NULL)
+
         goto exit;
 
+
+
     /* Pull parser */
 
+
+
     xmlFuzzMemSetLimit(maxAlloc);
+
     ctxt = xmlNewParserCtxt();
+
     if (ctxt != NULL) {
+
         doc = xmlCtxtReadMemory(ctxt, docBuffer, docSize, docUrl, NULL, opts);
+
         xmlFuzzCheckMallocFailure("xmlCtxtReadMemory",
+
                                   doc == NULL &&
+
                                   ctxt->errNo == XML_ERR_NO_MEMORY);
 
+
+
         if (doc != NULL) {
+
 #ifdef LIBXML_OUTPUT_ENABLED
+
             xmlBufferPtr buffer;
+
             xmlSaveCtxtPtr save;
 
+
+
             /* Also test the serializer. */
+
             buffer = xmlBufferCreate();
+
             save = xmlSaveToBuffer(buffer, NULL, 0);
+
             if (save != NULL) {
+
                 int errNo;
 
+
+
                 xmlSaveDoc(save, doc);
+
                 errNo = xmlSaveFinish(save);
+
                 xmlFuzzCheckMallocFailure("xmlSaveDoc",
+
                                           errNo == XML_ERR_NO_MEMORY);
+
             }
+
             xmlBufferFree(buffer);
+
 #endif
+
             xmlFreeDoc(doc);
+
         }
 
+
+
         xmlFreeParserCtxt(ctxt);
+
     }
 
+
+
     /* Push parser */
 
+
+
 #ifdef LIBXML_PUSH_ENABLED
+
     {
+
         static const size_t maxChunkSize = 128;
+
         size_t consumed, chunkSize;
 
+
+
         xmlFuzzMemSetLimit(maxAlloc);
+
         ctxt = xmlCreatePushParserCtxt(NULL, NULL, NULL, 0, docUrl);
+
         if (ctxt != NULL) {
+
             xmlCtxtUseOptions(ctxt, opts);
 
+
+
             for (consumed = 0; consumed < docSize; consumed += chunkSize) {
+
                 chunkSize = docSize - consumed;
+
                 if (chunkSize > maxChunkSize)
+
                     chunkSize = maxChunkSize;
+
                 xmlParseChunk(ctxt, docBuffer + consumed, chunkSize, 0);
+
             }
 
+
+
             xmlParseChunk(ctxt, NULL, 0, 1);
+
             xmlFuzzCheckMallocFailure("xmlParseChunk",
+
                                       ctxt->errNo == XML_ERR_NO_MEMORY);
+
             xmlFreeDoc(ctxt->myDoc);
+
             xmlFreeParserCtxt(ctxt);
+
         }
+
     }
+
 #endif
 
+
+
 exit:
+
     xmlFuzzMemSetLimit(0);
+
     xmlFuzzDataCleanup();
+
     xmlResetLastError();
+
     return(0);
+
 }
 
+
+
+//$main_begin$
+int main(int argc, char **argv) {
+    LLVMFuzzerInitialize(0, 0);
+
+    FILE *fp = fopen(argv[1], "rb");
+    if (!fp) {
+        return 1;
+    }
+    fseek(fp, 0, SEEK_END);
+    size_t size = ftell(fp);
+    fseek(fp, 0, SEEK_SET);
+    unsigned char *data = (unsigned char *) malloc(size);
+    fread(data, 1, size, fp);
+    fclose(fp);
+    LLVMFuzzerTestOneInput(data, size);
+    return 0;
+}
\ No newline at end of file
diff --git a/globals.c b/globals.c
index d5ef2065..0333afb0 100644
--- a/globals.c
+++ b/globals.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * globals.c: definition and handling of the set of global variables
  *            of the library
@@ -865,8 +869,23 @@ xmlGetThreadLocalStorage(int allowFailure) {
         xmlInitGlobalState(gs);
 #elif defined(HAVE_POSIX_THREADS)
     gs = (xmlGlobalState *) pthread_getspecific(globalkey);
-    if (gs == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4137]) {
+      if ((gs == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4137\n");
+      else
+        fprintf(stderr, "reached bug index 4137\n");
+    }
+    if ((!FIXREVERTER[4137] && (gs == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         gs = xmlNewGlobalState(allowFailure);
+        #ifdef FRCOV
+        }
+        #endif
 #elif defined(HAVE_WIN32_THREADS)
     gs = (xmlGlobalState *) TlsGetValue(globalkey);
     if (gs == NULL)
diff --git a/hash.c b/hash.c
index 6af8527e..661e8b4a 100644
--- a/hash.c
+++ b/hash.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * hash.c: hash tables
  *
@@ -163,8 +167,23 @@ xmlHashCreate(int size) {
     xmlInitParser();
 
     hash = xmlMalloc(sizeof(*hash));
-    if (hash == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2123]) {
+      if ((hash == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2123\n");
+      else
+        fprintf(stderr, "reached bug index 2123\n");
+    }
+    if ((!FIXREVERTER[2123] && (hash == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     hash->dict = NULL;
     hash->size = 0;
     hash->table = NULL;
@@ -227,18 +246,65 @@ xmlHashCreateDict(int size, xmlDictPtr dict) {
  */
 void
 xmlHashFree(xmlHashTablePtr hash, xmlHashDeallocator dealloc) {
-    if (hash == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2124]) {
+      if ((hash == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2124\n");
+      else
+        fprintf(stderr, "reached bug index 2124\n");
+    }
+    if ((!FIXREVERTER[2124] && (hash == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (hash->table) {
         const xmlHashEntry *end = &hash->table[hash->size];
         const xmlHashEntry *entry;
 
         for (entry = hash->table; entry < end; entry++) {
-            if (entry->hashValue == 0)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2125]) {
+              if ((entry -> hashValue == 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2125\n");
+              else
+                fprintf(stderr, "reached bug index 2125\n");
+            }
+            if ((!FIXREVERTER[2125] && (entry -> hashValue == 0 ))
+            #else
+            if (0
+            #endif
+            )
                 continue;
-            if ((dealloc != NULL) && (entry->payload != NULL))
+                #ifdef FRCOV
+                }
+                #endif
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2126]) {
+              fprintf(stderr, "reached bug index 2126\n");
+            }
+            if ((FIXREVERTER[2126] && (dealloc != (void *) 0 )) || (!FIXREVERTER[2126] && (dealloc != (void *) 0 && entry -> payload != (void *) 0 ))
+            #else
+            if (dealloc != (void *) 0 
+            #endif
+            )
+                
+                #ifdef FRCOV
+                {if (!(entry -> payload != (void *) 0 ))
+                  fprintf(stderr, "triggered bug index 2126\n");
+                #endif
                 dealloc(entry->payload, entry->key);
+                #ifdef FRCOV
+                }}
+                #endif
             if (hash->dict == NULL) {
                 if (entry->key)
                     xmlFree(entry->key);
@@ -360,8 +426,23 @@ xmlHashGrow(xmlHashTablePtr hash, unsigned size) {
     if ((size_t) size + 0 > SIZE_MAX / sizeof(table[0]))
         return(-1);
     table = xmlMalloc(size * sizeof(table[0]));
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2127]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2127\n");
+      else
+        fprintf(stderr, "reached bug index 2127\n");
+    }
+    if ((!FIXREVERTER[2127] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     memset(table, 0, size * sizeof(table[0]));
 
     oldsize = hash->size;
@@ -905,8 +986,23 @@ xmlHashLookup3(xmlHashTablePtr hash, const xmlChar *key,
     unsigned hashValue;
     int found;
 
-    if ((hash == NULL) || (hash->size == 0) || (key == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2135]) {
+      if ((hash == (void *) 0 || hash -> size == 0 || key == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2135\n");
+      else
+        fprintf(stderr, "reached bug index 2135\n");
+    }
+    if ((!FIXREVERTER[2135] && (hash == (void *) 0 || hash -> size == 0 || key == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     hashValue = xmlHashValue(hash->randomSeed, key, key2, key3, NULL);
     entry = xmlHashFindEntry(hash, key, key2, key3, hashValue, &found);
     if (found)
@@ -1012,8 +1108,23 @@ xmlHashScanFull(xmlHashTablePtr hash, xmlHashScannerFull scan, void *data) {
     xmlHashEntry old;
     unsigned i;
 
-    if ((hash == NULL) || (hash->size == 0) || (scan == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2136]) {
+      if ((hash == (void *) 0 || hash -> size == 0 || scan == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2136\n");
+      else
+        fprintf(stderr, "reached bug index 2136\n");
+    }
+    if ((!FIXREVERTER[2136] && (hash == (void *) 0 || hash -> size == 0 || scan == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * We must handle the case that a scanned entry is removed when executing
@@ -1030,7 +1141,22 @@ xmlHashScanFull(xmlHashTablePtr hash, xmlHashScannerFull scan, void *data) {
     }
 
     for (i = 0; i < hash->size; i++) {
-        if ((entry->hashValue != 0) && (entry->payload != NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2137]) {
+          fprintf(stderr, "reached bug index 2137\n");
+        }
+        if ((FIXREVERTER[2137] && (entry -> hashValue != 0 )) || (!FIXREVERTER[2137] && (entry -> hashValue != 0 && entry -> payload != (void *) 0 ))
+        #else
+        if (entry -> hashValue != 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(entry -> payload != (void *) 0 ))
+            fprintf(stderr, "triggered bug index 2137\n");
+          #endif
+        
             /*
              * Make sure to rescan after a possible deletion.
              */
@@ -1043,6 +1169,9 @@ xmlHashScanFull(xmlHashTablePtr hash, xmlHashScannerFull scan, void *data) {
                       (entry->key2 != old.key2) ||
                       (entry->key3 != old.key3)));
         }
+        #ifdef FRCOV
+        }
+        #endif
         if (++entry >= end)
             entry = hash->table;
     }
@@ -1092,8 +1221,23 @@ xmlHashScanFull3(xmlHashTablePtr hash, const xmlChar *key,
     xmlHashEntry old;
     unsigned i;
 
-    if ((hash == NULL) || (hash->size == 0) || (scan == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2138]) {
+      if ((hash == (void *) 0 || hash -> size == 0 || scan == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2138\n");
+      else
+        fprintf(stderr, "reached bug index 2138\n");
+    }
+    if ((!FIXREVERTER[2138] && (hash == (void *) 0 || hash -> size == 0 || scan == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * We must handle the case that a scanned entry is removed when executing
@@ -1110,7 +1254,22 @@ xmlHashScanFull3(xmlHashTablePtr hash, const xmlChar *key,
     }
 
     for (i = 0; i < hash->size; i++) {
-        if ((entry->hashValue != 0) && (entry->payload != NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2139]) {
+          fprintf(stderr, "reached bug index 2139\n");
+        }
+        if ((FIXREVERTER[2139] && (entry -> hashValue != 0 )) || (!FIXREVERTER[2139] && (entry -> hashValue != 0 && entry -> payload != (void *) 0 ))
+        #else
+        if (entry -> hashValue != 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(entry -> payload != (void *) 0 ))
+            fprintf(stderr, "triggered bug index 2139\n");
+          #endif
+        
             /*
              * Make sure to rescan after a possible deletion.
              */
@@ -1128,6 +1287,9 @@ xmlHashScanFull3(xmlHashTablePtr hash, const xmlChar *key,
                       (entry->key2 != old.key2) ||
                       (entry->key3 != old.key3)));
         }
+        #ifdef FRCOV
+        }
+        #endif
         if (++entry >= end)
             entry = hash->table;
     }
@@ -1151,15 +1313,60 @@ xmlHashCopySafe(xmlHashTablePtr hash, xmlHashCopier copyFunc,
     const xmlHashEntry *entry, *end;
     xmlHashTablePtr ret;
 
-    if ((hash == NULL) || (copyFunc == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2140]) {
+      if ((hash == (void *) 0 || copyFunc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2140\n");
+      else
+        fprintf(stderr, "reached bug index 2140\n");
+    }
+    if ((!FIXREVERTER[2140] && (hash == (void *) 0 || copyFunc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = xmlHashCreate(hash->size);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2141]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2141\n");
+      else
+        fprintf(stderr, "reached bug index 2141\n");
+    }
+    if ((!FIXREVERTER[2141] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
-
-    if (hash->size == 0)
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2142]) {
+      if ((hash -> size == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2142\n");
+      else
+        fprintf(stderr, "reached bug index 2142\n");
+    }
+    if ((!FIXREVERTER[2142] && (hash -> size == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(ret);
+        #ifdef FRCOV
+        }
+        #endif
 
     end = &hash->table[hash->size];
 
@@ -1168,8 +1375,23 @@ xmlHashCopySafe(xmlHashTablePtr hash, xmlHashCopier copyFunc,
             void *copy;
 
             copy = copyFunc(entry->payload, entry->key);
-            if (copy == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2143]) {
+              if ((copy == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2143\n");
+              else
+                fprintf(stderr, "reached bug index 2143\n");
+            }
+            if ((!FIXREVERTER[2143] && (copy == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto error;
+                #ifdef FRCOV
+                }
+                #endif
             if (xmlHashAdd3(ret, entry->key, entry->key2, entry->key3,
                             copy) <= 0) {
                 if (deallocFunc != NULL)
@@ -1213,8 +1435,23 @@ xmlHashCopy(xmlHashTablePtr hash, xmlHashCopier copy) {
  */
 int
 xmlHashSize(xmlHashTablePtr hash) {
-    if (hash == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2144]) {
+      if ((hash == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2144\n");
+      else
+        fprintf(stderr, "reached bug index 2144\n");
+    }
+    if ((!FIXREVERTER[2144] && (hash == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     return(hash->nbElems);
 }
 
diff --git a/list.c b/list.c
index 20df26c8..3e62f11c 100644
--- a/list.c
+++ b/list.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * list.c: lists handling implementation
  *
@@ -99,8 +103,23 @@ xmlListLowerSearch(xmlListPtr l, void *data)
 {
     xmlLinkPtr lk;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[861]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 861\n");
+      else
+        fprintf(stderr, "reached bug index 861\n");
+    }
+    if ((!FIXREVERTER[861] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     for(lk = l->sentinel->next;lk != l->sentinel && l->linkCompare(lk->data, data) <0 ;lk = lk->next);
     return lk;
 }
@@ -119,8 +138,23 @@ xmlListHigherSearch(xmlListPtr l, void *data)
 {
     xmlLinkPtr lk;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[862]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 862\n");
+      else
+        fprintf(stderr, "reached bug index 862\n");
+    }
+    if ((!FIXREVERTER[862] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     for(lk = l->sentinel->prev;lk != l->sentinel && l->linkCompare(lk->data, data) >0 ;lk = lk->prev);
     return lk;
 }
@@ -138,8 +172,23 @@ static xmlLinkPtr
 xmlListLinkSearch(xmlListPtr l, void *data)
 {
     xmlLinkPtr lk;
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[863]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 863\n");
+      else
+        fprintf(stderr, "reached bug index 863\n");
+    }
+    if ((!FIXREVERTER[863] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     lk = xmlListLowerSearch(l, data);
     if (lk == l->sentinel)
         return NULL;
@@ -203,8 +252,23 @@ xmlListCreate(xmlListDeallocator deallocator, xmlListDataCompare compare)
     l->sentinel->data = NULL;
 
     /* If there is a link deallocator, use it */
-    if (deallocator != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[865]) {
+      if ((deallocator != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 865\n");
+      else
+        fprintf(stderr, "reached bug index 865\n");
+    }
+    if ((!FIXREVERTER[865] && (deallocator != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         l->linkDeallocator = deallocator;
+        #ifdef FRCOV
+        }
+        #endif
     /* If there is a link comparator, use it */
     if (compare != NULL)
         l->linkCompare = compare;
@@ -298,13 +362,43 @@ int xmlListAppend(xmlListPtr l, void *data)
 {
     xmlLinkPtr lkPlace, lkNew;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[870]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 870\n");
+      else
+        fprintf(stderr, "reached bug index 870\n");
+    }
+    if ((!FIXREVERTER[870] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(1);
+        #ifdef FRCOV
+        }
+        #endif
     lkPlace = xmlListHigherSearch(l, data);
     /* Add the new link */
     lkNew = (xmlLinkPtr) xmlMalloc(sizeof(xmlLink));
-    if (lkNew == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[871]) {
+      if ((lkNew == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 871\n");
+      else
+        fprintf(stderr, "reached bug index 871\n");
+    }
+    if ((!FIXREVERTER[871] && (lkNew == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
     lkNew->data = data;
     lkNew->next = lkPlace->next;
     (lkPlace->next)->prev = lkNew;
@@ -321,8 +415,23 @@ int xmlListAppend(xmlListPtr l, void *data)
  */
 void xmlListDelete(xmlListPtr l)
 {
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[872]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 872\n");
+      else
+        fprintf(stderr, "reached bug index 872\n");
+    }
+    if ((!FIXREVERTER[872] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlListClear(l);
     xmlFree(l->sentinel);
@@ -343,8 +452,23 @@ xmlListRemoveFirst(xmlListPtr l, void *data)
 {
     xmlLinkPtr lk;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[873]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 873\n");
+      else
+        fprintf(stderr, "reached bug index 873\n");
+    }
+    if ((!FIXREVERTER[873] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     /*Find the first instance of this data */
     lk = xmlListLinkSearch(l, data);
     if (lk != NULL) {
@@ -412,8 +536,23 @@ xmlListClear(xmlListPtr l)
 {
     xmlLinkPtr  lk;
 
-    if (l == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[876]) {
+      if ((l == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 876\n");
+      else
+        fprintf(stderr, "reached bug index 876\n");
+    }
+    if ((!FIXREVERTER[876] && (l == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     lk = l->sentinel->next;
     while(lk != l->sentinel) {
         xmlLinkPtr next = lk->next;
@@ -586,8 +725,23 @@ xmlListPushBack(xmlListPtr l, void *data)
 void *
 xmlLinkGetData(xmlLinkPtr lk)
 {
-    if (lk == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[884]) {
+      if ((lk == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 884\n");
+      else
+        fprintf(stderr, "reached bug index 884\n");
+    }
+    if ((!FIXREVERTER[884] && (lk == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     return lk->data;
 }
 
@@ -659,8 +813,23 @@ void
 xmlListWalk(xmlListPtr l, xmlListWalker walker, void *user) {
     xmlLinkPtr lk;
 
-    if ((l == NULL) || (walker == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[887]) {
+      if ((l == (void *) 0 || walker == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 887\n");
+      else
+        fprintf(stderr, "reached bug index 887\n");
+    }
+    if ((!FIXREVERTER[887] && (l == (void *) 0 || walker == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     for(lk = l->sentinel->next; lk != l->sentinel; lk = lk->next) {
         if((walker(lk->data, user)) == 0)
                 break;
diff --git a/parser.c b/parser.c
index 5f1fdcfa..ee4d240d 100644
--- a/parser.c
+++ b/parser.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * parser.c : an XML 1.0 parser, namespaces and validity support are mostly
  *            implemented on top of the SAX interfaces
@@ -745,14 +749,44 @@ xmlSBufGrow(xmlSBuf *buf, unsigned len) {
     }
 
     cap = (buf->size + len) * 2;
-    if (cap < 240)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2769]) {
+      if ((cap < 240 ) && !(0))
+        fprintf(stderr, "triggered bug index 2769\n");
+      else
+        fprintf(stderr, "reached bug index 2769\n");
+    }
+    if ((!FIXREVERTER[2769] && (cap < 240 ))
+    #else
+    if (0
+    #endif
+    )
         cap = 240;
+        #ifdef FRCOV
+        }
+        #endif
 
     mem = xmlRealloc(buf->mem, cap);
-    if (mem == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2770]) {
+      if ((mem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2770\n");
+      else
+        fprintf(stderr, "reached bug index 2770\n");
+    }
+    if ((!FIXREVERTER[2770] && (mem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         buf->code = XML_ERR_NO_MEMORY;
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     buf->mem = mem;
     buf->cap = cap;
@@ -762,11 +796,26 @@ xmlSBufGrow(xmlSBuf *buf, unsigned len) {
 
 static void
 xmlSBufAddString(xmlSBuf *buf, const xmlChar *str, unsigned len) {
-    if (buf->max - buf->size < len) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2771]) {
+      if ((buf -> max - buf -> size < len ) && !(0))
+        fprintf(stderr, "triggered bug index 2771\n");
+      else
+        fprintf(stderr, "reached bug index 2771\n");
+    }
+    if ((!FIXREVERTER[2771] && (buf -> max - buf -> size < len ))
+    #else
+    if (0
+    #endif
+    ) {
         if (buf->code == XML_ERR_OK)
             buf->code = XML_ERR_RESOURCE_LIMIT;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (buf->cap - buf->size <= len) {
         if (xmlSBufGrow(buf, len) < 0)
@@ -787,11 +836,26 @@ static void
 xmlSBufAddChar(xmlSBuf *buf, int c) {
     xmlChar *end;
 
-    if (buf->max - buf->size < 4) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2772]) {
+      if ((buf -> max - buf -> size < 4 ) && !(0))
+        fprintf(stderr, "triggered bug index 2772\n");
+      else
+        fprintf(stderr, "reached bug index 2772\n");
+    }
+    if ((!FIXREVERTER[2772] && (buf -> max - buf -> size < 4 ))
+    #else
+    if (0
+    #endif
+    ) {
         if (buf->code == XML_ERR_OK)
             buf->code = XML_ERR_RESOURCE_LIMIT;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (buf->cap - buf->size <= 4) {
         if (xmlSBufGrow(buf, 4) < 0)
@@ -950,7 +1014,22 @@ xmlCtxtInitializeLate(xmlParserCtxtPtr ctxt) {
      * Changing the SAX struct directly is still widespread practice
      * in internal and external code.
      */
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2779]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2779\n");
+      else
+        fprintf(stderr, "reached bug index 2779\n");
+    }
+    if ((!FIXREVERTER[2779] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     sax = ctxt->sax;
 #ifdef LIBXML_SAX1_ENABLED
     /*
@@ -1023,8 +1102,23 @@ struct _xmlDefAttrs {
 static xmlChar *
 xmlAttrNormalizeSpace(const xmlChar *src, xmlChar *dst)
 {
-    if ((src == NULL) || (dst == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2780]) {
+      if ((src == (void *) 0 || dst == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2780\n");
+      else
+        fprintf(stderr, "reached bug index 2780\n");
+    }
+    if ((!FIXREVERTER[2780] && (src == (void *) 0 || dst == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (*src == 0x20) src++;
     while (*src != 0) {
@@ -1074,8 +1168,23 @@ xmlAddDefAttrs(xmlParserCtxtPtr ctxt,
 
     if (ctxt->attsDefault == NULL) {
         ctxt->attsDefault = xmlHashCreateDict(10, ctxt->dict);
-	if (ctxt->attsDefault == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2781]) {
+	  if ((ctxt -> attsDefault == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2781\n");
+	  else
+	    fprintf(stderr, "reached bug index 2781\n");
+	}
+	if ((!FIXREVERTER[2781] && (ctxt -> attsDefault == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto mem_error;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 
     /*
@@ -1089,11 +1198,41 @@ xmlAddDefAttrs(xmlParserCtxtPtr ctxt,
     } else {
         name = xmlDictLookupHashed(ctxt->dict, localname, -1);
 	prefix = xmlDictLookupHashed(ctxt->dict, fullname, len);
-        if (prefix.name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2782]) {
+          if ((prefix . name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2782\n");
+          else
+            fprintf(stderr, "reached bug index 2782\n");
+        }
+        if ((!FIXREVERTER[2782] && (prefix . name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto mem_error;
-    }
-    if (name.name == NULL)
+            #ifdef FRCOV
+            }
+            #endif
+    }
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2783]) {
+      if ((name . name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2783\n");
+      else
+        fprintf(stderr, "reached bug index 2783\n");
+    }
+    if ((!FIXREVERTER[2783] && (name . name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * make sure there is some storage
@@ -1107,10 +1246,40 @@ xmlAddDefAttrs(xmlParserCtxtPtr ctxt,
         newSize = (defaults != NULL) ? 2 * defaults->maxAttrs : 4;
         temp = xmlRealloc(defaults,
                           sizeof(*defaults) + newSize * sizeof(xmlDefAttr));
-	if (temp == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2784]) {
+	  if ((temp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2784\n");
+	  else
+	    fprintf(stderr, "reached bug index 2784\n");
+	}
+	if ((!FIXREVERTER[2784] && (temp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto mem_error;
-        if (defaults == NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2785]) {
+          if ((defaults == (void *) 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 2785\n");
+          else
+            fprintf(stderr, "reached bug index 2785\n");
+        }
+        if ((!FIXREVERTER[2785] && (defaults == (void *) 0  ))
+        #else
+        if (0
+        #endif
+        )
             temp->nbAttrs = 0;
+            #ifdef FRCOV
+            }
+            #endif
 	temp->maxAttrs = newSize;
         defaults = temp;
 	if (xmlHashUpdateEntry2(ctxt->attsDefault, name.name, prefix.name,
@@ -1131,17 +1300,62 @@ xmlAddDefAttrs(xmlParserCtxtPtr ctxt,
     } else {
         name = xmlDictLookupHashed(ctxt->dict, localname, -1);
 	prefix = xmlDictLookupHashed(ctxt->dict, fullattr, len);
-        if (prefix.name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2786]) {
+          if ((prefix . name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2786\n");
+          else
+            fprintf(stderr, "reached bug index 2786\n");
+        }
+        if ((!FIXREVERTER[2786] && (prefix . name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto mem_error;
-    }
-    if (name.name == NULL)
+            #ifdef FRCOV
+            }
+            #endif
+    }
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2787]) {
+      if ((name . name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2787\n");
+      else
+        fprintf(stderr, "reached bug index 2787\n");
+    }
+    if ((!FIXREVERTER[2787] && (name . name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* intern the string and precompute the end */
     len = strlen((const char *) value);
     hvalue = xmlDictLookupHashed(ctxt->dict, value, len);
-    if (hvalue.name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2788]) {
+      if ((hvalue . name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2788\n");
+      else
+        fprintf(stderr, "reached bug index 2788\n");
+    }
+    if ((!FIXREVERTER[2788] && (hvalue . name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
 
     expandedSize = strlen((const char *) name.name);
     if (prefix.name != NULL)
@@ -1180,8 +1394,23 @@ xmlAddSpecialAttr(xmlParserCtxtPtr ctxt,
 {
     if (ctxt->attsSpecial == NULL) {
         ctxt->attsSpecial = xmlHashCreateDict(10, ctxt->dict);
-	if (ctxt->attsSpecial == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2789]) {
+	  if ((ctxt -> attsSpecial == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2789\n");
+	  else
+	    fprintf(stderr, "reached bug index 2789\n");
+	}
+	if ((!FIXREVERTER[2789] && (ctxt -> attsSpecial == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto mem_error;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 
     if (xmlHashAdd2(ctxt->attsSpecial, fullname, fullattr,
@@ -1221,8 +1450,23 @@ xmlCleanSpecialAttrCallback(void *payload, void *data,
 static void
 xmlCleanSpecialAttr(xmlParserCtxtPtr ctxt)
 {
-    if (ctxt->attsSpecial == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2790]) {
+      if ((ctxt -> attsSpecial == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2790\n");
+      else
+        fprintf(stderr, "reached bug index 2790\n");
+    }
+    if ((!FIXREVERTER[2790] && (ctxt -> attsSpecial == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlHashScanFull(ctxt->attsSpecial, xmlCleanSpecialAttrCallback, ctxt);
 
@@ -1298,8 +1542,23 @@ xmlCheckLanguageID(const xmlChar * lang)
 {
     const xmlChar *cur = lang, *nxt;
 
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2791]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2791\n");
+      else
+        fprintf(stderr, "reached bug index 2791\n");
+    }
+    if ((!FIXREVERTER[2791] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     if (((cur[0] == 'i') && (cur[1] == '-')) ||
         ((cur[0] == 'I') && (cur[1] == '-')) ||
         ((cur[0] == 'x') && (cur[1] == '-')) ||
@@ -1449,8 +1708,23 @@ xmlParserNsData *
 xmlParserNsCreate(void) {
     xmlParserNsData *nsdb = xmlMalloc(sizeof(*nsdb));
 
-    if (nsdb == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2792]) {
+      if ((nsdb == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2792\n");
+      else
+        fprintf(stderr, "reached bug index 2792\n");
+    }
+    if ((!FIXREVERTER[2792] && (nsdb == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     memset(nsdb, 0, sizeof(*nsdb));
     nsdb->defaultNsIndex = INT_MAX;
 
@@ -1465,8 +1739,23 @@ xmlParserNsCreate(void) {
  */
 void
 xmlParserNsFree(xmlParserNsData *nsdb) {
-    if (nsdb == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2793]) {
+      if ((nsdb == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2793\n");
+      else
+        fprintf(stderr, "reached bug index 2793\n");
+    }
+    if ((!FIXREVERTER[2793] && (nsdb == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlFree(nsdb->extra);
     xmlFree(nsdb->hash);
@@ -1481,8 +1770,23 @@ xmlParserNsFree(xmlParserNsData *nsdb) {
  */
 static void
 xmlParserNsReset(xmlParserNsData *nsdb) {
-    if (nsdb == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2794]) {
+      if ((nsdb == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2794\n");
+      else
+        fprintf(stderr, "reached bug index 2794\n");
+    }
+    if ((!FIXREVERTER[2794] && (nsdb == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     nsdb->hashElems = 0;
     nsdb->elementId = 0;
@@ -1528,8 +1832,23 @@ xmlParserNsLookup(xmlParserCtxtPtr ctxt, const xmlHashedString *prefix,
     xmlParserNsBucket *bucket, *tombstone;
     unsigned index, hashValue;
 
-    if (prefix->name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2795]) {
+      if ((prefix -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2795\n");
+      else
+        fprintf(stderr, "reached bug index 2795\n");
+    }
+    if ((!FIXREVERTER[2795] && (prefix -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(ctxt->nsdb->defaultNsIndex);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (ctxt->nsdb->hashSize == 0)
         return(INT_MAX);
@@ -1541,8 +1860,23 @@ xmlParserNsLookup(xmlParserCtxtPtr ctxt, const xmlHashedString *prefix,
 
     while (bucket->hashValue) {
         if (bucket->index == INT_MAX) {
-            if (tombstone == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2796]) {
+              if ((tombstone == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2796\n");
+              else
+                fprintf(stderr, "reached bug index 2796\n");
+            }
+            if ((!FIXREVERTER[2796] && (tombstone == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 tombstone = bucket;
+                #ifdef FRCOV
+                }
+                #endif
         } else if (bucket->hashValue == hashValue) {
             if (ctxt->nsTab[bucket->index * 2] == prefix->name) {
                 if (bucketPtr != NULL)
@@ -1673,18 +2007,63 @@ xmlParserNsGrow(xmlParserCtxtPtr ctxt) {
     xmlParserNsExtra *extra;
     int newSize;
 
-    if (ctxt->nsMax > INT_MAX / 2)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2797]) {
+      if ((ctxt -> nsMax > 2147483647 / 2 ) && !(0))
+        fprintf(stderr, "triggered bug index 2797\n");
+      else
+        fprintf(stderr, "reached bug index 2797\n");
+    }
+    if ((!FIXREVERTER[2797] && (ctxt -> nsMax > 2147483647 / 2 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     newSize = ctxt->nsMax ? ctxt->nsMax * 2 : 16;
 
     table = xmlRealloc(ctxt->nsTab, 2 * newSize * sizeof(table[0]));
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2798]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2798\n");
+      else
+        fprintf(stderr, "reached bug index 2798\n");
+    }
+    if ((!FIXREVERTER[2798] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nsTab = table;
 
     extra = xmlRealloc(ctxt->nsdb->extra, newSize * sizeof(extra[0]));
-    if (extra == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2799]) {
+      if ((extra == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2799\n");
+      else
+        fprintf(stderr, "reached bug index 2799\n");
+    }
+    if ((!FIXREVERTER[2799] && (extra == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nsdb->extra = extra;
 
     ctxt->nsMax = newSize;
@@ -1791,10 +2170,25 @@ xmlParserNsPush(xmlParserCtxtPtr ctxt, const xmlHashedString *prefix,
         }
         newSize = ctxt->nsdb->hashSize ? ctxt->nsdb->hashSize * 2 : 16;
         newHash = xmlMalloc(newSize * sizeof(newHash[0]));
-        if (newHash == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2800]) {
+          if ((newHash == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2800\n");
+          else
+            fprintf(stderr, "reached bug index 2800\n");
+        }
+        if ((!FIXREVERTER[2800] && (newHash == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlErrMemory(ctxt);
             return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         memset(newHash, 0, newSize * sizeof(newHash[0]));
 
         for (i = 0; i < ctxt->nsdb->hashSize; i++) {
@@ -1807,8 +2201,23 @@ xmlParserNsPush(xmlParserCtxtPtr ctxt, const xmlHashedString *prefix,
 
             while (newHash[newIndex].hashValue != 0) {
                 newIndex++;
-                if (newIndex == newSize)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2801]) {
+                  if ((newIndex == newSize ) && !(0))
+                    fprintf(stderr, "triggered bug index 2801\n");
+                  else
+                    fprintf(stderr, "reached bug index 2801\n");
+                }
+                if ((!FIXREVERTER[2801] && (newIndex == newSize ))
+                #else
+                if (0
+                #endif
+                )
                     newIndex = 0;
+                    #ifdef FRCOV
+                    }
+                    #endif
             }
 
             newHash[newIndex] = ctxt->nsdb->hash[i];
@@ -1825,8 +2234,23 @@ xmlParserNsPush(xmlParserCtxtPtr ctxt, const xmlHashedString *prefix,
 
         while (newHash[index].hashValue != 0) {
             index++;
-            if (index == newSize)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2802]) {
+              if ((index == newSize ) && !(0))
+                fprintf(stderr, "triggered bug index 2802\n");
+              else
+                fprintf(stderr, "reached bug index 2802\n");
+            }
+            if ((!FIXREVERTER[2802] && (index == newSize ))
+            #else
+            if (0
+            #endif
+            )
                 index = 0;
+                #ifdef FRCOV
+                }
+                #endif
         }
 
         bucket = &newHash[index];
@@ -1904,13 +2328,43 @@ xmlCtxtGrowAttrs(xmlParserCtxtPtr ctxt, int nr) {
 	maxatts = ctxt->maxatts == 0 ? 55 : (nr + 5) * 2;
 	atts = (const xmlChar **) xmlMalloc(
 				     maxatts * sizeof(const xmlChar *));
-	if (atts == NULL) goto mem_error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2803]) {
+	  if ((atts == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2803\n");
+	  else
+	    fprintf(stderr, "reached bug index 2803\n");
+	}
+	if ((!FIXREVERTER[2803] && (atts == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto mem_error;
+	#ifdef FRCOV
+	}
+	#endif
 	attallocs = xmlRealloc(ctxt->attallocs,
                                (maxatts / 5) * sizeof(attallocs[0]));
-	if (attallocs == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2804]) {
+	  if ((attallocs == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2804\n");
+	  else
+	    fprintf(stderr, "reached bug index 2804\n");
+	}
+	if ((!FIXREVERTER[2804] && (attallocs == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             xmlFree(atts);
             goto mem_error;
         }
+        #ifdef FRCOV
+        }
+        #endif
         if (ctxt->maxatts > 0)
             memcpy(atts, ctxt->atts, ctxt->maxatts * sizeof(const xmlChar *));
         xmlFree(ctxt->atts);
@@ -1936,18 +2390,48 @@ mem_error:
 int
 inputPush(xmlParserCtxtPtr ctxt, xmlParserInputPtr value)
 {
-    if ((ctxt == NULL) || (value == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2805]) {
+      if ((ctxt == (void *) 0 || value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2805\n");
+      else
+        fprintf(stderr, "reached bug index 2805\n");
+    }
+    if ((!FIXREVERTER[2805] && (ctxt == (void *) 0 || value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->inputNr >= ctxt->inputMax) {
         size_t newSize = ctxt->inputMax * 2;
         xmlParserInputPtr *tmp;
 
         tmp = (xmlParserInputPtr *) xmlRealloc(ctxt->inputTab,
                                                newSize * sizeof(*tmp));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2806]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2806\n");
+          else
+            fprintf(stderr, "reached bug index 2806\n");
+        }
+        if ((!FIXREVERTER[2806] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlErrMemory(ctxt);
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->inputTab = tmp;
         ctxt->inputMax = newSize;
     }
@@ -1968,10 +2452,40 @@ inputPop(xmlParserCtxtPtr ctxt)
 {
     xmlParserInputPtr ret;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2807]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2807\n");
+      else
+        fprintf(stderr, "reached bug index 2807\n");
+    }
+    if ((!FIXREVERTER[2807] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
-    if (ctxt->inputNr <= 0)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2808]) {
+      if ((ctxt -> inputNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2808\n");
+      else
+        fprintf(stderr, "reached bug index 2808\n");
+    }
+    if ((!FIXREVERTER[2808] && (ctxt -> inputNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->inputNr--;
     if (ctxt->inputNr > 0)
         ctxt->input = ctxt->inputTab[ctxt->inputNr - 1];
@@ -1997,27 +2511,72 @@ nodePush(xmlParserCtxtPtr ctxt, xmlNodePtr value)
 {
     int maxDepth;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2809]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2809\n");
+      else
+        fprintf(stderr, "reached bug index 2809\n");
+    }
+    if ((!FIXREVERTER[2809] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     maxDepth = (ctxt->options & XML_PARSE_HUGE) ? 2048 : 256;
-    if (ctxt->nodeNr > maxDepth) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2810]) {
+      if ((ctxt -> nodeNr > maxDepth ) && !(0))
+        fprintf(stderr, "triggered bug index 2810\n");
+      else
+        fprintf(stderr, "reached bug index 2810\n");
+    }
+    if ((!FIXREVERTER[2810] && (ctxt -> nodeNr > maxDepth ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErrMsgInt(ctxt, XML_ERR_RESOURCE_LIMIT,
                 "Excessive depth in document: %d use XML_PARSE_HUGE option\n",
                 ctxt->nodeNr);
         xmlHaltParser(ctxt);
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->nodeNr >= ctxt->nodeMax) {
         xmlNodePtr *tmp;
 
 	tmp = (xmlNodePtr *) xmlRealloc(ctxt->nodeTab,
                                       ctxt->nodeMax * 2 *
                                       sizeof(ctxt->nodeTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2811]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2811\n");
+          else
+            fprintf(stderr, "reached bug index 2811\n");
+        }
+        if ((!FIXREVERTER[2811] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlErrMemory(ctxt);
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->nodeTab = tmp;
 	ctxt->nodeMax *= 2;
     }
@@ -2041,9 +2600,39 @@ nodePop(xmlParserCtxtPtr ctxt)
 {
     xmlNodePtr ret;
 
-    if (ctxt == NULL) return(NULL);
-    if (ctxt->nodeNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2812]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2812\n");
+      else
+        fprintf(stderr, "reached bug index 2812\n");
+    }
+    if ((!FIXREVERTER[2812] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2813]) {
+      if ((ctxt -> nodeNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2813\n");
+      else
+        fprintf(stderr, "reached bug index 2813\n");
+    }
+    if ((!FIXREVERTER[2813] && (ctxt -> nodeNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nodeNr--;
     if (ctxt->nodeNr > 0)
         ctxt->node = ctxt->nodeTab[ctxt->nodeNr - 1];
@@ -2080,24 +2669,69 @@ nameNsPush(xmlParserCtxtPtr ctxt, const xmlChar * value,
         tmp = (const xmlChar * *) xmlRealloc((xmlChar * *)ctxt->nameTab,
                                     ctxt->nameMax *
                                     sizeof(ctxt->nameTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2814]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2814\n");
+          else
+            fprintf(stderr, "reached bug index 2814\n");
+        }
+        if ((!FIXREVERTER[2814] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    ctxt->nameMax /= 2;
 	    goto mem_error;
         }
+        #ifdef FRCOV
+        }
+        #endif
 	ctxt->nameTab = tmp;
         tmp2 = (xmlStartTag *) xmlRealloc((void * *)ctxt->pushTab,
                                     ctxt->nameMax *
                                     sizeof(ctxt->pushTab[0]));
-        if (tmp2 == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2815]) {
+          if ((tmp2 == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2815\n");
+          else
+            fprintf(stderr, "reached bug index 2815\n");
+        }
+        if ((!FIXREVERTER[2815] && (tmp2 == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    ctxt->nameMax /= 2;
 	    goto mem_error;
         }
+        #ifdef FRCOV
+        }
+        #endif
 	ctxt->pushTab = tmp2;
     } else if (ctxt->pushTab == NULL) {
         ctxt->pushTab = (xmlStartTag *) xmlMalloc(ctxt->nameMax *
                                             sizeof(ctxt->pushTab[0]));
-        if (ctxt->pushTab == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2816]) {
+          if ((ctxt -> pushTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2816\n");
+          else
+            fprintf(stderr, "reached bug index 2816\n");
+        }
+        if ((!FIXREVERTER[2816] && (ctxt -> pushTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     ctxt->nameTab[ctxt->nameNr] = value;
     ctxt->name = value;
@@ -2125,8 +2759,23 @@ nameNsPop(xmlParserCtxtPtr ctxt)
 {
     const xmlChar *ret;
 
-    if (ctxt->nameNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2817]) {
+      if ((ctxt -> nameNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2817\n");
+      else
+        fprintf(stderr, "reached bug index 2817\n");
+    }
+    if ((!FIXREVERTER[2817] && (ctxt -> nameNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nameNr--;
     if (ctxt->nameNr > 0)
         ctxt->name = ctxt->nameTab[ctxt->nameNr - 1];
@@ -2188,8 +2837,23 @@ namePop(xmlParserCtxtPtr ctxt)
 {
     const xmlChar *ret;
 
-    if ((ctxt == NULL) || (ctxt->nameNr <= 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2820]) {
+      if ((ctxt == (void *) 0 || ctxt -> nameNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2820\n");
+      else
+        fprintf(stderr, "reached bug index 2820\n");
+    }
+    if ((!FIXREVERTER[2820] && (ctxt == (void *) 0 || ctxt -> nameNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nameNr--;
     if (ctxt->nameNr > 0)
         ctxt->name = ctxt->nameTab[ctxt->nameNr - 1];
@@ -2207,11 +2871,26 @@ static int spacePush(xmlParserCtxtPtr ctxt, int val) {
 	ctxt->spaceMax *= 2;
         tmp = (int *) xmlRealloc(ctxt->spaceTab,
 	                         ctxt->spaceMax * sizeof(ctxt->spaceTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2821]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2821\n");
+          else
+            fprintf(stderr, "reached bug index 2821\n");
+        }
+        if ((!FIXREVERTER[2821] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlErrMemory(ctxt);
 	    ctxt->spaceMax /=2;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->spaceTab = tmp;
     }
     ctxt->spaceTab[ctxt->spaceNr] = val;
@@ -2221,7 +2900,22 @@ static int spacePush(xmlParserCtxtPtr ctxt, int val) {
 
 static int spacePop(xmlParserCtxtPtr ctxt) {
     int ret;
-    if (ctxt->spaceNr <= 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2822]) {
+      if ((ctxt -> spaceNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2822\n");
+      else
+        fprintf(stderr, "reached bug index 2822\n");
+    }
+    if ((!FIXREVERTER[2822] && (ctxt -> spaceNr <= 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->spaceNr--;
     if (ctxt->spaceNr > 0)
 	ctxt->space = &ctxt->spaceTab[ctxt->spaceNr - 1];
@@ -2515,7 +3209,22 @@ xmlChar
 xmlPopInput(xmlParserCtxtPtr ctxt) {
     xmlParserInputPtr input;
 
-    if ((ctxt == NULL) || (ctxt->inputNr <= 1)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2824]) {
+      if ((ctxt == (void *) 0 || ctxt -> inputNr <= 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 2824\n");
+      else
+        fprintf(stderr, "reached bug index 2824\n");
+    }
+    if ((!FIXREVERTER[2824] && (ctxt == (void *) 0 || ctxt -> inputNr <= 1 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     input = inputPop(ctxt);
     xmlFreeInputStream(input);
     if (*ctxt->input->cur == 0)
@@ -2540,16 +3249,46 @@ xmlPushInput(xmlParserCtxtPtr ctxt, xmlParserInputPtr input) {
     int maxDepth;
     int ret;
 
-    if ((ctxt == NULL) || (input == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2825]) {
+      if ((ctxt == (void *) 0 || input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2825\n");
+      else
+        fprintf(stderr, "reached bug index 2825\n");
+    }
+    if ((!FIXREVERTER[2825] && (ctxt == (void *) 0 || input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     maxDepth = (ctxt->options & XML_PARSE_HUGE) ? 40 : 20;
-    if (ctxt->inputNr > maxDepth) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2826]) {
+      if ((ctxt -> inputNr > maxDepth ) && !(0))
+        fprintf(stderr, "triggered bug index 2826\n");
+      else
+        fprintf(stderr, "reached bug index 2826\n");
+    }
+    if ((!FIXREVERTER[2826] && (ctxt -> inputNr > maxDepth ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErrMsg(ctxt, XML_ERR_RESOURCE_LIMIT,
                        "Maximum entity nesting depth exceeded");
         xmlHaltParser(ctxt);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret = inputPush(ctxt, input);
     GROW;
     return(ret);
@@ -2600,8 +3339,23 @@ xmlParseCharRef(xmlParserCtxtPtr ctxt) {
 		val = 0;
 		break;
 	    }
-	    if (val > 0x110000)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2827]) {
+	      if ((val > 1114112 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2827\n");
+	      else
+	        fprintf(stderr, "reached bug index 2827\n");
+	    }
+	    if ((!FIXREVERTER[2827] && (val > 1114112 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        val = 0x110000;
+	        #ifdef FRCOV
+	        }
+	        #endif
 
 	    NEXT;
 	    count++;
@@ -2626,8 +3380,23 @@ xmlParseCharRef(xmlParserCtxtPtr ctxt) {
 		val = 0;
 		break;
 	    }
-	    if (val > 0x110000)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2828]) {
+	      if ((val > 1114112 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2828\n");
+	      else
+	        fprintf(stderr, "reached bug index 2828\n");
+	    }
+	    if ((!FIXREVERTER[2828] && (val > 1114112 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        val = 0x110000;
+	        #ifdef FRCOV
+	        }
+	        #endif
 
 	    NEXT;
 	    count++;
@@ -2704,8 +3473,23 @@ xmlParseStringCharRef(xmlParserCtxtPtr ctxt, const xmlChar **str) {
 		val = 0;
 		break;
 	    }
-	    if (val > 0x110000)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2829]) {
+	      if ((val > 1114112 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2829\n");
+	      else
+	        fprintf(stderr, "reached bug index 2829\n");
+	    }
+	    if ((!FIXREVERTER[2829] && (val > 1114112 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        val = 0x110000;
+	        #ifdef FRCOV
+	        }
+	        #endif
 
 	    ptr++;
 	    cur = *ptr;
@@ -2723,8 +3507,23 @@ xmlParseStringCharRef(xmlParserCtxtPtr ctxt, const xmlChar **str) {
 		val = 0;
 		break;
 	    }
-	    if (val > 0x110000)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2830]) {
+	      if ((val > 1114112 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2830\n");
+	      else
+	        fprintf(stderr, "reached bug index 2830\n");
+	    }
+	    if ((!FIXREVERTER[2830] && (val > 1114112 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        val = 0x110000;
+	        #ifdef FRCOV
+	        }
+	        #endif
 
 	    ptr++;
 	    cur = *ptr;
@@ -2899,7 +3698,22 @@ static int areBlanks(xmlParserCtxtPtr ctxt, const xmlChar *str, int len,
     /*
      * Look if the element is mixed content in the DTD if available
      */
-    if (ctxt->node == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2833]) {
+      if ((ctxt -> node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2833\n");
+      else
+        fprintf(stderr, "reached bug index 2833\n");
+    }
+    if ((!FIXREVERTER[2833] && (ctxt -> node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->myDoc != NULL) {
         xmlElementPtr elemDecl = NULL;
         xmlDocPtr doc = ctxt->myDoc;
@@ -2907,9 +3721,24 @@ static int areBlanks(xmlParserCtxtPtr ctxt, const xmlChar *str, int len,
 
         if (ctxt->node->ns)
             prefix = ctxt->node->ns->prefix;
-        if (doc->intSubset != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2834]) {
+          if ((doc -> intSubset != (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2834\n");
+          else
+            fprintf(stderr, "reached bug index 2834\n");
+        }
+        if ((!FIXREVERTER[2834] && (doc -> intSubset != (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             elemDecl = xmlHashLookup2(doc->intSubset->elements, ctxt->node->name,
                                       prefix);
+                                      #ifdef FRCOV
+                                      }
+                                      #endif
         if ((elemDecl == NULL) && (doc->extSubset != NULL))
             elemDecl = xmlHashLookup2(doc->extSubset->elements, ctxt->node->name,
                                       prefix);
@@ -2977,10 +3806,40 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefixOut) {
     const xmlChar *cur = name;
     int c;
 
-    if (prefixOut == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2835]) {
+      if ((prefixOut == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2835\n");
+      else
+        fprintf(stderr, "reached bug index 2835\n");
+    }
+    if ((!FIXREVERTER[2835] && (prefixOut == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     *prefixOut = NULL;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2836]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2836\n");
+      else
+        fprintf(stderr, "reached bug index 2836\n");
+    }
+    if ((!FIXREVERTER[2836] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /* nasty but well=formed */
     if (cur[0] == ':')
@@ -2999,10 +3858,25 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefixOut) {
 	max = len * 2;
 
 	buffer = (xmlChar *) xmlMallocAtomic(max);
-	if (buffer == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2837]) {
+	  if ((buffer == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2837\n");
+	  else
+	    fprintf(stderr, "reached bug index 2837\n");
+	}
+	if ((!FIXREVERTER[2837] && (buffer == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(buffer, buf, len);
 	while ((c != 0) && (c != ':')) { /* tested bigname.xml */
 	    if (len + 10 > max) {
@@ -3010,11 +3884,26 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefixOut) {
 
 		max *= 2;
 		tmp = (xmlChar *) xmlRealloc(buffer, max);
-		if (tmp == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2838]) {
+		  if ((tmp == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2838\n");
+		  else
+		    fprintf(stderr, "reached bug index 2838\n");
+		}
+		if ((!FIXREVERTER[2838] && (tmp == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlFree(buffer);
 		    xmlErrMemory(ctxt);
 		    return(NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		buffer = tmp;
 	    }
 	    buffer[len++] = c;
@@ -3031,10 +3920,25 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefixOut) {
 
     if (buffer == NULL) {
 	ret = xmlStrndup(buf, len);
-        if (ret == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2839]) {
+          if ((ret == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2839\n");
+          else
+            fprintf(stderr, "reached bug index 2839\n");
+        }
+        if ((!FIXREVERTER[2839] && (ret == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlErrMemory(ctxt);
 	    return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
     } else {
 	ret = buffer;
 	buffer = NULL;
@@ -3047,10 +3951,25 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefixOut) {
         prefix = ret;
 	if (c == 0) {
 	    ret = xmlStrndup(BAD_CAST "", 0);
-            if (ret == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2840]) {
+              if ((ret == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2840\n");
+              else
+                fprintf(stderr, "reached bug index 2840\n");
+            }
+            if ((!FIXREVERTER[2840] && (ret == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlFree(prefix);
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
             *prefixOut = prefix;
             return(ret);
 	}
@@ -3074,10 +3993,27 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefixOut) {
 	}
 	cur++;
 
-	while ((c != 0) && (len < max)) { /* tested bigname2.xml */
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2841])
+	  fprintf(stderr, "reached bug index 2841\n");
+	while ((FIXREVERTER[2841] && (c != 0 )) || (!FIXREVERTER[2841] && (c != 0 && len < max ))
+	#else
+	while (c != 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(len < max ))
+	    fprintf(stderr, "triggered bug index 2841\n");
+	  #endif
+	 /* tested bigname2.xml */
 	    buf[len++] = c;
 	    c = *cur++;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (len >= max) {
 	    /*
 	     * Okay someone managed to make a huge name, so he's ready to pay
@@ -3086,11 +4022,26 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefixOut) {
 	    max = len * 2;
 
 	    buffer = (xmlChar *) xmlMallocAtomic(max);
-	    if (buffer == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2842]) {
+	      if ((buffer == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2842\n");
+	      else
+	        fprintf(stderr, "reached bug index 2842\n");
+	    }
+	    if ((!FIXREVERTER[2842] && (buffer == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlErrMemory(ctxt);
                 xmlFree(prefix);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memcpy(buffer, buf, len);
 	    while (c != 0) { /* tested bigname2.xml */
 		if (len + 10 > max) {
@@ -3114,10 +4065,25 @@ xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefixOut) {
 
 	if (buffer == NULL) {
 	    ret = xmlStrndup(buf, len);
-            if (ret == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2843]) {
+              if ((ret == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2843\n");
+              else
+                fprintf(stderr, "reached bug index 2843\n");
+            }
+            if ((!FIXREVERTER[2843] && (ret == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlFree(prefix);
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	} else {
 	    ret = buffer;
 	}
@@ -3308,10 +4274,25 @@ xmlParseNameComplex(xmlParserCtxtPtr ctxt) {
 	    c = CUR_CHAR(l);
 	}
     }
-    if (len > maxLength) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2844]) {
+      if ((len > maxLength ) && !(0))
+        fprintf(stderr, "triggered bug index 2844\n");
+      else
+        fprintf(stderr, "reached bug index 2844\n");
+    }
+    if ((!FIXREVERTER[2844] && (len > maxLength ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "Name");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->input->cur - ctxt->input->base < len) {
         /*
          * There were a couple of bugs where PERefs lead to to a change
@@ -3376,10 +4357,25 @@ xmlParseName(xmlParserCtxtPtr ctxt) {
 	    in++;
 	if ((*in > 0) && (*in < 0x80)) {
 	    count = in - ctxt->input->cur;
-            if (count > maxLength) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2845]) {
+              if ((count > maxLength ) && !(0))
+                fprintf(stderr, "triggered bug index 2845\n");
+              else
+                fprintf(stderr, "reached bug index 2845\n");
+            }
+            if ((!FIXREVERTER[2845] && (count > maxLength ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "Name");
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    ret = xmlDictLookup(ctxt->dict, ctxt->input->cur, count);
 	    ctxt->input->cur = in;
 	    ctxt->input->col += count;
@@ -3473,14 +4469,44 @@ xmlParseNCName(xmlParserCtxtPtr ctxt) {
 	        (*in == '_') || (*in == '-') ||
 	        (*in == '.')) && (in < e))
 	    in++;
-	if (in >= e)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2847]) {
+	  if ((in >= e ) && !(0))
+	    fprintf(stderr, "triggered bug index 2847\n");
+	  else
+	    fprintf(stderr, "reached bug index 2847\n");
+	}
+	if ((!FIXREVERTER[2847] && (in >= e ))
+	#else
+	if (0
+	#endif
+	)
 	    goto complex;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((*in > 0) && (*in < 0x80)) {
 	    count = in - ctxt->input->cur;
-            if (count > maxLength) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2848]) {
+              if ((count > maxLength ) && !(0))
+                fprintf(stderr, "triggered bug index 2848\n");
+              else
+                fprintf(stderr, "reached bug index 2848\n");
+            }
+            if ((!FIXREVERTER[2848] && (count > maxLength ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "NCName");
                 return(ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    ret = xmlDictLookupHashed(ctxt->dict, ctxt->input->cur, count);
 	    ctxt->input->cur = in;
 	    ctxt->input->col += count;
@@ -3583,10 +4609,25 @@ xmlParseStringName(xmlParserCtxtPtr ctxt, const xmlChar** str) {
 	    int max = len * 2;
 
 	    buffer = (xmlChar *) xmlMallocAtomic(max);
-	    if (buffer == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2849]) {
+	      if ((buffer == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2849\n");
+	      else
+	        fprintf(stderr, "reached bug index 2849\n");
+	    }
+	    if ((!FIXREVERTER[2849] && (buffer == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlErrMemory(ctxt);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memcpy(buffer, buf, len);
 	    while (xmlIsNameChar(ctxt, c)) {
 		if (len + 10 > max) {
@@ -3594,31 +4635,76 @@ xmlParseStringName(xmlParserCtxtPtr ctxt, const xmlChar** str) {
 
 		    max *= 2;
 		    tmp = (xmlChar *) xmlRealloc(buffer, max);
-		    if (tmp == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2850]) {
+		      if ((tmp == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2850\n");
+		      else
+		        fprintf(stderr, "reached bug index 2850\n");
+		    }
+		    if ((!FIXREVERTER[2850] && (tmp == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlErrMemory(ctxt);
 			xmlFree(buffer);
 			return(NULL);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    buffer = tmp;
 		}
 		COPY_BUF(buffer, len, c);
 		cur += l;
 		c = CUR_SCHAR(cur, l);
-                if (len > maxLength) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2851]) {
+                  if ((len > maxLength ) && !(0))
+                    fprintf(stderr, "triggered bug index 2851\n");
+                  else
+                    fprintf(stderr, "reached bug index 2851\n");
+                }
+                if ((!FIXREVERTER[2851] && (len > maxLength ))
+                #else
+                if (0
+                #endif
+                ) {
                     xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "NCName");
                     xmlFree(buffer);
                     return(NULL);
                 }
+                #ifdef FRCOV
+                }
+                #endif
 	    }
 	    buffer[len] = 0;
 	    *str = cur;
 	    return(buffer);
 	}
     }
-    if (len > maxLength) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2852]) {
+      if ((len > maxLength ) && !(0))
+        fprintf(stderr, "triggered bug index 2852\n");
+      else
+        fprintf(stderr, "reached bug index 2852\n");
+    }
+    if ((!FIXREVERTER[2852] && (len > maxLength ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "NCName");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     *str = cur;
     ret = xmlStrndup(buf, len);
     if (ret == NULL)
@@ -3666,10 +4752,25 @@ xmlParseNmtoken(xmlParserCtxtPtr ctxt) {
 	    int max = len * 2;
 
 	    buffer = (xmlChar *) xmlMallocAtomic(max);
-	    if (buffer == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2853]) {
+	      if ((buffer == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2853\n");
+	      else
+	        fprintf(stderr, "reached bug index 2853\n");
+	    }
+	    if ((!FIXREVERTER[2853] && (buffer == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlErrMemory(ctxt);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memcpy(buffer, buf, len);
 	    while (xmlIsNameChar(ctxt, c)) {
 		if (len + 10 > max) {
@@ -3677,19 +4778,49 @@ xmlParseNmtoken(xmlParserCtxtPtr ctxt) {
 
 		    max *= 2;
 		    tmp = (xmlChar *) xmlRealloc(buffer, max);
-		    if (tmp == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2854]) {
+		      if ((tmp == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2854\n");
+		      else
+		        fprintf(stderr, "reached bug index 2854\n");
+		    }
+		    if ((!FIXREVERTER[2854] && (tmp == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlErrMemory(ctxt);
 			xmlFree(buffer);
 			return(NULL);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    buffer = tmp;
 		}
 		COPY_BUF(buffer, len, c);
-                if (len > maxLength) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2855]) {
+                  if ((len > maxLength ) && !(0))
+                    fprintf(stderr, "triggered bug index 2855\n");
+                  else
+                    fprintf(stderr, "reached bug index 2855\n");
+                }
+                if ((!FIXREVERTER[2855] && (len > maxLength ))
+                #else
+                if (0
+                #endif
+                ) {
                     xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "NmToken");
                     xmlFree(buffer);
                     return(NULL);
                 }
+                #ifdef FRCOV
+                }
+                #endif
 		NEXTL(l);
 		c = CUR_CHAR(l);
 	    }
@@ -3697,12 +4828,42 @@ xmlParseNmtoken(xmlParserCtxtPtr ctxt) {
 	    return(buffer);
 	}
     }
-    if (len == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2856]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2856\n");
+      else
+        fprintf(stderr, "reached bug index 2856\n");
+    }
+    if ((!FIXREVERTER[2856] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
-    if (len > maxLength) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2857]) {
+      if ((len > maxLength ) && !(0))
+        fprintf(stderr, "triggered bug index 2857\n");
+      else
+        fprintf(stderr, "reached bug index 2857\n");
+    }
+    if ((!FIXREVERTER[2857] && (len > maxLength ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "NmToken");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlStrndup(buf, len);
     if (ret == NULL)
         xmlErrMemory(ctxt);
@@ -3726,8 +4887,23 @@ xmlExpandPEsInEntityValue(xmlParserCtxtPtr ctxt, xmlSBuf *buf,
     const xmlChar *end, *chunk;
     int c, l;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2858]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2858\n");
+      else
+        fprintf(stderr, "reached bug index 2858\n");
+    }
+    if ((!FIXREVERTER[2858] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     depth += 1;
     if (depth > maxDepth) {
@@ -3760,8 +4936,23 @@ xmlExpandPEsInEntityValue(xmlParserCtxtPtr ctxt, xmlSBuf *buf,
                     xmlSBufAddString(buf, chunk, str - chunk);
 
                 c = xmlParseStringCharRef(ctxt, &str);
-                if (c == 0)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2860]) {
+                  if ((c == 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2860\n");
+                  else
+                    fprintf(stderr, "reached bug index 2860\n");
+                }
+                if ((!FIXREVERTER[2860] && (c == 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return;
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 xmlSBufAddChar(buf, c);
 
@@ -3793,8 +4984,23 @@ xmlExpandPEsInEntityValue(xmlParserCtxtPtr ctxt, xmlSBuf *buf,
                 xmlSBufAddString(buf, chunk, str - chunk);
 
             ent = xmlParseStringPEReference(ctxt, &str);
-            if (ent == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2861]) {
+              if ((ent == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2861\n");
+              else
+                fprintf(stderr, "reached bug index 2861\n");
+            }
+            if ((!FIXREVERTER[2861] && (ent == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return;
+                #ifdef FRCOV
+                }
+                #endif
 
             if (!PARSER_EXTERNAL(ctxt)) {
                 xmlFatalErr(ctxt, XML_ERR_ENTITY_PE_INTERNAL, NULL);
@@ -3902,8 +5108,23 @@ xmlParseEntityValue(xmlParserCtxtPtr ctxt, xmlChar **orig) {
     while (1) {
         int c;
 
-        if (PARSER_STOPPED(ctxt))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2862]) {
+          if ((ctxt -> disableSAX > 1 ) && !(0))
+            fprintf(stderr, "triggered bug index 2862\n");
+          else
+            fprintf(stderr, "reached bug index 2862\n");
+        }
+        if ((!FIXREVERTER[2862] && (ctxt -> disableSAX > 1 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
 
         if (CUR_PTR >= ctxt->input->end) {
             xmlFatalErrMsg(ctxt, XML_ERR_ENTITY_NOT_FINISHED, NULL);
@@ -3988,8 +5209,23 @@ xmlCheckEntityInAttValue(xmlParserCtxtPtr ctxt, xmlEntityPtr pent, int depth) {
         flags = XML_ENT_VALIDATED;
 
     str = pent->content;
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2866]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2866\n");
+      else
+        fprintf(stderr, "reached bug index 2866\n");
+    }
+    if ((!FIXREVERTER[2866] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto done;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Note that entity values are already validated. We only check
@@ -4023,10 +5259,25 @@ xmlCheckEntityInAttValue(xmlParserCtxtPtr ctxt, xmlEntityPtr pent, int depth) {
             xmlEntityPtr ent;
 
 	    name = xmlParseStringEntityRef(ctxt, &str);
-	    if (name == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2869]) {
+	      if ((name == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2869\n");
+	      else
+	        fprintf(stderr, "reached bug index 2869\n");
+	    }
+	    if ((!FIXREVERTER[2869] && (name == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 pent->content[0] = 0;
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             ent = xmlLookupGeneralEntity(ctxt, name, /* inAttr */ 1);
             xmlFree(name);
@@ -4046,8 +5297,23 @@ xmlCheckEntityInAttValue(xmlParserCtxtPtr ctxt, xmlEntityPtr pent, int depth) {
     }
 
 done:
-    if (ctxt->inSubset == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2870]) {
+      if ((ctxt -> inSubset == 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2870\n");
+      else
+        fprintf(stderr, "reached bug index 2870\n");
+    }
+    if ((!FIXREVERTER[2870] && (ctxt -> inSubset == 0  ))
+    #else
+    if (0
+    #endif
+    )
         pent->expandedSize = expandedSize;
+        #ifdef FRCOV
+        }
+        #endif
 
     pent->flags |= flags;
 }
@@ -4073,8 +5339,23 @@ xmlExpandEntityInAttValue(xmlParserCtxtPtr ctxt, xmlSBuf *buf,
     int maxDepth = (ctxt->options & XML_PARSE_HUGE) ? 40 : 20;
     int c, chunkSize;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2871]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2871\n");
+      else
+        fprintf(stderr, "reached bug index 2871\n");
+    }
+    if ((!FIXREVERTER[2871] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     depth += 1;
     if (depth > maxDepth) {
@@ -4155,11 +5436,26 @@ xmlExpandEntityInAttValue(xmlParserCtxtPtr ctxt, xmlSBuf *buf,
             }
 
 	    val = xmlParseStringCharRef(ctxt, &str);
-	    if (val == 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2874]) {
+	      if ((val == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2874\n");
+	      else
+	        fprintf(stderr, "reached bug index 2874\n");
+	    }
+	    if ((!FIXREVERTER[2874] && (val == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 if (pent != NULL)
                     pent->content[0] = 0;
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             if (val == ' ') {
                 if ((!normalize) || (!*inSpace))
@@ -4179,27 +5475,72 @@ xmlExpandEntityInAttValue(xmlParserCtxtPtr ctxt, xmlSBuf *buf,
             }
 
 	    name = xmlParseStringEntityRef(ctxt, &str);
-            if (name == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2875]) {
+              if ((name == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2875\n");
+              else
+                fprintf(stderr, "reached bug index 2875\n");
+            }
+            if ((!FIXREVERTER[2875] && (name == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 if (pent != NULL)
                     pent->content[0] = 0;
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             ent = xmlLookupGeneralEntity(ctxt, name, /* inAttr */ 1);
             xmlFree(name);
 
 	    if ((ent != NULL) &&
 		(ent->etype == XML_INTERNAL_PREDEFINED_ENTITY)) {
-		if (ent->content == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2876]) {
+		  if ((ent -> content == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2876\n");
+		  else
+		    fprintf(stderr, "reached bug index 2876\n");
+		}
+		if ((!FIXREVERTER[2876] && (ent -> content == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlFatalErrMsg(ctxt, XML_ERR_INTERNAL_ERROR,
 			    "predefined entity has no content\n");
                     break;
                 }
+                #ifdef FRCOV
+                }
+                #endif
 
                 xmlSBufAddString(buf, ent->content, ent->length);
 
                 *inSpace = 0;
-	    } else if ((ent != NULL) && (ent->content != NULL)) {
+	    } else 
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2877]) {
+	      fprintf(stderr, "reached bug index 2877\n");
+	    }
+	    if ((FIXREVERTER[2877] && (ent != (void *) 0 )) || (!FIXREVERTER[2877] && (ent != (void *) 0 && ent -> content != (void *) 0 ))
+	    #else
+	    if (ent != (void *) 0 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(ent -> content != (void *) 0 ))
+	        fprintf(stderr, "triggered bug index 2877\n");
+	      #endif
+	    
                 if (pent != NULL)
                     pent->flags |= XML_ENT_EXPANDING;
 		xmlExpandEntityInAttValue(ctxt, buf, ent->content, ent,
@@ -4207,6 +5548,9 @@ xmlExpandEntityInAttValue(xmlParserCtxtPtr ctxt, xmlSBuf *buf,
                 if (pent != NULL)
                     pent->flags &= ~XML_ENT_EXPANDING;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
         }
     }
 
@@ -4315,8 +5659,23 @@ xmlParseAttValueInternal(xmlParserCtxtPtr ctxt, int *attlen, int *alloc,
     chunkSize = 0;
 
     while (1) {
-        if (PARSER_STOPPED(ctxt))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2878]) {
+          if ((ctxt -> disableSAX > 1 ) && !(0))
+            fprintf(stderr, "triggered bug index 2878\n");
+          else
+            fprintf(stderr, "reached bug index 2878\n");
+        }
+        if ((!FIXREVERTER[2878] && (ctxt -> disableSAX > 1 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
 
         if (CUR_PTR >= ctxt->input->end) {
             xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,
@@ -4403,8 +5762,23 @@ xmlParseAttValueInternal(xmlParserCtxtPtr ctxt, int *attlen, int *alloc,
             }
 
             val = xmlParseCharRef(ctxt);
-            if (val == 0)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2880]) {
+              if ((val == 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2880\n");
+              else
+                fprintf(stderr, "reached bug index 2880\n");
+            }
+            if ((!FIXREVERTER[2880] && (val == 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto error;
+                #ifdef FRCOV
+                }
+                #endif
 
             if ((val == '&') && (!replaceEntities)) {
                 /*
@@ -4431,17 +5805,47 @@ xmlParseAttValueInternal(xmlParserCtxtPtr ctxt, int *attlen, int *alloc,
             }
 
             name = xmlParseEntityRefInternal(ctxt);
-            if (name == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2881]) {
+              if ((name == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2881\n");
+              else
+                fprintf(stderr, "reached bug index 2881\n");
+            }
+            if ((!FIXREVERTER[2881] && (name == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 /*
                  * Probably a literal '&' which wasn't escaped.
                  * TODO: Handle gracefully in recovery mode.
                  */
                 continue;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             ent = xmlLookupGeneralEntity(ctxt, name, /* isAttr */ 1);
-            if (ent == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2882]) {
+              if ((ent == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2882\n");
+              else
+                fprintf(stderr, "reached bug index 2882\n");
+            }
+            if ((!FIXREVERTER[2882] && (ent == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 continue;
+                #ifdef FRCOV
+                }
+                #endif
 
             if (ent->etype == XML_INTERNAL_PREDEFINED_ENTITY) {
                 if ((ent->content[0] == '&') && (!replaceEntities))
@@ -4549,7 +5953,22 @@ error:
 
 xmlChar *
 xmlParseAttValue(xmlParserCtxtPtr ctxt) {
-    if ((ctxt == NULL) || (ctxt->input == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2883]) {
+      if ((ctxt == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2883\n");
+      else
+        fprintf(stderr, "reached bug index 2883\n");
+    }
+    if ((!FIXREVERTER[2883] && (ctxt == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     return(xmlParseAttValueInternal(ctxt, NULL, NULL, 0, 0));
 }
 
@@ -4589,10 +6008,25 @@ xmlParseSystemLiteral(xmlParserCtxtPtr ctxt) {
     }
 
     buf = (xmlChar *) xmlMallocAtomic(size);
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2884]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2884\n");
+      else
+        fprintf(stderr, "reached bug index 2884\n");
+    }
+    if ((!FIXREVERTER[2884] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur = CUR_CHAR(l);
     while ((IS_CHAR(cur)) && (cur != stop)) { /* checked */
 	if (len + 5 >= size) {
@@ -4600,19 +6034,49 @@ xmlParseSystemLiteral(xmlParserCtxtPtr ctxt) {
 
 	    size *= 2;
 	    tmp = (xmlChar *) xmlRealloc(buf, size);
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2885]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2885\n");
+	      else
+	        fprintf(stderr, "reached bug index 2885\n");
+	    }
+	    if ((!FIXREVERTER[2885] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlFree(buf);
 		xmlErrMemory(ctxt);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = tmp;
 	}
 	COPY_BUF(buf, len, cur);
-        if (len > maxLength) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2886]) {
+          if ((len > maxLength ) && !(0))
+            fprintf(stderr, "triggered bug index 2886\n");
+          else
+            fprintf(stderr, "reached bug index 2886\n");
+        }
+        if ((!FIXREVERTER[2886] && (len > maxLength ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "SystemLiteral");
             xmlFree(buf);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
 	NEXTL(l);
 	cur = CUR_CHAR(l);
     }
@@ -4660,10 +6124,25 @@ xmlParsePubidLiteral(xmlParserCtxtPtr ctxt) {
 	return(NULL);
     }
     buf = (xmlChar *) xmlMallocAtomic(size);
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2887]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2887\n");
+      else
+        fprintf(stderr, "reached bug index 2887\n");
+    }
+    if ((!FIXREVERTER[2887] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur = CUR;
     while ((IS_PUBIDCHAR_CH(cur)) && (cur != stop) &&
            (PARSER_STOPPED(ctxt) == 0)) { /* checked */
@@ -4672,19 +6151,49 @@ xmlParsePubidLiteral(xmlParserCtxtPtr ctxt) {
 
 	    size *= 2;
 	    tmp = (xmlChar *) xmlRealloc(buf, size);
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2888]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2888\n");
+	      else
+	        fprintf(stderr, "reached bug index 2888\n");
+	    }
+	    if ((!FIXREVERTER[2888] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrMemory(ctxt);
 		xmlFree(buf);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = tmp;
 	}
 	buf[len++] = cur;
-        if (len > maxLength) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2889]) {
+          if ((len > maxLength ) && !(0))
+            fprintf(stderr, "triggered bug index 2889\n");
+          else
+            fprintf(stderr, "reached bug index 2889\n");
+        }
+        if ((!FIXREVERTER[2889] && (len > maxLength ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "Public ID");
             xmlFree(buf);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
 	NEXT;
 	cur = CUR;
     }
@@ -4854,14 +6363,31 @@ get_more:
                 }
                 line = ctxt->input->line;
                 col = ctxt->input->col;
-            } else if ((ctxt->sax != NULL) &&
-                       (ctxt->disableSAX == 0)) {
+            } else 
+            #ifdef FRCOV
+            {if (FIXREVERTER[2890]) {
+              fprintf(stderr, "reached bug index 2890\n");
+            }
+            if ((FIXREVERTER[2890] && (ctxt -> sax != (void *) 0 )) || (!FIXREVERTER[2890] && (ctxt -> sax != (void *) 0 && ctxt -> disableSAX == 0 ))
+            #else
+            if (ctxt -> sax != (void *) 0 
+            #endif
+            ) {
+                         
+                       #ifdef FRCOV
+                         if (!(ctxt -> disableSAX == 0 ))
+                           fprintf(stderr, "triggered bug index 2890\n");
+                         #endif
+                       
                 if (ctxt->sax->characters != NULL)
                     ctxt->sax->characters(ctxt->userData,
                                           ctxt->input->cur, nbchar);
                 line = ctxt->input->line;
                 col = ctxt->input->col;
             }
+            #ifdef FRCOV
+            }
+            #endif
         }
         ctxt->input->cur = in;
         if (*in == 0xD) {
@@ -5098,14 +6624,44 @@ xmlParseCommentComplex(xmlParserCtxtPtr ctxt, xmlChar *buf,
         len = 0;
 	size = XML_PARSER_BUFFER_SIZE;
 	buf = (xmlChar *) xmlMallocAtomic(size);
-	if (buf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2891]) {
+	  if ((buf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2891\n");
+	  else
+	    fprintf(stderr, "reached bug index 2891\n");
+	}
+	if ((!FIXREVERTER[2891] && (buf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     q = CUR_CHAR(ql);
-    if (q == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2892]) {
+      if ((q == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2892\n");
+      else
+        fprintf(stderr, "reached bug index 2892\n");
+    }
+    if ((!FIXREVERTER[2892] && (q == 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto not_terminated;
+        #ifdef FRCOV
+        }
+        #endif
     if (!IS_CHAR(q)) {
         xmlFatalErrMsgInt(ctxt, XML_ERR_INVALID_CHAR,
                           "xmlParseComment: invalid xmlChar value %d\n",
@@ -5115,8 +6671,23 @@ xmlParseCommentComplex(xmlParserCtxtPtr ctxt, xmlChar *buf,
     }
     NEXTL(ql);
     r = CUR_CHAR(rl);
-    if (r == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2893]) {
+      if ((r == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2893\n");
+      else
+        fprintf(stderr, "reached bug index 2893\n");
+    }
+    if ((!FIXREVERTER[2893] && (r == 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto not_terminated;
+        #ifdef FRCOV
+        }
+        #endif
     if (!IS_CHAR(r)) {
         xmlFatalErrMsgInt(ctxt, XML_ERR_INVALID_CHAR,
                           "xmlParseComment: invalid xmlChar value %d\n",
@@ -5126,8 +6697,23 @@ xmlParseCommentComplex(xmlParserCtxtPtr ctxt, xmlChar *buf,
     }
     NEXTL(rl);
     cur = CUR_CHAR(l);
-    if (cur == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2894]) {
+      if ((cur == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2894\n");
+      else
+        fprintf(stderr, "reached bug index 2894\n");
+    }
+    if ((!FIXREVERTER[2894] && (cur == 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto not_terminated;
+        #ifdef FRCOV
+        }
+        #endif
     while (IS_CHAR(cur) && /* checked */
            ((cur != '>') ||
 	    (r != '-') || (q != '-'))) {
@@ -5140,21 +6726,51 @@ xmlParseCommentComplex(xmlParserCtxtPtr ctxt, xmlChar *buf,
 
 	    new_size = size * 2;
 	    new_buf = (xmlChar *) xmlRealloc(buf, new_size);
-	    if (new_buf == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2895]) {
+	      if ((new_buf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2895\n");
+	      else
+	        fprintf(stderr, "reached bug index 2895\n");
+	    }
+	    if ((!FIXREVERTER[2895] && (new_buf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFree (buf);
 		xmlErrMemory(ctxt);
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = new_buf;
             size = new_size;
 	}
 	COPY_BUF(buf, len, q);
-        if (len > maxLength) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2896]) {
+          if ((len > maxLength ) && !(0))
+            fprintf(stderr, "triggered bug index 2896\n");
+          else
+            fprintf(stderr, "reached bug index 2896\n");
+        }
+        if ((!FIXREVERTER[2896] && (len > maxLength ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFatalErrMsgStr(ctxt, XML_ERR_COMMENT_NOT_FINISHED,
                          "Comment too big found", NULL);
             xmlFree (buf);
             return;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
 	q = r;
 	ql = rl;
@@ -5263,32 +6879,77 @@ get_more:
                 else
                     size = XML_PARSER_BUFFER_SIZE + nbchar;
                 buf = (xmlChar *) xmlMallocAtomic(size);
-                if (buf == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2897]) {
+                  if ((buf == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2897\n");
+                  else
+                    fprintf(stderr, "reached bug index 2897\n");
+                }
+                if ((!FIXREVERTER[2897] && (buf == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     xmlErrMemory(ctxt);
                     return;
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 len = 0;
             } else if (len + nbchar + 1 >= size) {
                 xmlChar *new_buf;
                 size  += len + nbchar + XML_PARSER_BUFFER_SIZE;
                 new_buf = (xmlChar *) xmlRealloc(buf, size);
-                if (new_buf == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2898]) {
+                  if ((new_buf == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2898\n");
+                  else
+                    fprintf(stderr, "reached bug index 2898\n");
+                }
+                if ((!FIXREVERTER[2898] && (new_buf == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     xmlFree (buf);
                     xmlErrMemory(ctxt);
                     return;
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 buf = new_buf;
             }
             memcpy(&buf[len], ctxt->input->cur, nbchar);
             len += nbchar;
             buf[len] = 0;
 	}
-        if (len > maxLength) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2899]) {
+          if ((len > maxLength ) && !(0))
+            fprintf(stderr, "triggered bug index 2899\n");
+          else
+            fprintf(stderr, "reached bug index 2899\n");
+        }
+        if ((!FIXREVERTER[2899] && (len > maxLength ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFatalErrMsgStr(ctxt, XML_ERR_COMMENT_NOT_FINISHED,
                          "Comment too big found", NULL);
             xmlFree (buf);
             return;
         }
+        #ifdef FRCOV
+        }
+        #endif
 	ctxt->input->cur = in;
 	if (*in == 0xA) {
 	    in++;
@@ -5508,10 +7169,25 @@ xmlParsePI(xmlParserCtxtPtr ctxt) {
 		return;
 	    }
 	    buf = (xmlChar *) xmlMallocAtomic(size);
-	    if (buf == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2900]) {
+	      if ((buf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2900\n");
+	      else
+	        fprintf(stderr, "reached bug index 2900\n");
+	    }
+	    if ((!FIXREVERTER[2900] && (buf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrMemory(ctxt);
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (SKIP_BLANKS == 0) {
 		xmlFatalErrMsgStr(ctxt, XML_ERR_SPACE_REQUIRED,
 			  "ParsePI: PI %s space expected\n", target);
@@ -5523,21 +7199,51 @@ xmlParsePI(xmlParserCtxtPtr ctxt) {
 		    xmlChar *tmp;
                     size_t new_size = size * 2;
 		    tmp = (xmlChar *) xmlRealloc(buf, new_size);
-		    if (tmp == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2901]) {
+		      if ((tmp == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2901\n");
+		      else
+		        fprintf(stderr, "reached bug index 2901\n");
+		    }
+		    if ((!FIXREVERTER[2901] && (tmp == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlErrMemory(ctxt);
 			xmlFree(buf);
 			return;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    buf = tmp;
                     size = new_size;
 		}
 		COPY_BUF(buf, len, cur);
-                if (len > maxLength) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2902]) {
+                  if ((len > maxLength ) && !(0))
+                    fprintf(stderr, "triggered bug index 2902\n");
+                  else
+                    fprintf(stderr, "reached bug index 2902\n");
+                }
+                if ((!FIXREVERTER[2902] && (len > maxLength ))
+                #else
+                if (0
+                #endif
+                ) {
                     xmlFatalErrMsgStr(ctxt, XML_ERR_PI_NOT_FINISHED,
                                       "PI %s too big found", target);
                     xmlFree(buf);
                     return;
                 }
+                #ifdef FRCOV
+                }
+                #endif
 		NEXTL(l);
 		cur = CUR_CHAR(l);
 	    }
@@ -5612,10 +7318,25 @@ xmlParseNotationDecl(xmlParserCtxtPtr ctxt) {
 	}
 
         name = xmlParseName(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2903]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2903\n");
+	  else
+	    fprintf(stderr, "reached bug index 2903\n");
+	}
+	if ((!FIXREVERTER[2903] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErr(ctxt, XML_ERR_NOTATION_NOT_STARTED, NULL);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (xmlStrchr(name, ':') != NULL) {
 	    xmlNsErr(ctxt, XML_NS_ERR_COLON,
 		     "colons are forbidden from notation names '%s'\n",
@@ -5707,11 +7428,26 @@ xmlParseEntityDecl(xmlParserCtxtPtr ctxt) {
 	}
 
         name = xmlParseName(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2904]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2904\n");
+	  else
+	    fprintf(stderr, "reached bug index 2904\n");
+	}
+	if ((!FIXREVERTER[2904] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 	                   "xmlParseEntityDecl: no name\n");
             return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (xmlStrchr(name, ':') != NULL) {
 	    xmlNsErr(ctxt, XML_NS_ERR_COLON,
 		     "colons are forbidden from entities names '%s'\n",
@@ -5768,10 +7504,25 @@ xmlParseEntityDecl(xmlParserCtxtPtr ctxt) {
 		    (xmlStrEqual(ctxt->myDoc->version, SAX_COMPAT_MODE))) {
 		    if (ctxt->myDoc == NULL) {
 			ctxt->myDoc = xmlNewDoc(SAX_COMPAT_MODE);
-			if (ctxt->myDoc == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2905]) {
+			  if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 2905\n");
+			  else
+			    fprintf(stderr, "reached bug index 2905\n");
+			}
+			if ((!FIXREVERTER[2905] && (ctxt -> myDoc == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    xmlErrMemory(ctxt);
 			    goto done;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			ctxt->myDoc->properties = XML_DOC_INTERNAL;
 		    }
 		    if (ctxt->myDoc->intSubset == NULL) {
@@ -5826,10 +7577,25 @@ xmlParseEntityDecl(xmlParserCtxtPtr ctxt) {
 			(xmlStrEqual(ctxt->myDoc->version, SAX_COMPAT_MODE)))) {
 			if (ctxt->myDoc == NULL) {
 			    ctxt->myDoc = xmlNewDoc(SAX_COMPAT_MODE);
-			    if (ctxt->myDoc == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[2906]) {
+			      if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 2906\n");
+			      else
+			        fprintf(stderr, "reached bug index 2906\n");
+			    }
+			    if ((!FIXREVERTER[2906] && (ctxt -> myDoc == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 			        xmlErrMemory(ctxt);
 				goto done;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
 			    ctxt->myDoc->properties = XML_DOC_INTERNAL;
 			}
 
@@ -5988,12 +7754,27 @@ xmlParseNotationType(xmlParserCtxtPtr ctxt) {
         NEXT;
 	SKIP_BLANKS_PE;
         name = xmlParseName(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2907]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2907\n");
+	  else
+	    fprintf(stderr, "reached bug index 2907\n");
+	}
+	if ((!FIXREVERTER[2907] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			   "Name expected in NOTATION declaration\n");
             xmlFreeEnumeration(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	tmp = ret;
 	while (tmp != NULL) {
 	    if (xmlStrEqual(name, tmp->name)) {
@@ -6008,11 +7789,26 @@ xmlParseNotationType(xmlParserCtxtPtr ctxt) {
 	}
 	if (tmp == NULL) {
 	    cur = xmlCreateEnumeration(name);
-	    if (cur == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2908]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2908\n");
+	      else
+	        fprintf(stderr, "reached bug index 2908\n");
+	    }
+	    if ((!FIXREVERTER[2908] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 xmlErrMemory(ctxt);
                 xmlFreeEnumeration(ret);
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    if (last == NULL) ret = last = cur;
 	    else {
 		last->next = cur;
@@ -6060,10 +7856,25 @@ xmlParseEnumerationType(xmlParserCtxtPtr ctxt) {
         NEXT;
 	SKIP_BLANKS_PE;
         name = xmlParseNmtoken(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2909]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2909\n");
+	  else
+	    fprintf(stderr, "reached bug index 2909\n");
+	}
+	if ((!FIXREVERTER[2909] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErr(ctxt, XML_ERR_NMTOKEN_REQUIRED, NULL);
 	    return(ret);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	tmp = ret;
 	while (tmp != NULL) {
 	    if (xmlStrEqual(name, tmp->name)) {
@@ -6080,11 +7891,26 @@ xmlParseEnumerationType(xmlParserCtxtPtr ctxt) {
 	    cur = xmlCreateEnumeration(name);
 	    if (!xmlDictOwns(ctxt->dict, name))
 		xmlFree(name);
-	    if (cur == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2910]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2910\n");
+	      else
+	        fprintf(stderr, "reached bug index 2910\n");
+	    }
+	    if ((!FIXREVERTER[2910] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 xmlErrMemory(ctxt);
                 xmlFreeEnumeration(ret);
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    if (last == NULL) ret = last = cur;
 	    else {
 		last->next = cur;
@@ -6245,11 +8071,26 @@ xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt) {
 		                 "Space required after '<!ATTLIST'\n");
 	}
         elemName = xmlParseName(ctxt);
-	if (elemName == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2911]) {
+	  if ((elemName == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2911\n");
+	  else
+	    fprintf(stderr, "reached bug index 2911\n");
+	}
+	if ((!FIXREVERTER[2911] && (elemName == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			   "ATTLIST: no name for Element\n");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	SKIP_BLANKS_PE;
 	GROW;
 	while ((RAW != '>') && (PARSER_STOPPED(ctxt) == 0)) {
@@ -6260,11 +8101,26 @@ xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt) {
 	    GROW;
             tree = NULL;
 	    attrName = xmlParseName(ctxt);
-	    if (attrName == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2912]) {
+	      if ((attrName == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2912\n");
+	      else
+	        fprintf(stderr, "reached bug index 2912\n");
+	    }
+	    if ((!FIXREVERTER[2912] && (attrName == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			       "ATTLIST: no name for Attribute\n");
 		break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    GROW;
 	    if (SKIP_BLANKS_PE == 0) {
 		xmlFatalErrMsg(ctxt, XML_ERR_SPACE_REQUIRED,
@@ -6273,9 +8129,24 @@ xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt) {
 	    }
 
 	    type = xmlParseAttributeType(ctxt, &tree);
-	    if (type <= 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2913]) {
+	      if ((type <= 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2913\n");
+	      else
+	        fprintf(stderr, "reached bug index 2913\n");
+	    }
+	    if ((!FIXREVERTER[2913] && (type <= 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	    GROW;
 	    if (SKIP_BLANKS_PE == 0) {
@@ -6287,15 +8158,47 @@ xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt) {
 	    }
 
 	    def = xmlParseDefaultDecl(ctxt, &defaultValue);
-	    if (def <= 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2914]) {
+	      if ((def <= 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2914\n");
+	      else
+	        fprintf(stderr, "reached bug index 2914\n");
+	    }
+	    if ((!FIXREVERTER[2914] && (def <= 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 if (defaultValue != NULL)
 		    xmlFree(defaultValue);
 	        if (tree != NULL)
 		    xmlFreeEnumeration(tree);
 	        break;
 	    }
-	    if ((type != XML_ATTRIBUTE_CDATA) && (defaultValue != NULL))
+	    #ifdef FRCOV
+	    }
+	    #endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2915]) {
+	      fprintf(stderr, "reached bug index 2915\n");
+	    }
+	    if ((FIXREVERTER[2915] && (type != XML_ATTRIBUTE_CDATA )) || (!FIXREVERTER[2915] && (type != XML_ATTRIBUTE_CDATA && defaultValue != (void *) 0 ))
+	    #else
+	    if (type != XML_ATTRIBUTE_CDATA 
+	    #endif
+	    )
+	        
+	        #ifdef FRCOV
+	        {if (!(defaultValue != (void *) 0 ))
+	          fprintf(stderr, "triggered bug index 2915\n");
+	        #endif
 	        xmlAttrNormalizeSpace(defaultValue, defaultValue);
+	        #ifdef FRCOV
+	        }}
+	        #endif
 
 	    GROW;
             if (RAW != '>') {
@@ -6377,8 +8280,23 @@ xmlParseElementMixedContentDecl(xmlParserCtxtPtr ctxt, int inputchk) {
 	    }
 	    NEXT;
 	    ret = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_PCDATA);
-	    if (ret == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2916]) {
+	      if ((ret == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2916\n");
+	      else
+	        fprintf(stderr, "reached bug index 2916\n");
+	    }
+	    if ((!FIXREVERTER[2916] && (ret == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
                 goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
 	    if (RAW == '*') {
 		ret->ocur = XML_ELEMENT_CONTENT_MULT;
 		NEXT;
@@ -6387,36 +8305,111 @@ xmlParseElementMixedContentDecl(xmlParserCtxtPtr ctxt, int inputchk) {
 	}
 	if ((RAW == '(') || (RAW == '|')) {
 	    ret = cur = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_PCDATA);
-	    if (ret == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2917]) {
+	      if ((ret == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2917\n");
+	      else
+	        fprintf(stderr, "reached bug index 2917\n");
+	    }
+	    if ((!FIXREVERTER[2917] && (ret == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
                 goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
 	}
 	while ((RAW == '|') && (PARSER_STOPPED(ctxt) == 0)) {
 	    NEXT;
             n = xmlNewDocElementContent(ctxt->myDoc, NULL, XML_ELEMENT_CONTENT_OR);
-            if (n == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2918]) {
+              if ((n == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2918\n");
+              else
+                fprintf(stderr, "reached bug index 2918\n");
+            }
+            if ((!FIXREVERTER[2918] && (n == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
 	    if (elem == NULL) {
 		n->c1 = cur;
-		if (cur != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2919]) {
+		  if ((cur != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2919\n");
+		  else
+		    fprintf(stderr, "reached bug index 2919\n");
+		}
+		if ((!FIXREVERTER[2919] && (cur != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    cur->parent = n;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		ret = cur = n;
 	    } else {
 	        cur->c2 = n;
 		n->parent = cur;
 		n->c1 = xmlNewDocElementContent(ctxt->myDoc, elem, XML_ELEMENT_CONTENT_ELEMENT);
-                if (n->c1 == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2920]) {
+                  if ((n -> c1 == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2920\n");
+                  else
+                    fprintf(stderr, "reached bug index 2920\n");
+                }
+                if ((!FIXREVERTER[2920] && (n -> c1 == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
 		n->c1->parent = n;
 		cur = n;
 	    }
 	    SKIP_BLANKS_PE;
 	    elem = xmlParseName(ctxt);
-	    if (elem == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2921]) {
+	      if ((elem == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2921\n");
+	      else
+	        fprintf(stderr, "reached bug index 2921\n");
+	    }
+	    if ((!FIXREVERTER[2921] && (elem == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			"xmlParseElementMixedContentDecl : Name expected\n");
 		xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    SKIP_BLANKS_PE;
 	    GROW;
 	}
@@ -6424,8 +8417,23 @@ xmlParseElementMixedContentDecl(xmlParserCtxtPtr ctxt, int inputchk) {
 	    if (elem != NULL) {
 		cur->c2 = xmlNewDocElementContent(ctxt->myDoc, elem,
 		                               XML_ELEMENT_CONTENT_ELEMENT);
-		if (cur->c2 == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2922]) {
+		  if ((cur -> c2 == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2922\n");
+		  else
+		    fprintf(stderr, "reached bug index 2922\n");
+		}
+		if ((!FIXREVERTER[2922] && (cur -> c2 == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
                     goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
 		cur->c2->parent = cur;
             }
             if (ret != NULL)
@@ -6493,12 +8501,27 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
     const xmlChar *elem;
     xmlChar type = 0;
 
-    if (depth > maxDepth) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2923]) {
+      if ((depth > maxDepth ) && !(0))
+        fprintf(stderr, "triggered bug index 2923\n");
+      else
+        fprintf(stderr, "reached bug index 2923\n");
+    }
+    if ((!FIXREVERTER[2923] && (depth > maxDepth ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErrMsgInt(ctxt, XML_ERR_RESOURCE_LIMIT,
                 "xmlParseElementChildrenContentDecl : depth %d too deep, "
                 "use XML_PARSE_HUGE\n", depth);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     SKIP_BLANKS_PE;
     GROW;
     if (RAW == '(') {
@@ -6509,21 +8532,66 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	SKIP_BLANKS_PE;
         cur = ret = xmlParseElementChildrenContentDeclPriv(ctxt, inputid,
                                                            depth + 1);
-        if (cur == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2924]) {
+          if ((cur == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2924\n");
+          else
+            fprintf(stderr, "reached bug index 2924\n");
+        }
+        if ((!FIXREVERTER[2924] && (cur == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(NULL);
+            #ifdef FRCOV
+            }
+            #endif
 	SKIP_BLANKS_PE;
 	GROW;
     } else {
 	elem = xmlParseName(ctxt);
-	if (elem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2925]) {
+	  if ((elem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2925\n");
+	  else
+	    fprintf(stderr, "reached bug index 2925\n");
+	}
+	if ((!FIXREVERTER[2925] && (elem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErr(ctxt, XML_ERR_ELEMCONTENT_NOT_STARTED, NULL);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         cur = ret = xmlNewDocElementContent(ctxt->myDoc, elem, XML_ELEMENT_CONTENT_ELEMENT);
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2926]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2926\n");
+	  else
+	    fprintf(stderr, "reached bug index 2926\n");
+	}
+	if ((!FIXREVERTER[2926] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	GROW;
 	if (RAW == '?') {
 	    cur->ocur = XML_ELEMENT_CONTENT_OPT;
@@ -6572,16 +8640,61 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	    }
 	    if (last == NULL) {
 		op->c1 = ret;
-		if (ret != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2927]) {
+		  if ((ret != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2927\n");
+		  else
+		    fprintf(stderr, "reached bug index 2927\n");
+		}
+		if ((!FIXREVERTER[2927] && (ret != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    ret->parent = op;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		ret = cur = op;
 	    } else {
 	        cur->c2 = op;
-		if (op != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2928]) {
+		  if ((op != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2928\n");
+		  else
+		    fprintf(stderr, "reached bug index 2928\n");
+		}
+		if ((!FIXREVERTER[2928] && (op != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    op->parent = cur;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		op->c1 = last;
-		if (last != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2929]) {
+		  if ((last != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2929\n");
+		  else
+		    fprintf(stderr, "reached bug index 2929\n");
+		}
+		if ((!FIXREVERTER[2929] && (last != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    last->parent = op;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		cur =op;
 		last = NULL;
 	    }
@@ -6614,16 +8727,61 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	    }
 	    if (last == NULL) {
 		op->c1 = ret;
-		if (ret != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2930]) {
+		  if ((ret != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2930\n");
+		  else
+		    fprintf(stderr, "reached bug index 2930\n");
+		}
+		if ((!FIXREVERTER[2930] && (ret != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    ret->parent = op;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		ret = cur = op;
 	    } else {
 	        cur->c2 = op;
-		if (op != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2931]) {
+		  if ((op != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2931\n");
+		  else
+		    fprintf(stderr, "reached bug index 2931\n");
+		}
+		if ((!FIXREVERTER[2931] && (op != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    op->parent = cur;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		op->c1 = last;
-		if (last != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2932]) {
+		  if ((last != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2932\n");
+		  else
+		    fprintf(stderr, "reached bug index 2932\n");
+		}
+		if ((!FIXREVERTER[2932] && (last != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    last->parent = op;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		cur =op;
 		last = NULL;
 	    }
@@ -6645,27 +8803,72 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	    SKIP_BLANKS_PE;
 	    last = xmlParseElementChildrenContentDeclPriv(ctxt, inputid,
                                                           depth + 1);
-            if (last == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2933]) {
+              if ((last == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2933\n");
+              else
+                fprintf(stderr, "reached bug index 2933\n");
+            }
+            if ((!FIXREVERTER[2933] && (last == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
 		if (ret != NULL)
 		    xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    SKIP_BLANKS_PE;
 	} else {
 	    elem = xmlParseName(ctxt);
-	    if (elem == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2934]) {
+	      if ((elem == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2934\n");
+	      else
+	        fprintf(stderr, "reached bug index 2934\n");
+	    }
+	    if ((!FIXREVERTER[2934] && (elem == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFatalErr(ctxt, XML_ERR_ELEMCONTENT_NOT_STARTED, NULL);
 		if (ret != NULL)
 		    xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    last = xmlNewDocElementContent(ctxt->myDoc, elem, XML_ELEMENT_CONTENT_ELEMENT);
-	    if (last == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2935]) {
+	      if ((last == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2935\n");
+	      else
+	        fprintf(stderr, "reached bug index 2935\n");
+	    }
+	    if ((!FIXREVERTER[2935] && (last == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 xmlErrMemory(ctxt);
 		if (ret != NULL)
 		    xmlFreeDocElementContent(ctxt->myDoc, ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (RAW == '?') {
 		last->ocur = XML_ELEMENT_CONTENT_OPT;
 		NEXT;
@@ -6682,11 +8885,44 @@ xmlParseElementChildrenContentDeclPriv(xmlParserCtxtPtr ctxt, int inputchk,
 	SKIP_BLANKS_PE;
 	GROW;
     }
-    if ((cur != NULL) && (last != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2937]) {
+      fprintf(stderr, "reached bug index 2937\n");
+    }
+    if ((FIXREVERTER[2937] && (cur != (void *) 0 )) || (!FIXREVERTER[2937] && (cur != (void *) 0 && last != (void *) 0 ))
+    #else
+    if (cur != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(last != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2937\n");
+      #endif
+    
         cur->c2 = last;
-	if (last != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2936]) {
+	  if ((last != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2936\n");
+	  else
+	    fprintf(stderr, "reached bug index 2936\n");
+	}
+	if ((!FIXREVERTER[2936] && (last != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    last->parent = cur;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->input->id != inputchk) {
 	xmlFatalErrMsg(ctxt, XML_ERR_ENTITY_BOUNDARY,
                        "Element content declaration doesn't start and stop in"
@@ -6880,11 +9116,26 @@ xmlParseElementDecl(xmlParserCtxtPtr ctxt) {
 	    return(-1);
 	}
         name = xmlParseName(ctxt);
-	if (name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2938]) {
+	  if ((name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2938\n");
+	  else
+	    fprintf(stderr, "reached bug index 2938\n");
+	}
+	if ((!FIXREVERTER[2938] && (name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 			   "xmlParseElementDecl: no name for Element\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (SKIP_BLANKS_PE == 0) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_SPACE_REQUIRED,
 			   "Space required after the element name\n");
@@ -6930,8 +9181,23 @@ xmlParseElementDecl(xmlParserCtxtPtr ctxt) {
 	    NEXT;
 	    if ((ctxt->sax != NULL) && (!ctxt->disableSAX) &&
 		(ctxt->sax->elementDecl != NULL)) {
-		if (content != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2939]) {
+		  if ((content != (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 2939\n");
+		  else
+		    fprintf(stderr, "reached bug index 2939\n");
+		}
+		if ((!FIXREVERTER[2939] && (content != (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    content->parent = NULL;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	        ctxt->sax->elementDecl(ctxt->userData, name, ret,
 		                       content);
 		if ((content != NULL) && (content->parent == NULL)) {
@@ -6998,10 +9264,25 @@ xmlParseConditionalSections(xmlParserCtxtPtr ctxt) {
                     inputIdsSize = (inputIdsSize == 0 ? 4 : inputIdsSize * 2);
                     tmp = (int *) xmlRealloc(inputIds,
                             inputIdsSize * sizeof(int));
-                    if (tmp == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2940]) {
+                      if ((tmp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2940\n");
+                      else
+                        fprintf(stderr, "reached bug index 2940\n");
+                    }
+                    if ((!FIXREVERTER[2940] && (tmp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlErrMemory(ctxt);
                         goto error;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     inputIds = tmp;
                 }
                 inputIds[depth] = id;
@@ -7074,8 +9355,23 @@ xmlParseConditionalSections(xmlParserCtxtPtr ctxt) {
             goto error;
         }
 
-        if (depth == 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2943]) {
+          if ((depth == 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2943\n");
+          else
+            fprintf(stderr, "reached bug index 2943\n");
+        }
+        if ((!FIXREVERTER[2943] && (depth == 0 ))
+        #else
+        if (0
+        #endif
+        )
             break;
+            #ifdef FRCOV
+            }
+            #endif
 
         SKIP_BLANKS_PE;
         SHRINK;
@@ -7180,10 +9476,25 @@ xmlParseTextDecl(xmlParserCtxtPtr ctxt) {
     version = xmlParseVersionInfo(ctxt);
     if (version == NULL) {
 	version = xmlCharStrdup(XML_DEFAULT_VERSION);
-        if (version == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2944]) {
+          if ((version == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2944\n");
+          else
+            fprintf(stderr, "reached bug index 2944\n");
+        }
+        if ((!FIXREVERTER[2944] && (version == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlErrMemory(ctxt);
             return;
         }
+        #ifdef FRCOV
+        }
+        #endif
     } else {
 	if (SKIP_BLANKS == 0) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_SPACE_REQUIRED,
@@ -7242,10 +9553,25 @@ xmlParseExternalSubset(xmlParserCtxtPtr ctxt, const xmlChar *ExternalID,
     }
     if (ctxt->myDoc == NULL) {
         ctxt->myDoc = xmlNewDoc(BAD_CAST "1.0");
-	if (ctxt->myDoc == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2945]) {
+	  if ((ctxt -> myDoc == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2945\n");
+	  else
+	    fprintf(stderr, "reached bug index 2945\n");
+	}
+	if ((!FIXREVERTER[2945] && (ctxt -> myDoc == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->myDoc->properties = XML_DOC_INTERNAL;
     }
     if ((ctxt->myDoc != NULL) && (ctxt->myDoc->intSubset == NULL) &&
@@ -7313,8 +9639,23 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 	xmlChar out[16];
 	int value = xmlParseCharRef(ctxt);
 
-	if (value == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2946]) {
+	  if ((value == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2946\n");
+	  else
+	    fprintf(stderr, "reached bug index 2946\n");
+	}
+	if ((!FIXREVERTER[2946] && (value == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
         /*
          * Just encode the value in UTF-8
@@ -7331,10 +9672,37 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
      * We are seeing an entity reference
      */
     name = xmlParseEntityRefInternal(ctxt);
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2947]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2947\n");
+      else
+        fprintf(stderr, "reached bug index 2947\n");
+    }
+    if ((!FIXREVERTER[2947] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ent = xmlLookupGeneralEntity(ctxt, name, /* isAttr */ 0);
-    if (ent == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2948]) {
+      if ((ent == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2948\n");
+      else
+        fprintf(stderr, "reached bug index 2948\n");
+    }
+    if ((!FIXREVERTER[2948] && (ent == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
          * Create a reference for undeclared entities.
          */
@@ -7346,6 +9714,9 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
         }
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (!ctxt->wellFormed)
 	return;
 
@@ -7353,7 +9724,22 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
     if ((ent->name == NULL) ||
         (ent->etype == XML_INTERNAL_PREDEFINED_ENTITY)) {
 	val = ent->content;
-	if (val == NULL) return;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2949]) {
+	  if ((val == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2949\n");
+	  else
+	    fprintf(stderr, "reached bug index 2949\n");
+	}
+	if ((!FIXREVERTER[2949] && (val == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) return;
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	 * inline the entity.
 	 */
@@ -7439,7 +9825,22 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 	 */
         if (ctxt->sax->reference != NULL)
 	    ctxt->sax->reference(ctxt->userData, ent->name);
-    } else if ((ent->children != NULL) && (ctxt->node != NULL)) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[2951]) {
+      fprintf(stderr, "reached bug index 2951\n");
+    }
+    if ((FIXREVERTER[2951] && (ent -> children != (void *) 0 )) || (!FIXREVERTER[2951] && (ent -> children != (void *) 0 && ctxt -> node != (void *) 0 ))
+    #else
+    if (ent -> children != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> node != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2951\n");
+      #endif
+    
         xmlNodePtr copy, cur;
 
         /*
@@ -7497,10 +9898,25 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
 
             copy = xmlDocCopyNode(cur, ctxt->myDoc, 1);
 
-            if (copy == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2950]) {
+              if ((copy == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2950\n");
+              else
+                fprintf(stderr, "reached bug index 2950\n");
+            }
+            if ((!FIXREVERTER[2950] && (copy == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlErrMemory(ctxt);
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             if (ctxt->parseMode == XML_PARSE_READER) {
                 /* Needed for reader */
@@ -7522,6 +9938,9 @@ xmlParseReference(xmlParserCtxtPtr ctxt) {
             cur = cur->next;
         }
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 static void
@@ -7664,11 +10083,26 @@ xmlParseEntityRefInternal(xmlParserCtxtPtr ctxt) {
         return(NULL);
     NEXT;
     name = xmlParseName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2952]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2952\n");
+      else
+        fprintf(stderr, "reached bug index 2952\n");
+    }
+    if ((!FIXREVERTER[2952] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 		       "xmlParseEntityRef: no name\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (RAW != ';') {
 	xmlFatalErr(ctxt, XML_ERR_ENTITYREF_SEMICOL_MISSING, NULL);
 	return(NULL);
@@ -7746,12 +10180,27 @@ xmlParseStringEntityRef(xmlParserCtxtPtr ctxt, const xmlChar ** str) {
 
     ptr++;
     name = xmlParseStringName(ctxt, &ptr);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2955]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2955\n");
+      else
+        fprintf(stderr, "reached bug index 2955\n");
+    }
+    if ((!FIXREVERTER[2955] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 		       "xmlParseStringEntityRef: no name\n");
 	*str = ptr;
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (*ptr != ';') {
 	xmlFatalErr(ctxt, XML_ERR_ENTITYREF_SEMICOL_MISSING, NULL);
         xmlFree(name);
@@ -7807,10 +10256,25 @@ xmlParsePEReference(xmlParserCtxtPtr ctxt)
         return;
     NEXT;
     name = xmlParseName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2956]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2956\n");
+      else
+        fprintf(stderr, "reached bug index 2956\n");
+    }
+    if ((!FIXREVERTER[2956] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_PEREF_NO_NAME, "PEReference: no name\n");
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (RAW != ';') {
 	xmlFatalErr(ctxt, XML_ERR_PEREF_SEMICOL_MISSING, NULL);
         return;
@@ -7906,8 +10370,23 @@ xmlLoadEntityContent(xmlParserCtxtPtr ctxt, xmlEntityPtr entity) {
 
     input = xmlLoadExternalEntity((char *) entity->URI,
            (char *) entity->ExternalID, ctxt);
-    if (input == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2957]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2957\n");
+      else
+        fprintf(stderr, "reached bug index 2957\n");
+    }
+    if ((!FIXREVERTER[2957] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     oldinput = ctxt->input;
     oldinputNr = ctxt->inputNr;
@@ -7920,11 +10399,26 @@ xmlLoadEntityContent(xmlParserCtxtPtr ctxt, xmlEntityPtr entity) {
     ctxt->inputMax = 1;
     ctxt->encoding = NULL;
     ctxt->inputTab = xmlMalloc(sizeof(xmlParserInputPtr));
-    if (ctxt->inputTab == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2958]) {
+      if ((ctxt -> inputTab == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2958\n");
+      else
+        fprintf(stderr, "reached bug index 2958\n");
+    }
+    if ((!FIXREVERTER[2958] && (ctxt -> inputTab == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(ctxt);
         xmlFreeInputStream(input);
         goto error;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     xmlBufResetInput(input->buf->buffer, input);
 
@@ -7964,10 +10458,25 @@ xmlLoadEntityContent(xmlParserCtxtPtr ctxt, xmlEntityPtr entity) {
     length = xmlBufUse(input->buf->buffer);
     content = xmlBufDetach(input->buf->buffer);
 
-    if (length > INT_MAX) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2960]) {
+      if ((length > 2147483647 ) && !(0))
+        fprintf(stderr, "triggered bug index 2960\n");
+      else
+        fprintf(stderr, "reached bug index 2960\n");
+    }
+    if ((!FIXREVERTER[2960] && (length > 2147483647 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrMemory(ctxt);
         goto error;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     for (i = 0; i < length; ) {
         int clen = length - i;
@@ -8050,12 +10559,27 @@ xmlParseStringPEReference(xmlParserCtxtPtr ctxt, const xmlChar **str) {
         return(NULL);
     ptr++;
     name = xmlParseStringName(ctxt, &ptr);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2961]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2961\n");
+      else
+        fprintf(stderr, "reached bug index 2961\n");
+    }
+    if ((!FIXREVERTER[2961] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 		       "xmlParseStringPEReference: no name\n");
 	*str = ptr;
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur = *ptr;
     if (cur != ';') {
 	xmlFatalErr(ctxt, XML_ERR_ENTITYREF_SEMICOL_MISSING, NULL);
@@ -8281,11 +10805,26 @@ xmlParseAttribute(xmlParserCtxtPtr ctxt, xmlChar **value) {
     *value = NULL;
     GROW;
     name = xmlParseName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2962]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2962\n");
+      else
+        fprintf(stderr, "reached bug index 2962\n");
+    }
+    if ((!FIXREVERTER[2962] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 	               "error parsing attribute name\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * read the value
@@ -8376,11 +10915,26 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
     NEXT1;
 
     name = xmlParseName(ctxt);
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2963]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2963\n");
+      else
+        fprintf(stderr, "reached bug index 2963\n");
+    }
+    if ((!FIXREVERTER[2963] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 	     "xmlParseStartTag: invalid element name\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Now parse the attributes, it ends up with the ending
@@ -8394,8 +10948,23 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
 	   ((RAW != '/') || (NXT(1) != '>')) &&
 	   (IS_BYTE_CHAR(RAW))) && (PARSER_STOPPED(ctxt) == 0)) {
 	attname = xmlParseAttribute(ctxt, &attvalue);
-        if (attname == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2964]) {
+          if ((attname == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2964\n");
+          else
+            fprintf(stderr, "reached bug index 2964\n");
+        }
+        if ((!FIXREVERTER[2964] && (attname == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    break;
+	    #ifdef FRCOV
+	    }
+	    #endif
         if (attvalue != NULL) {
 	    /*
 	     * [ WFC: Unique Att Spec ]
@@ -8416,12 +10985,27 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
 	        maxatts = 22; /* allow for 10 attrs by default */
 	        atts = (const xmlChar **)
 		       xmlMalloc(maxatts * sizeof(xmlChar *));
-		if (atts == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2965]) {
+		  if ((atts == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2965\n");
+		  else
+		    fprintf(stderr, "reached bug index 2965\n");
+		}
+		if ((!FIXREVERTER[2965] && (atts == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlErrMemory(ctxt);
 		    if (attvalue != NULL)
 			xmlFree(attvalue);
 		    goto failed;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ctxt->atts = atts;
 		ctxt->maxatts = maxatts;
 	    } else if (nbatts + 4 > maxatts) {
@@ -8430,12 +11014,27 @@ xmlParseStartTag(xmlParserCtxtPtr ctxt) {
 	        maxatts *= 2;
 	        n = (const xmlChar **) xmlRealloc((void *) atts,
 					     maxatts * sizeof(const xmlChar *));
-		if (n == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2966]) {
+		  if ((n == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2966\n");
+		  else
+		    fprintf(stderr, "reached bug index 2966\n");
+		}
+		if ((!FIXREVERTER[2966] && (n == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlErrMemory(ctxt);
 		    if (attvalue != NULL)
 			xmlFree(attvalue);
 		    goto failed;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		atts = n;
 		ctxt->atts = atts;
 		ctxt->maxatts = maxatts;
@@ -8528,7 +11127,22 @@ xmlParseEndTag1(xmlParserCtxtPtr ctxt, int line) {
      *
      */
     if (name != (xmlChar*)1) {
-        if (name == NULL) name = BAD_CAST "unparsable";
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2967]) {
+          if ((name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2967\n");
+          else
+            fprintf(stderr, "reached bug index 2967\n");
+        }
+        if ((!FIXREVERTER[2967] && (name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) name = BAD_CAST "unparsable";
+        #ifdef FRCOV
+        }
+        #endif
         xmlFatalErrMsgStrIntStr(ctxt, XML_ERR_TAG_NAME_MISMATCH,
 		     "Opening and ending tag mismatch: %s line %d and %s\n",
 		                ctxt->name, line, name);
@@ -8619,10 +11233,25 @@ xmlParseQNameHashed(xmlParserCtxtPtr ctxt, xmlHashedString *prefix) {
             xmlFree(tmp);
         l = xmlDictLookupHashed(ctxt->dict, BASE_PTR + start,
                                 CUR_PTR - (BASE_PTR + start));
-        if (l.name == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2968]) {
+          if ((l . name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2968\n");
+          else
+            fprintf(stderr, "reached bug index 2968\n");
+        }
+        if ((!FIXREVERTER[2968] && (l . name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlErrMemory(ctxt);
             return(l);
         }
+        #ifdef FRCOV
+        }
+        #endif
         xmlNsErr(ctxt, XML_NS_ERR_QNAME,
                  "Failed to parse QName '%s'\n", l.name, NULL, NULL);
     }
@@ -8650,8 +11279,23 @@ xmlParseQName(xmlParserCtxtPtr ctxt, const xmlChar **prefix) {
     xmlHashedString n, p;
 
     n = xmlParseQNameHashed(ctxt, &p);
-    if (n.name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2969]) {
+      if ((n . name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2969\n");
+      else
+        fprintf(stderr, "reached bug index 2969\n");
+    }
+    if ((!FIXREVERTER[2969] && (n . name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     *prefix = p.name;
     return(n.name);
 }
@@ -8677,7 +11321,22 @@ xmlParseQNameAndCompare(xmlParserCtxtPtr ctxt, xmlChar const *name,
     const xmlChar *ret;
     const xmlChar *prefix2;
 
-    if (prefix == NULL) return(xmlParseNameAndCompare(ctxt, name));
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2970]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2970\n");
+      else
+        fprintf(stderr, "reached bug index 2970\n");
+    }
+    if ((!FIXREVERTER[2970] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(xmlParseNameAndCompare(ctxt, name));
+    #ifdef FRCOV
+    }
+    #endif
 
     GROW;
     in = ctxt->input->cur;
@@ -8705,8 +11364,23 @@ xmlParseQNameAndCompare(xmlParserCtxtPtr ctxt, xmlChar const *name,
      * all strings coms from the dictionary, equality can be done directly
      */
     ret = xmlParseQName (ctxt, &prefix2);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2971]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2971\n");
+      else
+        fprintf(stderr, "reached bug index 2971\n");
+    }
+    if ((!FIXREVERTER[2971] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if ((ret == name) && (prefix == prefix2))
 	return((const xmlChar*) 1);
     return ret;
@@ -8742,11 +11416,26 @@ xmlParseAttribute2(xmlParserCtxtPtr ctxt,
     *value = NULL;
     GROW;
     hname = xmlParseQNameHashed(ctxt, hprefix);
-    if (hname.name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2972]) {
+      if ((hname . name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2972\n");
+      else
+        fprintf(stderr, "reached bug index 2972\n");
+    }
+    if ((!FIXREVERTER[2972] && (hname . name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
                        "error parsing attribute name\n");
         return(hname);
     }
+    #ifdef FRCOV
+    }
+    #endif
     name = hname.name;
     if (hprefix->name != NULL)
         prefix = hprefix->name;
@@ -8777,8 +11466,23 @@ xmlParseAttribute2(xmlParserCtxtPtr ctxt,
                        (prefix == ctxt->str_xmlns));
         val = xmlParseAttValueInternal(ctxt, len, alloc, normalize,
                                        isNamespace);
-        if (val == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2974]) {
+          if ((val == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2974\n");
+          else
+            fprintf(stderr, "reached bug index 2974\n");
+        }
+        if ((!FIXREVERTER[2974] && (val == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     } else {
         xmlFatalErrMsgStr(ctxt, XML_ERR_ATTRIBUTE_WITHOUT_VALUE,
                           "Specification mandates value for attribute %s\n",
@@ -8794,8 +11498,23 @@ xmlParseAttribute2(xmlParserCtxtPtr ctxt,
          */
         if ((ctxt->pedantic) && (xmlStrEqual(name, BAD_CAST "lang"))) {
             internal_val = xmlStrndup(val, *len);
-            if (internal_val == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2975]) {
+              if ((internal_val == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2975\n");
+              else
+                fprintf(stderr, "reached bug index 2975\n");
+            }
+            if ((!FIXREVERTER[2975] && (internal_val == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
             if (!xmlCheckLanguageID(internal_val)) {
                 xmlWarningMsg(ctxt, XML_WAR_LANG_VALUE,
                               "Malformed value for xml:lang : %s\n",
@@ -8808,8 +11527,23 @@ xmlParseAttribute2(xmlParserCtxtPtr ctxt,
          */
         if (xmlStrEqual(name, BAD_CAST "space")) {
             internal_val = xmlStrndup(val, *len);
-            if (internal_val == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2976]) {
+              if ((internal_val == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2976\n");
+              else
+                fprintf(stderr, "reached bug index 2976\n");
+            }
+            if ((!FIXREVERTER[2976] && (internal_val == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
             if (xmlStrEqual(internal_val, BAD_CAST "default"))
                 *(ctxt->space) = 0;
             else if (xmlStrEqual(internal_val, BAD_CAST "preserve"))
@@ -8950,11 +11684,26 @@ xmlParseStartTag2(xmlParserCtxtPtr ctxt, const xmlChar **pref,
     }
 
     hlocalname = xmlParseQNameHashed(ctxt, &hprefix);
-    if (hlocalname.name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2977]) {
+      if ((hlocalname . name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2977\n");
+      else
+        fprintf(stderr, "reached bug index 2977\n");
+    }
+    if ((!FIXREVERTER[2977] && (hlocalname . name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFatalErrMsg(ctxt, XML_ERR_NAME_REQUIRED,
 		       "StartTag: invalid element name\n");
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     localname = hlocalname.name;
     prefix = hprefix.name;
 
@@ -8998,13 +11747,58 @@ xmlParseStartTag2(xmlParserCtxtPtr ctxt, const xmlChar **pref,
 	hattname = xmlParseAttribute2(ctxt, prefix, localname,
                                           &haprefix, &attvalue, &len,
                                           &alloc);
-        if (hattname.name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2978]) {
+          if ((hattname . name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2978\n");
+          else
+            fprintf(stderr, "reached bug index 2978\n");
+        }
+        if ((!FIXREVERTER[2978] && (hattname . name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    break;
-        if (attvalue == NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2979]) {
+          if ((attvalue == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2979\n");
+          else
+            fprintf(stderr, "reached bug index 2979\n");
+        }
+        if ((!FIXREVERTER[2979] && (attvalue == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto next_attr;
+            #ifdef FRCOV
+            }
+            #endif
         attname = hattname.name;
         aprefix = haprefix.name;
-	if (len < 0) len = xmlStrlen(attvalue);
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2980]) {
+	  if ((len < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2980\n");
+	  else
+	    fprintf(stderr, "reached bug index 2980\n");
+	}
+	if ((!FIXREVERTER[2980] && (len < 0 ))
+	#else
+	if (0
+	#endif
+	) len = xmlStrlen(attvalue);
+	#ifdef FRCOV
+	}
+	#endif
 
         if ((attname == ctxt->str_xmlns) && (aprefix == NULL)) {
             xmlHashedString huri;
@@ -9012,10 +11806,25 @@ xmlParseStartTag2(xmlParserCtxtPtr ctxt, const xmlChar **pref,
 
             huri = xmlDictLookupHashed(ctxt->dict, attvalue, len);
             uri = huri.name;
-            if (uri == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2981]) {
+              if ((uri == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2981\n");
+              else
+                fprintf(stderr, "reached bug index 2981\n");
+            }
+            if ((!FIXREVERTER[2981] && (uri == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlErrMemory(ctxt);
                 goto next_attr;
             }
+            #ifdef FRCOV
+            }
+            #endif
             if (*uri != 0) {
                 if (xmlParseURISafe((const char *) uri, &parsedUri) < 0) {
                     xmlErrMemory(ctxt);
@@ -9059,10 +11868,25 @@ xmlParseStartTag2(xmlParserCtxtPtr ctxt, const xmlChar **pref,
 
             huri = xmlDictLookupHashed(ctxt->dict, attvalue, len);
             uri = huri.name;
-            if (uri == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2982]) {
+              if ((uri == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2982\n");
+              else
+                fprintf(stderr, "reached bug index 2982\n");
+            }
+            if ((!FIXREVERTER[2982] && (uri == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlErrMemory(ctxt);
                 goto next_attr;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             if (attname == ctxt->str_xml) {
                 if (uri != ctxt->str_xml_ns) {
@@ -9162,10 +11986,28 @@ xmlParseStartTag2(xmlParserCtxtPtr ctxt, const xmlChar **pref,
         }
 
 next_attr:
-        if ((attvalue != NULL) && (alloc != 0)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2984]) {
+          fprintf(stderr, "reached bug index 2984\n");
+        }
+        if ((FIXREVERTER[2984] && (attvalue != (void *) 0 )) || (!FIXREVERTER[2984] && (attvalue != (void *) 0 && alloc != 0 ))
+        #else
+        if (attvalue != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(alloc != 0 ))
+            fprintf(stderr, "triggered bug index 2984\n");
+          #endif
+        
             xmlFree(attvalue);
             attvalue = NULL;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
 	GROW
 	if ((RAW == '>') || (((RAW == '/') && (NXT(1) == '>'))))
@@ -9257,10 +12099,25 @@ next_attr:
             xmlAttrHashBucket *tmp;
 
             tmp = xmlRealloc(ctxt->attrHash, attrHashSize * sizeof(tmp[0]));
-            if (tmp == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2985]) {
+              if ((tmp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2985\n");
+              else
+                fprintf(stderr, "reached bug index 2985\n");
+            }
+            if ((!FIXREVERTER[2985] && (tmp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlErrMemory(ctxt);
                 goto done;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             ctxt->attrHash = tmp;
             ctxt->attrHashMax = attrHashSize;
@@ -9299,8 +12156,23 @@ next_attr:
             hashValue = xmlDictCombineHash(nameHashValue, uriHashValue);
             res = xmlAttrHashInsert(ctxt, attrHashSize, attname, nsuri,
                                     hashValue, i);
-            if (res < 0)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2986]) {
+              if ((res < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2986\n");
+              else
+                fprintf(stderr, "reached bug index 2986\n");
+            }
+            if ((!FIXREVERTER[2986] && (res < 0 ))
+            #else
+            if (0
+            #endif
+            )
                 continue;
+                #ifdef FRCOV
+                }
+                #endif
 
             /*
              * [ WFC: Unique Att Spec ]
@@ -9375,8 +12247,23 @@ next_attr:
                                                    uriHashValue);
                     res = xmlAttrHashInsert(ctxt, attrHashSize, attname, nsuri,
                                             hashValue, nbatts);
-                    if (res < 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2987]) {
+                      if ((res < 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 2987\n");
+                      else
+                        fprintf(stderr, "reached bug index 2987\n");
+                    }
+                    if ((!FIXREVERTER[2987] && (res < 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         continue;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     if (res < INT_MAX) {
                         if (aprefix == atts[res+1])
                             continue;
@@ -9402,12 +12289,30 @@ next_attr:
                 atts[nbatts++] = (const xmlChar *) (ptrdiff_t) nsIndex;
                 atts[nbatts++] = attr->value.name;
                 atts[nbatts++] = attr->valueEnd;
-                if ((ctxt->standalone == 1) && (attr->external != 0)) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2988]) {
+                  fprintf(stderr, "reached bug index 2988\n");
+                }
+                if ((FIXREVERTER[2988] && (ctxt -> standalone == 1 )) || (!FIXREVERTER[2988] && (ctxt -> standalone == 1 && attr -> external != 0 ))
+                #else
+                if (ctxt -> standalone == 1 
+                #endif
+                ) {
+                  
+                #ifdef FRCOV
+                  if (!(attr -> external != 0 ))
+                    fprintf(stderr, "triggered bug index 2988\n");
+                  #endif
+                
                     xmlValidityError(ctxt, XML_DTD_STANDALONE_DEFAULTED,
                             "standalone: attribute %s on %s defaulted "
                             "from external subset\n",
                             attname, localname);
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 nbdef++;
 	    }
 	}
@@ -9517,7 +12422,22 @@ xmlParseEndTag2(xmlParserCtxtPtr ctxt, const xmlStartTag *tag) {
      *
      */
     if (name != (xmlChar*)1) {
-        if (name == NULL) name = BAD_CAST "unparsable";
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2989]) {
+          if ((name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2989\n");
+          else
+            fprintf(stderr, "reached bug index 2989\n");
+        }
+        if ((!FIXREVERTER[2989] && (name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) name = BAD_CAST "unparsable";
+        #ifdef FRCOV
+        }
+        #endif
         xmlFatalErrMsgStrIntStr(ctxt, XML_ERR_TAG_NAME_MISMATCH,
 		     "Opening and ending tag mismatch: %s line %d and %s\n",
 		                ctxt->name, tag->line, name);
@@ -9586,29 +12506,74 @@ xmlParseCDSect(xmlParserCtxtPtr ctxt) {
     NEXTL(sl);
     cur = CUR_CHAR(l);
     buf = (xmlChar *) xmlMallocAtomic(size);
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2990]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2990\n");
+      else
+        fprintf(stderr, "reached bug index 2990\n");
+    }
+    if ((!FIXREVERTER[2990] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(ctxt);
         goto out;
     }
+    #ifdef FRCOV
+    }
+    #endif
     while (IS_CHAR(cur) &&
            ((r != ']') || (s != ']') || (cur != '>'))) {
 	if (len + 5 >= size) {
 	    xmlChar *tmp;
 
 	    tmp = (xmlChar *) xmlRealloc(buf, size * 2);
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2991]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2991\n");
+	      else
+	        fprintf(stderr, "reached bug index 2991\n");
+	    }
+	    if ((!FIXREVERTER[2991] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrMemory(ctxt);
                 goto out;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = tmp;
 	    size *= 2;
 	}
 	COPY_BUF(buf, len, r);
-        if (len > maxLength) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2992]) {
+          if ((len > maxLength ) && !(0))
+            fprintf(stderr, "triggered bug index 2992\n");
+          else
+            fprintf(stderr, "reached bug index 2992\n");
+        }
+        if ((!FIXREVERTER[2992] && (len > maxLength ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFatalErrMsg(ctxt, XML_ERR_CDATA_NOT_FINISHED,
                            "CData section too big found\n");
             goto out;
         }
+        #ifdef FRCOV
+        }
+        #endif
 	r = s;
 	rl = sl;
 	s = cur;
@@ -9685,8 +12650,23 @@ xmlParseContentInternal(xmlParserCtxtPtr ctxt) {
 	 */
 	else if (*cur == '<') {
             if (NXT(1) == '/') {
-                if (ctxt->nameNr <= oldNameNr)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2993]) {
+                  if ((ctxt -> nameNr <= oldNameNr ) && !(0))
+                    fprintf(stderr, "triggered bug index 2993\n");
+                  else
+                    fprintf(stderr, "reached bug index 2993\n");
+                }
+                if ((!FIXREVERTER[2993] && (ctxt -> nameNr <= oldNameNr ))
+                #else
+                if (0
+                #endif
+                )
                     break;
+                    #ifdef FRCOV
+                    }
+                    #endif
 	        xmlParseElementEnd(ctxt);
             } else {
 	        xmlParseElementStart(ctxt);
@@ -9821,13 +12801,28 @@ xmlParseElementStart(xmlParserCtxtPtr ctxt) {
     xmlNodePtr cur;
     int nbNs = 0;
 
-    if (ctxt->nameNr > maxDepth) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2995]) {
+      if ((ctxt -> nameNr > maxDepth ) && !(0))
+        fprintf(stderr, "triggered bug index 2995\n");
+      else
+        fprintf(stderr, "reached bug index 2995\n");
+    }
+    if ((!FIXREVERTER[2995] && (ctxt -> nameNr > maxDepth ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErrMsgInt(ctxt, XML_ERR_RESOURCE_LIMIT,
                 "Excessive depth in document: %d use XML_PARSE_HUGE option\n",
                 ctxt->nameNr);
 	xmlHaltParser(ctxt);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /* Capture start position */
     if (ctxt->record_info) {
@@ -9852,10 +12847,25 @@ xmlParseElementStart(xmlParserCtxtPtr ctxt) {
     else
 	name = xmlParseStartTag(ctxt);
 #endif /* LIBXML_SAX1_ENABLED */
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2996]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2996\n");
+      else
+        fprintf(stderr, "reached bug index 2996\n");
+    }
+    if ((!FIXREVERTER[2996] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	spacePop(ctxt);
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     nameNsPush(ctxt, name, prefix, URI, line, nbNs);
     cur = ctxt->node;
 
@@ -9936,11 +12946,26 @@ static void
 xmlParseElementEnd(xmlParserCtxtPtr ctxt) {
     xmlNodePtr cur = ctxt->node;
 
-    if (ctxt->nameNr <= 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2997]) {
+      if ((ctxt -> nameNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2997\n");
+      else
+        fprintf(stderr, "reached bug index 2997\n");
+    }
+    if ((!FIXREVERTER[2997] && (ctxt -> nameNr <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if ((RAW == '<') && (NXT(1) == '/'))
             SKIP(2);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * parse the end of tag: '</' should be here.
@@ -9991,10 +13016,25 @@ xmlParseVersionNum(xmlParserCtxtPtr ctxt) {
     xmlChar cur;
 
     buf = (xmlChar *) xmlMallocAtomic(size);
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2998]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2998\n");
+      else
+        fprintf(stderr, "reached bug index 2998\n");
+    }
+    if ((!FIXREVERTER[2998] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrMemory(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur = CUR;
     if (!((cur >= '0') && (cur <= '9'))) {
 	xmlFree(buf);
@@ -10016,11 +13056,26 @@ xmlParseVersionNum(xmlParserCtxtPtr ctxt) {
 
 	    size *= 2;
 	    tmp = (xmlChar *) xmlRealloc(buf, size);
-	    if (tmp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2999]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2999\n");
+	      else
+	        fprintf(stderr, "reached bug index 2999\n");
+	    }
+	    if ((!FIXREVERTER[2999] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlFree(buf);
 		xmlErrMemory(ctxt);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    buf = tmp;
 	}
 	buf[len++] = cur;
@@ -10106,10 +13161,25 @@ xmlParseEncName(xmlParserCtxtPtr ctxt) {
     if (((cur >= 'a') && (cur <= 'z')) ||
         ((cur >= 'A') && (cur <= 'Z'))) {
 	buf = (xmlChar *) xmlMallocAtomic(size);
-	if (buf == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3000]) {
+	  if ((buf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3000\n");
+	  else
+	    fprintf(stderr, "reached bug index 3000\n");
+	}
+	if ((!FIXREVERTER[3000] && (buf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrMemory(ctxt);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	buf[len++] = cur;
 	NEXT;
@@ -10124,19 +13194,49 @@ xmlParseEncName(xmlParserCtxtPtr ctxt) {
 
 		size *= 2;
 		tmp = (xmlChar *) xmlRealloc(buf, size);
-		if (tmp == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3001]) {
+		  if ((tmp == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3001\n");
+		  else
+		    fprintf(stderr, "reached bug index 3001\n");
+		}
+		if ((!FIXREVERTER[3001] && (tmp == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlErrMemory(ctxt);
 		    xmlFree(buf);
 		    return(NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		buf = tmp;
 	    }
 	    buf[len++] = cur;
-            if (len > maxLength) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3002]) {
+              if ((len > maxLength ) && !(0))
+                fprintf(stderr, "triggered bug index 3002\n");
+              else
+                fprintf(stderr, "reached bug index 3002\n");
+            }
+            if ((!FIXREVERTER[3002] && (len > maxLength ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "EncName");
                 xmlFree(buf);
                 return(NULL);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    NEXT;
 	    cur = CUR;
         }
@@ -10200,8 +13300,23 @@ xmlParseEncodingDecl(xmlParserCtxtPtr ctxt) {
         xmlFatalErr(ctxt, XML_ERR_STRING_NOT_STARTED, NULL);
     }
 
-    if (encoding == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3003]) {
+      if ((encoding == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3003\n");
+      else
+        fprintf(stderr, "reached bug index 3003\n");
+    }
+    if ((!FIXREVERTER[3003] && (encoding == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlSetDeclaredEncoding(ctxt, encoding);
 
@@ -10483,8 +13598,23 @@ xmlFinishDocument(xmlParserCtxtPtr ctxt) {
 
 int
 xmlParseDocument(xmlParserCtxtPtr ctxt) {
-    if ((ctxt == NULL) || (ctxt->input == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3004]) {
+      if ((ctxt == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3004\n");
+      else
+        fprintf(stderr, "reached bug index 3004\n");
+    }
+    if ((!FIXREVERTER[3004] && (ctxt == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     GROW;
 
@@ -10518,10 +13648,25 @@ xmlParseDocument(xmlParserCtxtPtr ctxt) {
 	SKIP_BLANKS;
     } else {
 	ctxt->version = xmlCharStrdup(XML_DEFAULT_VERSION);
-        if (ctxt->version == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3005]) {
+          if ((ctxt -> version == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3005\n");
+          else
+            fprintf(stderr, "reached bug index 3005\n");
+        }
+        if ((!FIXREVERTER[3005] && (ctxt -> version == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlErrMemory(ctxt);
             return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     if ((ctxt->sax) && (ctxt->sax->startDocument) && (!ctxt->disableSAX))
         ctxt->sax->startDocument(ctxt->userData);
@@ -10703,10 +13848,25 @@ xmlParseLookupChar(xmlParserCtxtPtr ctxt, int c) {
     if (memchr(cur, c, ctxt->input->end - cur) == NULL) {
         size_t index = ctxt->input->end - ctxt->input->cur;
 
-        if (index > LONG_MAX) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3007]) {
+          if ((index > 9223372036854775807 ) && !(0))
+            fprintf(stderr, "triggered bug index 3007\n");
+          else
+            fprintf(stderr, "reached bug index 3007\n");
+        }
+        if ((!FIXREVERTER[3007] && (index > 9223372036854775807 ))
+        #else
+        if (0
+        #endif
+        ) {
             ctxt->checkIndex = 0;
             return(1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->checkIndex = index;
         return(0);
     } else {
@@ -10746,10 +13906,25 @@ xmlParseLookupString(xmlParserCtxtPtr ctxt, size_t startDelta,
         else
             end -= strLen - 1;
         index = end - ctxt->input->cur;
-        if (index > LONG_MAX) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3008]) {
+          if ((index > 9223372036854775807 ) && !(0))
+            fprintf(stderr, "triggered bug index 3008\n");
+          else
+            fprintf(stderr, "reached bug index 3008\n");
+        }
+        if ((!FIXREVERTER[3008] && (index > 9223372036854775807 ))
+        #else
+        if (0
+        #endif
+        ) {
             ctxt->checkIndex = 0;
             return(ctxt->input->end - strLen);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->checkIndex = index;
     } else {
         ctxt->checkIndex = 0;
@@ -10779,10 +13954,25 @@ xmlParseLookupCharData(xmlParserCtxtPtr ctxt) {
     }
 
     index = cur - ctxt->input->cur;
-    if (index > LONG_MAX) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3009]) {
+      if ((index > 9223372036854775807 ) && !(0))
+        fprintf(stderr, "triggered bug index 3009\n");
+      else
+        fprintf(stderr, "reached bug index 3009\n");
+    }
+    if ((!FIXREVERTER[3009] && (index > 9223372036854775807 ))
+    #else
+    if (0
+    #endif
+    ) {
         ctxt->checkIndex = 0;
         return(1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->checkIndex = index;
     return(0);
 }
@@ -10821,11 +14011,26 @@ xmlParseLookupGt(xmlParserCtxtPtr ctxt) {
     }
 
     index = cur - ctxt->input->cur;
-    if (index > LONG_MAX) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3010]) {
+      if ((index > 9223372036854775807 ) && !(0))
+        fprintf(stderr, "triggered bug index 3010\n");
+      else
+        fprintf(stderr, "reached bug index 3010\n");
+    }
+    if ((!FIXREVERTER[3010] && (index > 9223372036854775807 ))
+    #else
+    if (0
+    #endif
+    ) {
         ctxt->checkIndex = 0;
         ctxt->endCheckState = 0;
         return(1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->checkIndex = index;
     ctxt->endCheckState = state;
     return(0);
@@ -10931,11 +14136,26 @@ xmlParseLookupInternalSubset(xmlParserCtxtPtr ctxt) {
             cur -= 3;
     }
     index = cur - ctxt->input->cur;
-    if (index > LONG_MAX) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3011]) {
+      if ((index > 9223372036854775807 ) && !(0))
+        fprintf(stderr, "triggered bug index 3011\n");
+      else
+        fprintf(stderr, "reached bug index 3011\n");
+    }
+    if ((!FIXREVERTER[3011] && (index > 9223372036854775807 ))
+    #else
+    if (0
+    #endif
+    ) {
         ctxt->checkIndex = 0;
         ctxt->endCheckState = 0;
         return(1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->checkIndex = index;
     ctxt->endCheckState = state;
     return(0);
@@ -10958,8 +14178,23 @@ xmlCheckCdataPush(const xmlChar *utf, int len, int complete) {
     unsigned char c;
     int codepoint;
 
-    if ((utf == NULL) || (len <= 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3012]) {
+      if ((utf == (void *) 0 ) && !(len <= 0 ))
+        fprintf(stderr, "triggered bug index 3012\n");
+      else
+        fprintf(stderr, "reached bug index 3012\n");
+    }
+    if ((FIXREVERTER[3012] && (len <= 0 )) || (!FIXREVERTER[3012] && (utf == (void *) 0 || len <= 0 ))
+    #else
+    if (len <= 0 
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     for (ix = 0; ix < len;) {      /* string is 0-terminated */
         c = utf[ix];
@@ -10971,7 +14206,22 @@ xmlCheckCdataPush(const xmlChar *utf, int len, int complete) {
 	    else
 	        return(-ix);
 	} else if ((c & 0xe0) == 0xc0) {/* 2-byte code, starts with 110 */
-	    if (ix + 2 > len) return(complete ? -ix : ix);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3013]) {
+	      if ((ix + 2 > len ) && !(0))
+	        fprintf(stderr, "triggered bug index 3013\n");
+	      else
+	        fprintf(stderr, "reached bug index 3013\n");
+	    }
+	    if ((!FIXREVERTER[3013] && (ix + 2 > len ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(complete ? -ix : ix);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if ((utf[ix+1] & 0xc0 ) != 0x80)
 	        return(-ix);
 	    codepoint = (utf[ix] & 0x1f) << 6;
@@ -10980,7 +14230,22 @@ xmlCheckCdataPush(const xmlChar *utf, int len, int complete) {
 	        return(-ix);
 	    ix += 2;
 	} else if ((c & 0xf0) == 0xe0) {/* 3-byte code, starts with 1110 */
-	    if (ix + 3 > len) return(complete ? -ix : ix);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3014]) {
+	      if ((ix + 3 > len ) && !(0))
+	        fprintf(stderr, "triggered bug index 3014\n");
+	      else
+	        fprintf(stderr, "reached bug index 3014\n");
+	    }
+	    if ((!FIXREVERTER[3014] && (ix + 3 > len ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(complete ? -ix : ix);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (((utf[ix+1] & 0xc0) != 0x80) ||
 	        ((utf[ix+2] & 0xc0) != 0x80))
 		    return(-ix);
@@ -10991,7 +14256,22 @@ xmlCheckCdataPush(const xmlChar *utf, int len, int complete) {
 	        return(-ix);
 	    ix += 3;
 	} else if ((c & 0xf8) == 0xf0) {/* 4-byte code, starts with 11110 */
-	    if (ix + 4 > len) return(complete ? -ix : ix);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3015]) {
+	      if ((ix + 4 > len ) && !(0))
+	        fprintf(stderr, "triggered bug index 3015\n");
+	      else
+	        fprintf(stderr, "reached bug index 3015\n");
+	    }
+	    if ((!FIXREVERTER[3015] && (ix + 4 > len ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(complete ? -ix : ix);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (((utf[ix+1] & 0xc0) != 0x80) ||
 	        ((utf[ix+2] & 0xc0) != 0x80) ||
 		((utf[ix+3] & 0xc0) != 0x80))
@@ -11024,8 +14304,23 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
     size_t avail;
     xmlChar cur, next;
 
-    if (ctxt->input == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3016]) {
+      if ((ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3016\n");
+      else
+        fprintf(stderr, "reached bug index 3016\n");
+    }
+    if ((!FIXREVERTER[3016] && (ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((ctxt->input != NULL) &&
         (ctxt->input->cur - ctxt->input->base > 4096)) {
@@ -11079,17 +14374,47 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
 			xmlParseXMLDecl(ctxt);
 		    } else {
 			ctxt->version = xmlCharStrdup(XML_DEFAULT_VERSION);
-                        if (ctxt->version == NULL) {
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[3018]) {
+                          if ((ctxt -> version == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 3018\n");
+                          else
+                            fprintf(stderr, "reached bug index 3018\n");
+                        }
+                        if ((!FIXREVERTER[3018] && (ctxt -> version == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        ) {
                             xmlErrMemory(ctxt);
                             break;
                         }
+                        #ifdef FRCOV
+                        }
+                        #endif
 		    }
 		} else {
 		    ctxt->version = xmlCharStrdup(XML_DEFAULT_VERSION);
-		    if (ctxt->version == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[3019]) {
+		      if ((ctxt -> version == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 3019\n");
+		      else
+		        fprintf(stderr, "reached bug index 3019\n");
+		    }
+		    if ((!FIXREVERTER[3019] && (ctxt -> version == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 		        xmlErrMemory(ctxt);
 			break;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		}
                 if ((ctxt->sax) && (ctxt->sax->setDocumentLocator)) {
                     xmlSAXLocator copy = xmlDefaultSAXLocator;
@@ -11321,11 +14646,26 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
                         size = XML_PARSER_BIG_BUFFER_SIZE;
                     }
                     tmp = xmlCheckCdataPush(ctxt->input->cur, size, 0);
-                    if (tmp <= 0) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3021]) {
+                      if ((tmp <= 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3021\n");
+                      else
+                        fprintf(stderr, "reached bug index 3021\n");
+                    }
+                    if ((!FIXREVERTER[3021] && (tmp <= 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         tmp = -tmp;
                         ctxt->input->cur += tmp;
                         goto encoding_error;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     if ((ctxt->sax != NULL) && (!ctxt->disableSAX)) {
                         if (ctxt->sax->cdataBlock != NULL)
                             ctxt->sax->cdataBlock(ctxt->userData,
@@ -11340,11 +14680,26 @@ xmlParseTryOrFinish(xmlParserCtxtPtr ctxt, int terminate) {
 		    int tmp;
 
 		    tmp = xmlCheckCdataPush(ctxt->input->cur, base, 1);
-		    if ((tmp < 0) || (tmp != base)) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[3022]) {
+		      if ((tmp < 0 || tmp != base ) && !(0))
+		        fprintf(stderr, "triggered bug index 3022\n");
+		      else
+		        fprintf(stderr, "reached bug index 3022\n");
+		    }
+		    if ((!FIXREVERTER[3022] && (tmp < 0 || tmp != base ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			tmp = -tmp;
 			ctxt->input->cur += tmp;
 			goto encoding_error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    if ((ctxt->sax != NULL) && (base == 0) &&
 		        (ctxt->sax->cdataBlock != NULL) &&
 		        (!ctxt->disableSAX)) {
@@ -11512,12 +14867,57 @@ xmlParseChunk(xmlParserCtxtPtr ctxt, const char *chunk, int size,
     size_t maxLength;
     int end_in_lf = 0;
 
-    if ((ctxt == NULL) || (size < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3024]) {
+      if ((ctxt == (void *) 0 || size < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3024\n");
+      else
+        fprintf(stderr, "reached bug index 3024\n");
+    }
+    if ((!FIXREVERTER[3024] && (ctxt == (void *) 0 || size < 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ERR_ARGUMENT);
-    if (ctxt->disableSAX != 0)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3025]) {
+      if ((ctxt -> disableSAX != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3025\n");
+      else
+        fprintf(stderr, "reached bug index 3025\n");
+    }
+    if ((!FIXREVERTER[3025] && (ctxt -> disableSAX != 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(ctxt->errNo);
-    if (ctxt->input == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3026]) {
+      if ((ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3026\n");
+      else
+        fprintf(stderr, "reached bug index 3026\n");
+    }
+    if ((!FIXREVERTER[3026] && (ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ERR_INTERNAL_ERROR);
+        #ifdef FRCOV
+        }
+        #endif
 
     ctxt->input->flags |= XML_INPUT_PROGRESSIVE;
     if (ctxt->instate == XML_PARSER_START)
@@ -11638,17 +15038,47 @@ xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data,
     xmlParserInputPtr input;
 
     ctxt = xmlNewSAXParserCtxt(sax, user_data);
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3029]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3029\n");
+      else
+        fprintf(stderr, "reached bug index 3029\n");
+    }
+    if ((!FIXREVERTER[3029] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ctxt->options &= ~XML_PARSE_NODICT;
     ctxt->dictNames = 1;
 
     input = xmlNewInputPush(ctxt, filename, chunk, size, NULL);
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3030]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3030\n");
+      else
+        fprintf(stderr, "reached bug index 3030\n");
+    }
+    if ((!FIXREVERTER[3030] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserCtxt(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     inputPush(ctxt, input);
 
     return(ctxt);
@@ -11663,11 +15093,41 @@ xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data,
  */
 void
 xmlStopParser(xmlParserCtxtPtr ctxt) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3031]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3031\n");
+      else
+        fprintf(stderr, "reached bug index 3031\n");
+    }
+    if ((!FIXREVERTER[3031] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     xmlHaltParser(ctxt);
-    if (ctxt->errNo != XML_ERR_NO_MEMORY)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3032]) {
+      if ((ctxt -> errNo != XML_ERR_NO_MEMORY  ) && !(0))
+        fprintf(stderr, "triggered bug index 3032\n");
+      else
+        fprintf(stderr, "reached bug index 3032\n");
+    }
+    if ((!FIXREVERTER[3032] && (ctxt -> errNo != XML_ERR_NO_MEMORY  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->errNo = XML_ERR_USER_STOP;
+        #ifdef FRCOV
+        }
+        #endif
 }
 
 /**
@@ -11949,10 +15409,25 @@ xmlCtxtParseContent(xmlParserCtxtPtr ctxt, xmlParserInputPtr input,
 
     if (buildTree) {
         root = xmlNewDocNode(ctxt->myDoc, NULL, rootName, NULL);
-        if (root == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3042]) {
+          if ((root == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3042\n");
+          else
+            fprintf(stderr, "reached bug index 3042\n");
+        }
+        if ((!FIXREVERTER[3042] && (root == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlErrMemory(ctxt);
             goto error;
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
 
     if (xmlPushInput(ctxt, input) < 0)
@@ -12061,8 +15536,23 @@ xmlCtxtParseEntity(xmlParserCtxtPtr ctxt, xmlEntityPtr ent) {
      * Load entity
      */
     input = xmlNewEntityInputStream(ctxt, ent);
-    if (input == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3043]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3043\n");
+      else
+        fprintf(stderr, "reached bug index 3043\n");
+    }
+    if ((!FIXREVERTER[3043] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * When building a tree, we need to limit the scope of namespace
@@ -12122,8 +15612,23 @@ xmlCtxtParseEntity(xmlParserCtxtPtr ctxt, xmlEntityPtr ent) {
 
         while (list != NULL) {
             list->parent = (xmlNodePtr) ent;
-            if (list->next == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3044]) {
+              if ((list -> next == (void *) 0  ) && !(0))
+                fprintf(stderr, "triggered bug index 3044\n");
+              else
+                fprintf(stderr, "reached bug index 3044\n");
+            }
+            if ((!FIXREVERTER[3044] && (list -> next == (void *) 0  ))
+            #else
+            if (0
+            #endif
+            )
                 ent->last = list;
+                #ifdef FRCOV
+                }
+                #endif
             list = list->next;
         }
     } else {
@@ -13234,8 +16739,23 @@ xmlCtxtReset(xmlParserCtxtPtr ctxt)
     xmlParserInputPtr input;
     xmlDictPtr dict;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3081]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3081\n");
+      else
+        fprintf(stderr, "reached bug index 3081\n");
+    }
+    if ((!FIXREVERTER[3081] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     dict = ctxt->dict;
 
@@ -13356,8 +16876,23 @@ xmlCtxtSetOptionsInternal(xmlParserCtxtPtr ctxt, int options, int keepMask)
 {
     int allMask;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3084]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3084\n");
+      else
+        fprintf(stderr, "reached bug index 3084\n");
+    }
+    if ((!FIXREVERTER[3084] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * XInclude options aren't handled by the parser.
@@ -13674,8 +17209,23 @@ xmlCtxtParseDocument(xmlParserCtxtPtr ctxt, xmlParserInputPtr input)
 {
     xmlDocPtr ret = NULL;
 
-    if ((ctxt == NULL) || (input == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3085]) {
+      if ((ctxt == (void *) 0 || input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3085\n");
+      else
+        fprintf(stderr, "reached bug index 3085\n");
+    }
+    if ((!FIXREVERTER[3085] && (ctxt == (void *) 0 || input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     /* assert(ctxt->inputNr == 0); */
     while (ctxt->inputNr > 0)
@@ -13948,8 +17498,23 @@ xmlCtxtReadFile(xmlParserCtxtPtr ctxt, const char *filename,
 {
     xmlParserInputPtr input;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3093]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3093\n");
+      else
+        fprintf(stderr, "reached bug index 3093\n");
+    }
+    if ((!FIXREVERTER[3093] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlCtxtReset(ctxt);
     xmlCtxtUseOptions(ctxt, options);
@@ -13984,8 +17549,23 @@ xmlCtxtReadMemory(xmlParserCtxtPtr ctxt, const char *buffer, int size,
 {
     xmlParserInputPtr input;
 
-    if ((ctxt == NULL) || (size < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3094]) {
+      if ((ctxt == (void *) 0 || size < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3094\n");
+      else
+        fprintf(stderr, "reached bug index 3094\n");
+    }
+    if ((!FIXREVERTER[3094] && (ctxt == (void *) 0 || size < 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlCtxtReset(ctxt);
     xmlCtxtUseOptions(ctxt, options);
diff --git a/parserInternals.c b/parserInternals.c
index a2fe5aad..fb8c3283 100644
--- a/parserInternals.c
+++ b/parserInternals.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * parserInternals.c : Internal routines (and obsolete ones) needed for the
  *                     XML and HTML parsers.
@@ -115,8 +119,23 @@ void
 xmlCtxtSetErrorHandler(xmlParserCtxtPtr ctxt, xmlStructuredErrorFunc handler,
                        void *data)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[435]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 435\n");
+      else
+        fprintf(stderr, "reached bug index 435\n");
+    }
+    if ((!FIXREVERTER[435] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->errorHandler = handler;
     ctxt->errorCtxt = data;
 }
@@ -173,8 +192,23 @@ xmlCtxtErrIO(xmlParserCtxtPtr ctxt, int code, const char *uri)
     const char *errstr, *msg, *str1, *str2;
     xmlErrorLevel level;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[436]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 436\n");
+      else
+        fprintf(stderr, "reached bug index 436\n");
+    }
+    if ((!FIXREVERTER[436] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Don't report a well-formedness error if an external entity could
@@ -245,16 +279,61 @@ xmlCtxtVErr(xmlParserCtxtPtr ctxt, xmlNodePtr node, xmlErrorDomain domain,
         return;
     }
 
-    if (PARSER_STOPPED(ctxt))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[437]) {
+      if ((ctxt -> disableSAX > 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 437\n");
+      else
+        fprintf(stderr, "reached bug index 437\n");
+    }
+    if ((!FIXREVERTER[437] && (ctxt -> disableSAX > 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (level == XML_ERR_WARNING) {
-        if (ctxt->nbWarnings >= XML_MAX_ERRORS)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[438]) {
+          if ((ctxt -> nbWarnings >= 100 ) && !(0))
+            fprintf(stderr, "triggered bug index 438\n");
+          else
+            fprintf(stderr, "reached bug index 438\n");
+        }
+        if ((!FIXREVERTER[438] && (ctxt -> nbWarnings >= 100 ))
+        #else
+        if (0
+        #endif
+        )
             return;
+            #ifdef FRCOV
+            }
+            #endif
         ctxt->nbWarnings += 1;
     } else {
-        if (ctxt->nbErrors >= XML_MAX_ERRORS)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[439]) {
+          if ((ctxt -> nbErrors >= 100 ) && !(0))
+            fprintf(stderr, "triggered bug index 439\n");
+          else
+            fprintf(stderr, "reached bug index 439\n");
+        }
+        if ((!FIXREVERTER[439] && (ctxt -> nbErrors >= 100 ))
+        #else
+        if (0
+        #endif
+        )
             return;
+            #ifdef FRCOV
+            }
+            #endif
         ctxt->nbErrors += 1;
     }
 
@@ -309,8 +388,23 @@ xmlCtxtVErr(xmlParserCtxtPtr ctxt, xmlNodePtr node, xmlErrorDomain domain,
         ctxt->errNo = code;
     if (level == XML_ERR_FATAL) {
         ctxt->wellFormed = 0;
-        if (ctxt->recovery == 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[441]) {
+          if ((ctxt -> recovery == 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 441\n");
+          else
+            fprintf(stderr, "reached bug index 441\n");
+        }
+        if ((!FIXREVERTER[441] && (ctxt -> recovery == 0  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->disableSAX = 1;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     return;
@@ -409,8 +503,23 @@ xmlIsLetter(int c) {
  */
 void
 xmlHaltParser(xmlParserCtxtPtr ctxt) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[442]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 442\n");
+      else
+        fprintf(stderr, "reached bug index 442\n");
+    }
+    if ((!FIXREVERTER[442] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->instate = XML_PARSER_EOF; /* TODO: Remove after refactoring */
     ctxt->disableSAX = 2;
 }
@@ -448,23 +557,68 @@ xmlParserGrow(xmlParserCtxtPtr ctxt) {
                        XML_MAX_LOOKUP_LIMIT;
     int ret;
 
-    if (buf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[443]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 443\n");
+      else
+        fprintf(stderr, "reached bug index 443\n");
+    }
+    if ((!FIXREVERTER[443] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     /* Don't grow push parser buffer. */
     if (PARSER_PROGRESSIVE(ctxt))
         return(0);
     /* Don't grow memory buffers. */
     if ((buf->encoder == NULL) && (buf->readcallback == NULL))
         return(0);
-    if (buf->error != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[444]) {
+      if ((buf -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 444\n");
+      else
+        fprintf(stderr, "reached bug index 444\n");
+    }
+    if ((!FIXREVERTER[444] && (buf -> error != 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
-
-    if (curBase > maxLength) {
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[445]) {
+      if ((curBase > maxLength ) && !(0))
+        fprintf(stderr, "triggered bug index 445\n");
+      else
+        fprintf(stderr, "reached bug index 445\n");
+    }
+    if ((!FIXREVERTER[445] && (curBase > maxLength ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErr(ctxt, XML_ERR_RESOURCE_LIMIT,
                     "Buffer size limit exceeded, try XML_PARSE_HUGE\n");
         xmlHaltParser(ctxt);
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (curEnd >= INPUT_CHUNK)
         return(0);
@@ -538,8 +692,23 @@ xmlParserShrink(xmlParserCtxtPtr ctxt) {
     xmlParserInputBufferPtr buf = in->buf;
     size_t used;
 
-    if (buf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[451]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 451\n");
+      else
+        fprintf(stderr, "reached bug index 451\n");
+    }
+    if ((!FIXREVERTER[451] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     /* Don't shrink pull parser memory buffers. */
     if ((!PARSER_PROGRESSIVE(ctxt)) &&
         (buf->encoder == NULL) &&
@@ -641,8 +810,23 @@ xmlNextChar(xmlParserCtxtPtr ctxt)
     size_t avail;
     int c;
 
-    if ((ctxt == NULL) || (ctxt->input == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[456]) {
+      if ((ctxt == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 456\n");
+      else
+        fprintf(stderr, "reached bug index 456\n");
+    }
+    if ((!FIXREVERTER[456] && (ctxt == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     avail = ctxt->input->end - ctxt->input->cur;
 
@@ -748,7 +932,22 @@ xmlCurrentChar(xmlParserCtxtPtr ctxt, int *len) {
     size_t avail;
     int c;
 
-    if ((ctxt == NULL) || (len == NULL) || (ctxt->input == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[459]) {
+      if ((ctxt == (void *) 0 || len == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 459\n");
+      else
+        fprintf(stderr, "reached bug index 459\n");
+    }
+    if ((!FIXREVERTER[459] && (ctxt == (void *) 0 || len == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     avail = ctxt->input->end - ctxt->input->cur;
 
@@ -809,8 +1008,23 @@ xmlCurrentChar(xmlParserCtxtPtr ctxt, int *len) {
 
         if (c < 0xe0) {
             /* 2-byte code */
-            if (c < 0xc2)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[461]) {
+              if ((c < 194 ) && !(0))
+                fprintf(stderr, "triggered bug index 461\n");
+              else
+                fprintf(stderr, "reached bug index 461\n");
+            }
+            if ((!FIXREVERTER[461] && (c < 194 ))
+            #else
+            if (0
+            #endif
+            )
                 goto encoding_error;
+                #ifdef FRCOV
+                }
+                #endif
             val = (c & 0x1f) << 6;
             val |= cur[1] & 0x3f;
             *len = 2;
@@ -839,8 +1053,23 @@ xmlCurrentChar(xmlParserCtxtPtr ctxt, int *len) {
                 val |= (cur[1] & 0x3f) << 12;
                 val |= (cur[2] & 0x3f) << 6;
                 val |= cur[3] & 0x3f;
-                if ((val < 0x10000) || (val >= 0x110000))
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[464]) {
+                  if ((val < 65536 || val >= 1114112 ) && !(0))
+                    fprintf(stderr, "triggered bug index 464\n");
+                  else
+                    fprintf(stderr, "reached bug index 464\n");
+                }
+                if ((!FIXREVERTER[464] && (val < 65536 || val >= 1114112 ))
+                #else
+                if (0
+                #endif
+                )
                     goto encoding_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 *len = 4;
             }
         }
@@ -887,8 +1116,23 @@ xmlStringCurrentChar(xmlParserCtxtPtr ctxt ATTRIBUTE_UNUSED,
                      const xmlChar *cur, int *len) {
     int c;
 
-    if ((cur == NULL) || (len == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[465]) {
+      if ((cur == (void *) 0 || len == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 465\n");
+      else
+        fprintf(stderr, "reached bug index 465\n");
+    }
+    if ((!FIXREVERTER[465] && (cur == (void *) 0 || len == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     /* cur is zero-terminated, so we can lie about its length. */
     *len = 4;
@@ -908,7 +1152,22 @@ xmlStringCurrentChar(xmlParserCtxtPtr ctxt ATTRIBUTE_UNUSED,
  */
 int
 xmlCopyCharMultiByte(xmlChar *out, int val) {
-    if ((out == NULL) || (val < 0)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[466]) {
+      if ((out == (void *) 0 || val < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 466\n");
+      else
+        fprintf(stderr, "reached bug index 466\n");
+    }
+    if ((!FIXREVERTER[466] && (out == (void *) 0 || val < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     /*
      * We are supposed to handle UTF8, check it's valid
      * From rfc2044: encoding of the Unicode values on UTF-8:
@@ -980,8 +1239,23 @@ xmlDetectEBCDIC(xmlParserInputPtr input, xmlCharEncodingHandlerPtr *hout) {
      * to EBCDIC-US and try to find the encoding declaration.
      */
     res = xmlLookupCharEncodingHandler(XML_CHAR_ENCODING_EBCDIC, &handler);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[469]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 469\n");
+      else
+        fprintf(stderr, "reached bug index 469\n");
+    }
+    if ((!FIXREVERTER[469] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(res);
+        #ifdef FRCOV
+        }
+        #endif
     outlen = sizeof(out) - 1;
     inlen = input->end - input->cur;
     res = xmlEncInputChunk(handler, out, &outlen, input->cur, &inlen);
@@ -989,8 +1263,23 @@ xmlDetectEBCDIC(xmlParserInputPtr input, xmlCharEncodingHandlerPtr *hout) {
      * Return the EBCDIC handler if decoding failed. The error will
      * be reported later.
      */
-    if (res < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[470]) {
+      if ((res < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 470\n");
+      else
+        fprintf(stderr, "reached bug index 470\n");
+    }
+    if ((!FIXREVERTER[470] && (res < 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto done;
+        #ifdef FRCOV
+        }
+        #endif
     out[outlen] = 0;
 
     for (i = 0; i < outlen; i++) {
@@ -1024,8 +1313,23 @@ xmlDetectEBCDIC(xmlParserInputPtr input, xmlCharEncodingHandlerPtr *hout) {
             xmlCharEncCloseFunc(handler);
             res = xmlOpenCharEncodingHandler((char *) out + start,
                                              /* output */ 0, &handler);
-            if (res != 0)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[472]) {
+              if ((res != 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 472\n");
+              else
+                fprintf(stderr, "reached bug index 472\n");
+            }
+            if ((!FIXREVERTER[472] && (res != 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return(res);
+                #ifdef FRCOV
+                }
+                #endif
             *hout = handler;
             return(0);
         }
@@ -1037,8 +1341,23 @@ done:
      */
     xmlCharEncCloseFunc(handler);
     res = xmlLookupCharEncodingHandler(XML_CHAR_ENCODING_EBCDIC, &handler);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[473]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 473\n");
+      else
+        fprintf(stderr, "reached bug index 473\n");
+    }
+    if ((!FIXREVERTER[473] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(res);
+        #ifdef FRCOV
+        }
+        #endif
     *hout = handler;
     return(0);
 }
@@ -1063,8 +1382,23 @@ xmlSwitchEncoding(xmlParserCtxtPtr ctxt, xmlCharEncoding enc)
     int ret;
     int res;
 
-    if ((ctxt == NULL) || (ctxt->input == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[474]) {
+      if ((ctxt == (void *) 0 || ctxt -> input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 474\n");
+      else
+        fprintf(stderr, "reached bug index 474\n");
+    }
+    if ((!FIXREVERTER[474] && (ctxt == (void *) 0 || ctxt -> input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     switch (enc) {
 	case XML_CHAR_ENCODING_NONE:
@@ -1080,12 +1414,27 @@ xmlSwitchEncoding(xmlParserCtxtPtr ctxt, xmlCharEncoding enc)
             break;
     }
 
-    if (res != 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[475]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 475\n");
+      else
+        fprintf(stderr, "reached bug index 475\n");
+    }
+    if ((!FIXREVERTER[475] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         const char *name = xmlGetCharEncodingName(enc);
 
         xmlFatalErr(ctxt, res, (name ? name : "<null>"));
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = xmlSwitchInputEncoding(ctxt, ctxt->input, handler);
 
@@ -1112,14 +1461,44 @@ xmlSwitchInputEncodingName(xmlParserCtxtPtr ctxt, xmlParserInputPtr input,
     xmlCharEncodingHandlerPtr handler;
     int res;
 
-    if (encoding == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[476]) {
+      if ((encoding == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 476\n");
+      else
+        fprintf(stderr, "reached bug index 476\n");
+    }
+    if ((!FIXREVERTER[476] && (encoding == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     res = xmlOpenCharEncodingHandler(encoding, /* output */ 0, &handler);
-    if (res != 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[477]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 477\n");
+      else
+        fprintf(stderr, "reached bug index 477\n");
+    }
+    if ((!FIXREVERTER[477] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFatalErr(ctxt, res, encoding);
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(xmlSwitchInputEncoding(ctxt, input, handler));
 }
@@ -1163,10 +1542,25 @@ xmlSwitchInputEncoding(xmlParserCtxtPtr ctxt, xmlParserInputPtr input,
     int nbchars;
     xmlParserInputBufferPtr in;
 
-    if ((input == NULL) || (input->buf == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[478]) {
+      if ((input == (void *) 0 || input -> buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 478\n");
+      else
+        fprintf(stderr, "reached bug index 478\n");
+    }
+    if ((!FIXREVERTER[478] && (input == (void *) 0 || input -> buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlCharEncCloseFunc(handler);
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     in = input->buf;
 
     input->flags |= XML_INPUT_HAS_ENCODING;
@@ -1208,10 +1602,25 @@ xmlSwitchInputEncoding(xmlParserCtxtPtr ctxt, xmlParserInputPtr input,
         size_t processed;
 
         buf = xmlBufCreate();
-        if (buf == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[479]) {
+          if ((buf == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 479\n");
+          else
+            fprintf(stderr, "reached bug index 479\n");
+        }
+        if ((!FIXREVERTER[479] && (buf == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlCtxtErrMemory(ctxt);
             return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         /*
          * Shrink the current input buffer.
@@ -1471,12 +1880,44 @@ xmlGetActualEncoding(xmlParserCtxtPtr ctxt) {
  */
 void
 xmlFreeInputStream(xmlParserInputPtr input) {
-    if (input == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[482]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 482\n");
+      else
+        fprintf(stderr, "reached bug index 482\n");
+    }
+    if ((!FIXREVERTER[482] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (input->filename != NULL) xmlFree((char *) input->filename);
     if (input->version != NULL) xmlFree((char *) input->version);
-    if ((input->free != NULL) && (input->base != NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[483]) {
+      fprintf(stderr, "reached bug index 483\n");
+    }
+    if ((FIXREVERTER[483] && (input -> free != (void *) 0 )) || (!FIXREVERTER[483] && (input -> free != (void *) 0 && input -> base != (void *) 0 ))
+    #else
+    if (input -> free != (void *) 0 
+    #endif
+    )
+        
+        #ifdef FRCOV
+        {if (!(input -> base != (void *) 0 ))
+          fprintf(stderr, "triggered bug index 483\n");
+        #endif
         input->free((xmlChar *) input->base);
+        #ifdef FRCOV
+        }}
+        #endif
     if (input->buf != NULL)
         xmlFreeParserInputBuffer(input->buf);
     xmlFree(input);
@@ -1495,10 +1936,25 @@ xmlNewInputStream(xmlParserCtxtPtr ctxt) {
     xmlParserInputPtr input;
 
     input = (xmlParserInputPtr) xmlMalloc(sizeof(xmlParserInput));
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[484]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 484\n");
+      else
+        fprintf(stderr, "reached bug index 484\n");
+    }
+    if ((!FIXREVERTER[484] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlCtxtErrMemory(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(input, 0, sizeof(xmlParserInput));
     input->line = 1;
     input->col = 1;
@@ -1509,10 +1965,25 @@ xmlNewInputStream(xmlParserCtxtPtr ctxt) {
      * the id is actually needed.
      */
     if (ctxt != NULL) {
-        if (input->id >= INT_MAX) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[485]) {
+          if ((input -> id >= 2147483647 ) && !(0))
+            fprintf(stderr, "triggered bug index 485\n");
+          else
+            fprintf(stderr, "reached bug index 485\n");
+        }
+        if ((!FIXREVERTER[485] && (input -> id >= 2147483647 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlCtxtErrMemory(ctxt);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
         input->id = ctxt->input_id++;
     }
 
@@ -1568,12 +2039,42 @@ xmlNewInputURL(xmlParserCtxtPtr ctxt, const char *url, const char *publicId,
                const char *encoding, int flags ATTRIBUTE_UNUSED) {
     xmlParserInputPtr input;
 
-    if ((ctxt == NULL) || (url == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[486]) {
+      if ((ctxt == (void *) 0 || url == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 486\n");
+      else
+        fprintf(stderr, "reached bug index 486\n");
+    }
+    if ((!FIXREVERTER[486] && (ctxt == (void *) 0 || url == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     input = xmlLoadExternalEntity(url, publicId, ctxt);
-    if (input == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[487]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 487\n");
+      else
+        fprintf(stderr, "reached bug index 487\n");
+    }
+    if ((!FIXREVERTER[487] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (encoding != NULL)
         xmlSwitchInputEncodingName(ctxt, input, encoding);
@@ -1598,21 +2099,51 @@ xmlNewInputInternal(xmlParserCtxtPtr ctxt, xmlParserInputBufferPtr buf,
     xmlParserInputPtr input;
 
     input = xmlNewInputStream(ctxt);
-    if (input == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[488]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 488\n");
+      else
+        fprintf(stderr, "reached bug index 488\n");
+    }
+    if ((!FIXREVERTER[488] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeParserInputBuffer(buf);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     input->buf = buf;
     xmlBufResetInput(input->buf->buffer, input);
 
     if (filename != NULL) {
         input->filename = xmlMemStrdup(filename);
-        if (input->filename == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[489]) {
+          if ((input -> filename == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 489\n");
+          else
+            fprintf(stderr, "reached bug index 489\n");
+        }
+        if ((!FIXREVERTER[489] && (input -> filename == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlCtxtErrMemory(ctxt);
             xmlFreeInputStream(input);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
 
     if (encoding != NULL)
@@ -1651,14 +2182,44 @@ xmlNewInputMemory(xmlParserCtxtPtr ctxt, const char *url,
                   const char *encoding, int flags) {
     xmlParserInputBufferPtr buf;
 
-    if ((ctxt == NULL) || (mem == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[490]) {
+      if ((ctxt == (void *) 0 || mem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 490\n");
+      else
+        fprintf(stderr, "reached bug index 490\n");
+    }
+    if ((!FIXREVERTER[490] && (ctxt == (void *) 0 || mem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     buf = xmlNewInputBufferMemory(mem, size, flags, XML_CHAR_ENCODING_NONE);
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[491]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 491\n");
+      else
+        fprintf(stderr, "reached bug index 491\n");
+    }
+    if ((!FIXREVERTER[491] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlCtxtErrMemory(ctxt);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(xmlNewInputInternal(ctxt, buf, url, encoding));
 }
@@ -1687,14 +2248,44 @@ xmlNewInputString(xmlParserCtxtPtr ctxt, const char *url,
                   const char *str, const char *encoding, int flags) {
     xmlParserInputBufferPtr buf;
 
-    if ((ctxt == NULL) || (str == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[492]) {
+      if ((ctxt == (void *) 0 || str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 492\n");
+      else
+        fprintf(stderr, "reached bug index 492\n");
+    }
+    if ((!FIXREVERTER[492] && (ctxt == (void *) 0 || str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     buf = xmlNewInputBufferString(str, flags);
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[493]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 493\n");
+      else
+        fprintf(stderr, "reached bug index 493\n");
+    }
+    if ((!FIXREVERTER[493] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlCtxtErrMemory(ctxt);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(xmlNewInputInternal(ctxt, buf, url, encoding));
 }
@@ -1803,18 +2394,63 @@ xmlNewInputPush(xmlParserCtxtPtr ctxt, const char *url,
     xmlParserInputPtr input;
 
     buf = xmlAllocParserInputBuffer(XML_CHAR_ENCODING_NONE);
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[498]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 498\n");
+      else
+        fprintf(stderr, "reached bug index 498\n");
+    }
+    if ((!FIXREVERTER[498] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlCtxtErrMemory(ctxt);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     input = xmlNewInputInternal(ctxt, buf, url, encoding);
-    if (input == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[499]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 499\n");
+      else
+        fprintf(stderr, "reached bug index 499\n");
+    }
+    if ((!FIXREVERTER[499] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     input->flags |= XML_INPUT_PROGRESSIVE;
 
-    if ((size > 0) && (chunk != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[501]) {
+      fprintf(stderr, "reached bug index 501\n");
+    }
+    if ((FIXREVERTER[501] && (size > 0 )) || (!FIXREVERTER[501] && (size > 0 && chunk != (void *) 0 ))
+    #else
+    if (size > 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(chunk != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 501\n");
+      #endif
+    
         int res;
 
 	res = xmlParserInputBufferPush(input->buf, size, chunk);
@@ -1825,6 +2461,9 @@ xmlNewInputPush(xmlParserCtxtPtr ctxt, const char *url,
             return(NULL);
         }
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(input);
 }
@@ -1867,8 +2506,23 @@ xmlParserInputPtr
 xmlNewEntityInputStream(xmlParserCtxtPtr ctxt, xmlEntityPtr ent) {
     xmlParserInputPtr input;
 
-    if ((ctxt == NULL) || (ent == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[503]) {
+      if ((ctxt == (void *) 0 || ent == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 503\n");
+      else
+        fprintf(stderr, "reached bug index 503\n");
+    }
+    if ((!FIXREVERTER[503] && (ctxt == (void *) 0 || ent == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ent->content != NULL) {
         input = xmlNewInputString(ctxt, NULL, (const char *) ent->content,
@@ -1880,8 +2534,23 @@ xmlNewEntityInputStream(xmlParserCtxtPtr ctxt, xmlEntityPtr ent) {
         return(NULL);
     }
 
-    if (input == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[504]) {
+      if ((input == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 504\n");
+      else
+        fprintf(stderr, "reached bug index 504\n");
+    }
+    if ((!FIXREVERTER[504] && (input == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     input->entity = ent;
 
@@ -2236,14 +2905,44 @@ xmlLoadExternalEntity(const char *URL, const char *ID,
     char *canonicFilename;
     xmlParserInputPtr ret;
 
-    if (URL == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[513]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 513\n");
+      else
+        fprintf(stderr, "reached bug index 513\n");
+    }
+    if ((!FIXREVERTER[513] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     canonicFilename = (char *) xmlCanonicPath((const xmlChar *) URL);
-    if (canonicFilename == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[514]) {
+      if ((canonicFilename == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 514\n");
+      else
+        fprintf(stderr, "reached bug index 514\n");
+    }
+    if ((!FIXREVERTER[514] && (canonicFilename == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlCtxtErrMemory(ctxt);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = xmlCurrentExternalEntityLoader(canonicFilename, ID, ctxt);
     xmlFree(canonicFilename);
@@ -2273,19 +2972,94 @@ xmlInitSAXParserCtxt(xmlParserCtxtPtr ctxt, const xmlSAXHandler *sax,
 {
     xmlParserInputPtr input;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[515]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 515\n");
+      else
+        fprintf(stderr, "reached bug index 515\n");
+    }
+    if ((!FIXREVERTER[515] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
-
-    if (ctxt->dict == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[516]) {
+      if ((ctxt -> dict == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 516\n");
+      else
+        fprintf(stderr, "reached bug index 516\n");
+    }
+    if ((!FIXREVERTER[516] && (ctxt -> dict == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->dict = xmlDictCreate();
-    if (ctxt->dict == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[517]) {
+      if ((ctxt -> dict == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 517\n");
+      else
+        fprintf(stderr, "reached bug index 517\n");
+    }
+    if ((!FIXREVERTER[517] && (ctxt -> dict == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     xmlDictSetLimit(ctxt->dict, XML_MAX_DICTIONARY_LIMIT);
 
-    if (ctxt->sax == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[518]) {
+      if ((ctxt -> sax == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 518\n");
+      else
+        fprintf(stderr, "reached bug index 518\n");
+    }
+    if ((!FIXREVERTER[518] && (ctxt -> sax == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ctxt->sax = (xmlSAXHandler *) xmlMalloc(sizeof(xmlSAXHandler));
-    if (ctxt->sax == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[519]) {
+      if ((ctxt -> sax == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 519\n");
+      else
+        fprintf(stderr, "reached bug index 519\n");
+    }
+    if ((!FIXREVERTER[519] && (ctxt -> sax == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (sax == NULL) {
 	memset(ctxt->sax, 0, sizeof(xmlSAXHandler));
         xmlSAXVersion(ctxt->sax, 2);
@@ -2308,8 +3082,23 @@ xmlInitSAXParserCtxt(xmlParserCtxtPtr ctxt, const xmlSAXHandler *sax,
 		    xmlMalloc(5 * sizeof(xmlParserInputPtr));
 	ctxt->inputMax = 5;
     }
-    if (ctxt->inputTab == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[520]) {
+      if ((ctxt -> inputTab == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 520\n");
+      else
+        fprintf(stderr, "reached bug index 520\n");
+    }
+    if ((!FIXREVERTER[520] && (ctxt -> inputTab == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     while ((input = inputPop(ctxt)) != NULL) { /* Non consuming */
         xmlFreeInputStream(input);
     }
@@ -2329,8 +3118,23 @@ xmlInitSAXParserCtxt(xmlParserCtxtPtr ctxt, const xmlSAXHandler *sax,
 	ctxt->nodeTab = (xmlNodePtr *) xmlMalloc(10 * sizeof(xmlNodePtr));
 	ctxt->nodeMax = 10;
     }
-    if (ctxt->nodeTab == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[521]) {
+      if ((ctxt -> nodeTab == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 521\n");
+      else
+        fprintf(stderr, "reached bug index 521\n");
+    }
+    if ((!FIXREVERTER[521] && (ctxt -> nodeTab == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     ctxt->nodeNr = 0;
     ctxt->node = NULL;
 
@@ -2339,8 +3143,23 @@ xmlInitSAXParserCtxt(xmlParserCtxtPtr ctxt, const xmlSAXHandler *sax,
 	ctxt->nameTab = (const xmlChar **) xmlMalloc(10 * sizeof(xmlChar *));
 	ctxt->nameMax = 10;
     }
-    if (ctxt->nameTab == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[522]) {
+      if ((ctxt -> nameTab == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 522\n");
+      else
+        fprintf(stderr, "reached bug index 522\n");
+    }
+    if ((!FIXREVERTER[522] && (ctxt -> nameTab == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     ctxt->nameNr = 0;
     ctxt->name = NULL;
 
@@ -2349,8 +3168,23 @@ xmlInitSAXParserCtxt(xmlParserCtxtPtr ctxt, const xmlSAXHandler *sax,
 	ctxt->spaceTab = (int *) xmlMalloc(10 * sizeof(int));
 	ctxt->spaceMax = 10;
     }
-    if (ctxt->spaceTab == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[523]) {
+      if ((ctxt -> spaceTab == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 523\n");
+      else
+        fprintf(stderr, "reached bug index 523\n");
+    }
+    if ((!FIXREVERTER[523] && (ctxt -> spaceTab == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     ctxt->spaceNr = 1;
     ctxt->spaceMax = 10;
     ctxt->spaceTab[0] = -1;
@@ -2412,10 +3246,25 @@ xmlInitSAXParserCtxt(xmlParserCtxtPtr ctxt, const xmlSAXHandler *sax,
 
     if (ctxt->nsdb == NULL) {
         ctxt->nsdb = xmlParserNsCreate();
-        if (ctxt->nsdb == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[524]) {
+          if ((ctxt -> nsdb == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 524\n");
+          else
+            fprintf(stderr, "reached bug index 524\n");
+        }
+        if ((!FIXREVERTER[524] && (ctxt -> nsdb == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlCtxtErrMemory(ctxt);
             return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
 
     return(0);
@@ -2452,7 +3301,22 @@ xmlFreeParserCtxt(xmlParserCtxtPtr ctxt)
 {
     xmlParserInputPtr input;
 
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[525]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 525\n");
+      else
+        fprintf(stderr, "reached bug index 525\n");
+    }
+    if ((!FIXREVERTER[525] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     while ((input = inputPop(ctxt)) != NULL) { /* Non consuming */
         xmlFreeInputStream(input);
@@ -2563,8 +3427,23 @@ xmlNewSAXParserCtxt(const xmlSAXHandler *sax, void *userData)
     xmlInitParser();
 
     ctxt = (xmlParserCtxtPtr) xmlMalloc(sizeof(xmlParserCtxt));
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[526]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 526\n");
+      else
+        fprintf(stderr, "reached bug index 526\n");
+    }
+    if ((!FIXREVERTER[526] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(ctxt, 0, sizeof(xmlParserCtxt));
     if (xmlInitSAXParserCtxt(ctxt, sax, userData) < 0) {
         xmlFreeParserCtxt(ctxt);
@@ -2612,8 +3491,23 @@ xmlParserFindNodeInfo(xmlParserCtxtPtr ctx, xmlNodePtr node)
 {
     unsigned long pos;
 
-    if ((ctx == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[528]) {
+      if ((ctx == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 528\n");
+      else
+        fprintf(stderr, "reached bug index 528\n");
+    }
+    if ((!FIXREVERTER[528] && (ctx == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* Find position where node should be at */
     pos = xmlParserFindNodeInfoIndex(&ctx->node_seq, node);
     if (pos < ctx->node_seq.length
@@ -2635,8 +3529,23 @@ xmlParserFindNodeInfo(xmlParserCtxtPtr ctx, xmlNodePtr node)
 void
 xmlInitNodeInfoSeq(xmlParserNodeInfoSeqPtr seq)
 {
-    if (seq == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[529]) {
+      if ((seq == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 529\n");
+      else
+        fprintf(stderr, "reached bug index 529\n");
+    }
+    if ((!FIXREVERTER[529] && (seq == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     seq->length = 0;
     seq->maximum = 0;
     seq->buffer = NULL;
@@ -2680,8 +3589,23 @@ xmlParserFindNodeInfoIndex(xmlParserNodeInfoSeqPtr seq,
     unsigned long upper, lower, middle;
     int found = 0;
 
-    if ((seq == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[531]) {
+      if ((seq == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 531\n");
+      else
+        fprintf(stderr, "reached bug index 531\n");
+    }
+    if ((!FIXREVERTER[531] && (seq == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return ((unsigned long) -1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /* Do a binary search for the key */
     lower = 1;
@@ -2720,7 +3644,22 @@ xmlParserAddNodeInfo(xmlParserCtxtPtr ctxt,
 {
     unsigned long pos;
 
-    if ((ctxt == NULL) || (info == NULL)) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[532]) {
+      if ((ctxt == (void *) 0 || info == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 532\n");
+      else
+        fprintf(stderr, "reached bug index 532\n");
+    }
+    if ((!FIXREVERTER[532] && (ctxt == (void *) 0 || info == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     /* Find pos and check to see if node is already in the sequence */
     pos = xmlParserFindNodeInfoIndex(&ctxt->node_seq, (xmlNodePtr)
@@ -2751,10 +3690,25 @@ xmlParserAddNodeInfo(xmlParserCtxtPtr ctxt,
                     (xmlParserNodeInfo *) xmlRealloc(ctxt->node_seq.buffer,
                                                      byte_size);
 
-            if (tmp_buffer == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[533]) {
+              if ((tmp_buffer == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 533\n");
+              else
+                fprintf(stderr, "reached bug index 533\n");
+            }
+            if ((!FIXREVERTER[533] && (tmp_buffer == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
 		xmlCtxtErrMemory(ctxt);
                 return;
             }
+            #ifdef FRCOV
+            }
+            #endif
             ctxt->node_seq.buffer = tmp_buffer;
             ctxt->node_seq.maximum *= 2;
         }
diff --git a/pattern.c b/pattern.c
index 2b669768..fe8b8233 100644
--- a/pattern.c
+++ b/pattern.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * pattern.c: Implementation of selectors for nodes
  *
@@ -201,20 +205,50 @@ xmlNewPattern(void) {
     xmlPatternPtr cur;
 
     cur = (xmlPatternPtr) xmlMalloc(sizeof(xmlPattern));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1\n");
+      else
+        fprintf(stderr, "reached bug index 1\n");
+    }
+    if ((!FIXREVERTER[1] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	ERROR(NULL, NULL, NULL,
 		"xmlNewPattern : malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlPattern));
     cur->maxStep = 10;
     cur->steps = (xmlStepOpPtr) xmlMalloc(cur->maxStep * sizeof(xmlStepOp));
-    if (cur->steps == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2]) {
+      if ((cur -> steps == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2\n");
+      else
+        fprintf(stderr, "reached bug index 2\n");
+    }
+    if ((!FIXREVERTER[2] && (cur -> steps == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(cur);
 	ERROR(NULL, NULL, NULL,
 		"xmlNewPattern : malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(cur);
 }
 
@@ -234,8 +268,23 @@ xmlFreePatternInternal(xmlPatternPtr comp) {
     xmlStepOpPtr op;
     int i;
 
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3\n");
+      else
+        fprintf(stderr, "reached bug index 3\n");
+    }
+    if ((!FIXREVERTER[3] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (comp->stream != NULL)
         xmlFreeStreamComp(comp->stream);
     if (comp->pattern != NULL)
@@ -293,15 +342,45 @@ xmlNewPatParserContext(const xmlChar *pattern, xmlDictPtr dict,
                        const xmlChar **namespaces) {
     xmlPatParserContextPtr cur;
 
-    if (pattern == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4]) {
+      if ((pattern == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4\n");
+      else
+        fprintf(stderr, "reached bug index 4\n");
+    }
+    if ((!FIXREVERTER[4] && (pattern == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = (xmlPatParserContextPtr) xmlMalloc(sizeof(xmlPatParserContext));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[5]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 5\n");
+      else
+        fprintf(stderr, "reached bug index 5\n");
+    }
+    if ((!FIXREVERTER[5] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	ERROR(NULL, NULL, NULL,
 		"xmlNewPatParserContext : malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlPatParserContext));
     cur->dict = dict;
     cur->cur = pattern;
@@ -326,8 +405,23 @@ xmlNewPatParserContext(const xmlChar *pattern, xmlDictPtr dict,
  */
 static void
 xmlFreePatParserContext(xmlPatParserContextPtr ctxt) {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[6]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 6\n");
+      else
+        fprintf(stderr, "reached bug index 6\n");
+    }
+    if ((!FIXREVERTER[6] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     memset(ctxt, -1, sizeof(xmlPatParserContext));
     xmlFree(ctxt);
 }
@@ -351,12 +445,27 @@ xmlPatternAdd(xmlPatParserContextPtr ctxt, xmlPatternPtr comp,
         xmlStepOpPtr temp;
 	temp = (xmlStepOpPtr) xmlRealloc(comp->steps, comp->maxStep * 2 *
 	                                 sizeof(xmlStepOp));
-        if (temp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[7]) {
+          if ((temp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 7\n");
+          else
+            fprintf(stderr, "reached bug index 7\n");
+        }
+        if ((!FIXREVERTER[7] && (temp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    ERROR(ctxt, NULL, NULL,
 			     "xmlPatternAdd: realloc failed\n");
             ctxt->error = -1;
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->steps = temp;
 	comp->maxStep *= 2;
     }
@@ -423,11 +532,26 @@ xmlReversePattern(xmlPatternPtr comp) {
         xmlStepOpPtr temp;
 	temp = (xmlStepOpPtr) xmlRealloc(comp->steps, comp->maxStep * 2 *
 	                                 sizeof(xmlStepOp));
-        if (temp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[8]) {
+          if ((temp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 8\n");
+          else
+            fprintf(stderr, "reached bug index 8\n");
+        }
+        if ((!FIXREVERTER[8] && (temp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    ERROR(ctxt, NULL, NULL,
 			     "xmlReversePattern: realloc failed\n");
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->steps = temp;
 	comp->maxStep *= 2;
     }
@@ -857,8 +981,23 @@ xmlPatScanNCName(xmlPatParserContextPtr ctxt) {
 	ret = (xmlChar *) xmlDictLookup(ctxt->dict, q, cur - q);
     else
 	ret = xmlStrndup(q, cur - q);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[23]) {
+      if ((ret == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 23\n");
+      else
+        fprintf(stderr, "reached bug index 23\n");
+    }
+    if ((!FIXREVERTER[23] && (ret == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->error = -1;
+        #ifdef FRCOV
+        }
+        #endif
     CUR_PTR = cur;
     return(ret);
 }
@@ -903,9 +1042,36 @@ xmlCompileAttributeTest(xmlPatParserContextPtr ctxt) {
 
     SKIP_BLANKS;
     name = xmlPatScanNCName(ctxt);
-    if (ctxt->error < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[24]) {
+      if ((ctxt -> error < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 24\n");
+      else
+        fprintf(stderr, "reached bug index 24\n");
+    }
+    if ((!FIXREVERTER[24] && (ctxt -> error < 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
-    if (name == NULL) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[25]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 25\n");
+      else
+        fprintf(stderr, "reached bug index 25\n");
+    }
+    if ((!FIXREVERTER[25] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (CUR == '*') {
 	    PUSH(XML_OP_ATTR, NULL, NULL);
 	    NEXT;
@@ -916,6 +1082,9 @@ xmlCompileAttributeTest(xmlPatParserContextPtr ctxt) {
 	}
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (CUR == ':') {
 	int i;
 	xmlChar *prefix = name;
@@ -944,13 +1113,28 @@ xmlCompileAttributeTest(xmlPatParserContextPtr ctxt) {
 		    break;
 		}
 	    }
-	    if (i >= ctxt->nb_namespaces) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[26]) {
+	      if ((i >= ctxt -> nb_namespaces ) && !(0))
+	        fprintf(stderr, "triggered bug index 26\n");
+	      else
+	        fprintf(stderr, "reached bug index 26\n");
+	    }
+	    if ((!FIXREVERTER[26] && (i >= ctxt -> nb_namespaces ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		ERROR5(NULL, NULL, NULL,
 		    "xmlCompileAttributeTest : no namespace bound to prefix %s\n",
 		    prefix);
 		ctxt->error = 1;
 		goto error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
         XML_PAT_FREE_STRING(ctxt, name);
         name = NULL;
@@ -1019,13 +1203,43 @@ xmlCompileStepPattern(xmlPatParserContextPtr ctxt) {
 	}
 	NEXT;
 	xmlCompileAttributeTest(ctxt);
-	if (ctxt->error != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[27]) {
+	  if ((ctxt -> error != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 27\n");
+	  else
+	    fprintf(stderr, "reached bug index 27\n");
+	}
+	if ((!FIXREVERTER[27] && (ctxt -> error != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	return;
     }
     name = xmlPatScanNCName(ctxt);
-    if (ctxt->error < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[28]) {
+      if ((ctxt -> error < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 28\n");
+      else
+        fprintf(stderr, "reached bug index 28\n");
+    }
+    if ((!FIXREVERTER[28] && (ctxt -> error < 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (name == NULL) {
 	if (CUR == '*') {
 	    NEXT;
@@ -1070,13 +1284,28 @@ xmlCompileStepPattern(xmlPatParserContextPtr ctxt) {
 			break;
 		    }
 		}
-		if (i >= ctxt->nb_namespaces) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[29]) {
+		  if ((i >= ctxt -> nb_namespaces ) && !(0))
+		    fprintf(stderr, "triggered bug index 29\n");
+		  else
+		    fprintf(stderr, "reached bug index 29\n");
+		}
+		if ((!FIXREVERTER[29] && (i >= ctxt -> nb_namespaces ))
+		#else
+		if (0
+		#endif
+		) {
 		    ERROR5(NULL, NULL, NULL,
 			"xmlCompileStepPattern : no namespace bound to prefix %s\n",
 			prefix);
 		    ctxt->error = 1;
 		    goto error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 	    XML_PAT_FREE_STRING(ctxt, prefix);
 	    name = NULL;
@@ -1137,13 +1366,28 @@ xmlCompileStepPattern(xmlPatParserContextPtr ctxt) {
 				break;
 			    }
 			}
-			if (i >= ctxt->nb_namespaces) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[30]) {
+			  if ((i >= ctxt -> nb_namespaces ) && !(0))
+			    fprintf(stderr, "triggered bug index 30\n");
+			  else
+			    fprintf(stderr, "reached bug index 30\n");
+			}
+			if ((!FIXREVERTER[30] && (i >= ctxt -> nb_namespaces ))
+			#else
+			if (0
+			#endif
+			) {
 			    ERROR5(NULL, NULL, NULL,
 				"xmlCompileStepPattern : no namespace bound "
 				"to prefix %s\n", prefix);
 			    ctxt->error = 1;
 			    goto error;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 		    }
 		    XML_PAT_FREE_STRING(ctxt, prefix);
 		    name = NULL;
@@ -1173,8 +1417,23 @@ xmlCompileStepPattern(xmlPatParserContextPtr ctxt) {
 		    goto error;
 		}
 		xmlCompileAttributeTest(ctxt);
-		if (ctxt->error != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[31]) {
+		  if ((ctxt -> error != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 31\n");
+		  else
+		    fprintf(stderr, "reached bug index 31\n");
+		}
+		if ((!FIXREVERTER[31] && (ctxt -> error != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		return;
 	    } else {
 		ERROR5(NULL, NULL, NULL,
@@ -1242,14 +1501,44 @@ xmlCompilePathPattern(xmlPatParserContextPtr ctxt) {
     if (CUR == '@') {
 	NEXT;
 	xmlCompileAttributeTest(ctxt);
-        if (ctxt->error != 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[32]) {
+          if ((ctxt -> error != 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 32\n");
+          else
+            fprintf(stderr, "reached bug index 32\n");
+        }
+        if ((!FIXREVERTER[32] && (ctxt -> error != 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
 	SKIP_BLANKS;
 	/* TODO: check for incompleteness */
 	if (CUR != 0) {
 	    xmlCompileStepPattern(ctxt);
-	    if (ctxt->error != 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[33]) {
+	      if ((ctxt -> error != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 33\n");
+	      else
+	        fprintf(stderr, "reached bug index 33\n");
+	    }
+	    if ((!FIXREVERTER[33] && (ctxt -> error != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto error;
+		#ifdef FRCOV
+		}
+		#endif
 	}
     } else {
         if (CUR == '/') {
@@ -1265,8 +1554,23 @@ xmlCompilePathPattern(xmlPatParserContextPtr ctxt) {
 	    }
 	}
 	xmlCompileStepPattern(ctxt);
-	if (ctxt->error != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[34]) {
+	  if ((ctxt -> error != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 34\n");
+	  else
+	    fprintf(stderr, "reached bug index 34\n");
+	}
+	if ((!FIXREVERTER[34] && (ctxt -> error != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	SKIP_BLANKS;
 	while (CUR == '/') {
 	    if (NXT(1) == '/') {
@@ -1275,8 +1579,23 @@ xmlCompilePathPattern(xmlPatParserContextPtr ctxt) {
 		NEXT;
 		SKIP_BLANKS;
 		xmlCompileStepPattern(ctxt);
-		if (ctxt->error != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[35]) {
+		  if ((ctxt -> error != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 35\n");
+		  else
+		    fprintf(stderr, "reached bug index 35\n");
+		}
+		if ((!FIXREVERTER[35] && (ctxt -> error != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    } else {
 	        PUSH(XML_OP_PARENT, NULL, NULL);
 		NEXT;
@@ -1288,8 +1607,23 @@ xmlCompilePathPattern(xmlPatParserContextPtr ctxt) {
 		    goto error;
 		}
 		xmlCompileStepPattern(ctxt);
-		if (ctxt->error != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[36]) {
+		  if ((ctxt -> error != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 36\n");
+		  else
+		    fprintf(stderr, "reached bug index 36\n");
+		}
+		if ((!FIXREVERTER[36] && (ctxt -> error != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	}
     }
@@ -1364,8 +1698,23 @@ xmlCompileIDCXPathPath(xmlPatParserContextPtr ctxt) {
     */
     do {
 	xmlCompileStepPattern(ctxt);
-	if (ctxt->error != 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[37]) {
+	  if ((ctxt -> error != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 37\n");
+	  else
+	    fprintf(stderr, "reached bug index 37\n");
+	}
+	if ((!FIXREVERTER[37] && (ctxt -> error != 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	SKIP_BLANKS;
 	if (CUR != '/')
 	    break;
@@ -1421,23 +1770,68 @@ static xmlStreamCompPtr
 xmlNewStreamComp(int size) {
     xmlStreamCompPtr cur;
 
-    if (size < 4)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[38]) {
+      if ((size < 4 ) && !(0))
+        fprintf(stderr, "triggered bug index 38\n");
+      else
+        fprintf(stderr, "reached bug index 38\n");
+    }
+    if ((!FIXREVERTER[38] && (size < 4 ))
+    #else
+    if (0
+    #endif
+    )
         size  = 4;
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = (xmlStreamCompPtr) xmlMalloc(sizeof(xmlStreamComp));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[39]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 39\n");
+      else
+        fprintf(stderr, "reached bug index 39\n");
+    }
+    if ((!FIXREVERTER[39] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	ERROR(NULL, NULL, NULL,
 		"xmlNewStreamComp: malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlStreamComp));
     cur->steps = (xmlStreamStepPtr) xmlMalloc(size * sizeof(xmlStreamStep));
-    if (cur->steps == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[40]) {
+      if ((cur -> steps == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 40\n");
+      else
+        fprintf(stderr, "reached bug index 40\n");
+    }
+    if ((!FIXREVERTER[40] && (cur -> steps == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(cur);
 	ERROR(NULL, NULL, NULL,
 	      "xmlNewStreamComp: malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur->nbStep = 0;
     cur->maxStep = size;
     return(cur);
@@ -1479,11 +1873,26 @@ xmlStreamCompAddStep(xmlStreamCompPtr comp, const xmlChar *name,
     if (comp->nbStep >= comp->maxStep) {
 	cur = (xmlStreamStepPtr) xmlRealloc(comp->steps,
 				 comp->maxStep * 2 * sizeof(xmlStreamStep));
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[41]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 41\n");
+	  else
+	    fprintf(stderr, "reached bug index 41\n");
+	}
+	if ((!FIXREVERTER[41] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ERROR(NULL, NULL, NULL,
 		  "xmlNewStreamComp: malloc failed\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->steps = cur;
         comp->maxStep *= 2;
     }
@@ -1509,8 +1918,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
     int i, s = 0, root = 0, flags = 0, prevs = -1;
     xmlStepOp step;
 
-    if ((comp == NULL) || (comp->steps == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[42]) {
+      if ((comp == (void *) 0 || comp -> steps == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 42\n");
+      else
+        fprintf(stderr, "reached bug index 42\n");
+    }
+    if ((!FIXREVERTER[42] && (comp == (void *) 0 || comp -> steps == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * special case for .
      */
@@ -1519,8 +1943,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 	(comp->steps[0].value == NULL) &&
 	(comp->steps[0].value2 == NULL)) {
 	stream = xmlNewStreamComp(0);
-	if (stream == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[43]) {
+	  if ((stream == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 43\n");
+	  else
+	    fprintf(stderr, "reached bug index 43\n");
+	}
+	if ((!FIXREVERTER[43] && (stream == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/* Note that the stream will have no steps in this case. */
 	stream->flags |= XML_STREAM_FINAL_IS_ANY_NODE;
 	comp->stream = stream;
@@ -1528,8 +1967,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
     }
 
     stream = xmlNewStreamComp((comp->nbStep / 2) + 1);
-    if (stream == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[44]) {
+      if ((stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 44\n");
+      else
+        fprintf(stderr, "reached bug index 44\n");
+    }
+    if ((!FIXREVERTER[44] && (stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (comp->dict != NULL) {
         stream->dict = comp->dict;
 	xmlDictReference(stream->dict);
@@ -1552,8 +2006,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 	    case XML_OP_NS:
 		s = xmlStreamCompAddStep(stream, NULL, step.value,
 		    XML_ELEMENT_NODE, flags);
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[46]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 46\n");
+		  else
+		    fprintf(stderr, "reached bug index 46\n");
+		}
+		if ((!FIXREVERTER[46] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		prevs = s;
 		flags = 0;
 		break;
@@ -1563,8 +2032,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 		s = xmlStreamCompAddStep(stream,
 		    step.value, step.value2, XML_ATTRIBUTE_NODE, flags);
 		flags = 0;
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[47]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 47\n");
+		  else
+		    fprintf(stderr, "reached bug index 47\n");
+		}
+		if ((!FIXREVERTER[47] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    case XML_OP_ELEM:
 	        if ((step.value == NULL) && (step.value2 == NULL)) {
@@ -1588,8 +2072,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 			flags |= XML_STREAM_STEP_NODE;
 			s = xmlStreamCompAddStep(stream, NULL, NULL,
 			    XML_STREAM_ANY_NODE, flags);
-			if (s < 0)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[48]) {
+			  if ((s < 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 48\n");
+			  else
+			    fprintf(stderr, "reached bug index 48\n");
+			}
+			if ((!FIXREVERTER[48] && (s < 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    goto error;
+			    #ifdef FRCOV
+			    }
+			    #endif
 			flags = 0;
 			/*
 			* If there was a previous step, mark it to be added to
@@ -1611,8 +2110,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 		/* An element node. */
 	        s = xmlStreamCompAddStep(stream, step.value, step.value2,
 		    XML_ELEMENT_NODE, flags);
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[49]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 49\n");
+		  else
+		    fprintf(stderr, "reached bug index 49\n");
+		}
+		if ((!FIXREVERTER[49] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		prevs = s;
 		flags = 0;
 		break;
@@ -1620,16 +2134,46 @@ xmlStreamCompile(xmlPatternPtr comp) {
 		/* An element node child. */
 	        s = xmlStreamCompAddStep(stream, step.value, step.value2,
 		    XML_ELEMENT_NODE, flags);
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[50]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 50\n");
+		  else
+		    fprintf(stderr, "reached bug index 50\n");
+		}
+		if ((!FIXREVERTER[50] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		prevs = s;
 		flags = 0;
 		break;
 	    case XML_OP_ALL:
 	        s = xmlStreamCompAddStep(stream, NULL, NULL,
 		    XML_ELEMENT_NODE, flags);
-		if (s < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[51]) {
+		  if ((s < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 51\n");
+		  else
+		    fprintf(stderr, "reached bug index 51\n");
+		}
+		if ((!FIXREVERTER[51] && (s < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		prevs = s;
 		flags = 0;
 		break;
@@ -1662,8 +2206,23 @@ xmlStreamCompile(xmlPatternPtr comp) {
 		stream->steps[0].flags |= XML_STREAM_STEP_DESC;
 	}
     }
-    if (stream->nbStep <= s)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[52]) {
+      if ((stream -> nbStep <= s ) && !(0))
+        fprintf(stderr, "triggered bug index 52\n");
+      else
+        fprintf(stderr, "reached bug index 52\n");
+    }
+    if ((!FIXREVERTER[52] && (stream -> nbStep <= s ))
+    #else
+    if (0
+    #endif
+    )
 	goto error;
+	#ifdef FRCOV
+	}
+	#endif
     stream->steps[s].flags |= XML_STREAM_STEP_FINAL;
     if (root)
 	stream->steps[0].flags |= XML_STREAM_STEP_ROOT;
@@ -1687,19 +2246,49 @@ xmlNewStreamCtxt(xmlStreamCompPtr stream) {
     xmlStreamCtxtPtr cur;
 
     cur = (xmlStreamCtxtPtr) xmlMalloc(sizeof(xmlStreamCtxt));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[53]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 53\n");
+      else
+        fprintf(stderr, "reached bug index 53\n");
+    }
+    if ((!FIXREVERTER[53] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	ERROR(NULL, NULL, NULL,
 		"xmlNewStreamCtxt: malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlStreamCtxt));
     cur->states = (int *) xmlMalloc(4 * 2 * sizeof(int));
-    if (cur->states == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[54]) {
+      if ((cur -> states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 54\n");
+      else
+        fprintf(stderr, "reached bug index 54\n");
+    }
+    if ((!FIXREVERTER[54] && (cur -> states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(cur);
 	ERROR(NULL, NULL, NULL,
 	      "xmlNewStreamCtxt: malloc failed\n");
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur->nbState = 0;
     cur->maxState = 4;
     cur->level = 0;
@@ -1751,11 +2340,26 @@ xmlStreamCtxtAddState(xmlStreamCtxtPtr comp, int idx, int level) {
 
 	cur = (int *) xmlRealloc(comp->states,
 				 comp->maxState * 4 * sizeof(int));
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[55]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 55\n");
+	  else
+	    fprintf(stderr, "reached bug index 55\n");
+	}
+	if ((!FIXREVERTER[55] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ERROR(NULL, NULL, NULL,
 		  "xmlNewStreamCtxt: malloc failed\n");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	comp->states = cur;
         comp->maxState *= 2;
     }
@@ -1788,8 +2392,23 @@ xmlStreamPushInternal(xmlStreamCtxtPtr stream,
     xmlStreamCompPtr comp;
     xmlStreamStep step;
 
-    if ((stream == NULL) || (stream->nbState < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[56]) {
+      if ((stream == (void *) 0 || stream -> nbState < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 56\n");
+      else
+        fprintf(stderr, "reached bug index 56\n");
+    }
+    if ((!FIXREVERTER[56] && (stream == (void *) 0 || stream -> nbState < 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (stream != NULL) {
 	comp = stream->comp;
@@ -1900,14 +2519,44 @@ xmlStreamPushInternal(xmlStreamCtxtPtr stream,
 		stepNr = stream->states[2 * i];
 
 		/* TODO: should not happen anymore: dead states */
-		if (stepNr < 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[57]) {
+		  if ((stepNr < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 57\n");
+		  else
+		    fprintf(stderr, "reached bug index 57\n");
+		}
+		if ((!FIXREVERTER[57] && (stepNr < 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto next_state;
+		    #ifdef FRCOV
+		    }
+		    #endif
 
 		tmp = stream->states[(2 * i) + 1];
 
 		/* skip new states just added */
-		if (tmp > stream->level)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[58]) {
+		  if ((tmp > stream -> level ) && !(0))
+		    fprintf(stderr, "triggered bug index 58\n");
+		  else
+		    fprintf(stderr, "reached bug index 58\n");
+		}
+		if ((!FIXREVERTER[58] && (tmp > stream -> level ))
+		#else
+		if (0
+		#endif
+		)
 		    goto next_state;
+		    #ifdef FRCOV
+		    }
+		    #endif
 
 		/* skip states at ancestor levels, except if "//" */
 		desc = comp->steps[stepNr].flags & XML_STREAM_STEP_DESC;
@@ -1926,8 +2575,23 @@ xmlStreamPushInternal(xmlStreamCtxtPtr stream,
 		    if ((comp->flags & XML_STREAM_DESC) == 0)
 			stream->blockLevel = stream->level +1;
 		    goto next_state;
-		} else if (step.nodeType != XML_STREAM_ANY_NODE)
+		} else 
+		#ifdef FRCOV
+		{if (FIXREVERTER[59]) {
+		  if ((step . nodeType != 100 ) && !(0))
+		    fprintf(stderr, "triggered bug index 59\n");
+		  else
+		    fprintf(stderr, "reached bug index 59\n");
+		}
+		if ((!FIXREVERTER[59] && (step . nodeType != 100 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto next_state;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	    /*
 	    * Compare local/namespace-name.
@@ -2048,8 +2712,23 @@ compare:
 	if (step.nodeType != nodeType) {
 	    if (nodeType == XML_ATTRIBUTE_NODE)
 		goto stream_next;
-	    else if (step.nodeType != XML_STREAM_ANY_NODE)
+	    else 
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[61]) {
+	      if ((step . nodeType != 100 ) && !(0))
+	        fprintf(stderr, "triggered bug index 61\n");
+	      else
+	        fprintf(stderr, "reached bug index 61\n");
+	    }
+	    if ((!FIXREVERTER[61] && (step . nodeType != 100 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto stream_next;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	/*
 	* Compare local/namespace-name.
@@ -2188,14 +2867,44 @@ int
 xmlStreamPop(xmlStreamCtxtPtr stream) {
     int i, lev;
 
-    if (stream == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[63]) {
+      if ((stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 63\n");
+      else
+        fprintf(stderr, "reached bug index 63\n");
+    }
+    if ((!FIXREVERTER[63] && (stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     while (stream != NULL) {
 	/*
 	* Reset block-level.
 	*/
-	if (stream->blockLevel == stream->level)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[64]) {
+	  if ((stream -> blockLevel == stream -> level  ) && !(0))
+	    fprintf(stderr, "triggered bug index 64\n");
+	  else
+	    fprintf(stderr, "reached bug index 64\n");
+	}
+	if ((!FIXREVERTER[64] && (stream -> blockLevel == stream -> level  ))
+	#else
+	if (0
+	#endif
+	)
 	    stream->blockLevel = -1;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	/*
 	 *  stream->level can be zero when XML_FINAL_IS_ANY_NODE is set
@@ -2212,8 +2921,23 @@ xmlStreamPop(xmlStreamCtxtPtr stream) {
 	    lev = stream->states[(2 * i) + 1];
 	    if (lev > stream->level)
 		stream->nbState--;
-	    if (lev <= stream->level)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[65]) {
+	      if ((lev <= stream -> level ) && !(0))
+	        fprintf(stderr, "triggered bug index 65\n");
+	      else
+	        fprintf(stderr, "reached bug index 65\n");
+	    }
+	    if ((!FIXREVERTER[65] && (lev <= stream -> level ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	stream = stream->next;
     }
@@ -2276,10 +3000,25 @@ xmlPatternCompileSafe(const xmlChar *pattern, xmlDict *dict, int flags,
     int streamable = 1;
     int error;
 
-    if (pattern == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[67]) {
+      if ((pattern == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 67\n");
+      else
+        fprintf(stderr, "reached bug index 67\n");
+    }
+    if ((!FIXREVERTER[67] && (pattern == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         error = 1;
         goto error;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     start = pattern;
     or = start;
@@ -2295,15 +3034,45 @@ xmlPatternCompileSafe(const xmlChar *pattern, xmlDict *dict, int flags,
 	    }
 	    or++;
 	}
-	if (ctxt == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[68]) {
+	  if ((ctxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 68\n");
+	  else
+	    fprintf(stderr, "reached bug index 68\n");
+	}
+	if ((!FIXREVERTER[68] && (ctxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             error = -1;
             goto error;
         }
+        #ifdef FRCOV
+        }
+        #endif
 	cur = xmlNewPattern();
-	if (cur == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[69]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 69\n");
+	  else
+	    fprintf(stderr, "reached bug index 69\n");
+	}
+	if ((!FIXREVERTER[69] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             error = -1;
             goto error;
         }
+        #ifdef FRCOV
+        }
+        #endif
 	/*
 	* Assign string dict.
 	*/
@@ -2324,10 +3093,25 @@ xmlPatternCompileSafe(const xmlChar *pattern, xmlDict *dict, int flags,
 	    xmlCompileIDCXPathPath(ctxt);
 	else
 	    xmlCompilePathPattern(ctxt);
-	if (ctxt->error != 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[70]) {
+	  if ((ctxt -> error != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 70\n");
+	  else
+	    fprintf(stderr, "reached bug index 70\n");
+	}
+	if ((!FIXREVERTER[70] && (ctxt -> error != 0 ))
+	#else
+	if (0
+	#endif
+	) {
             error = ctxt->error;
 	    goto error;
         }
+        #ifdef FRCOV
+        }
+        #endif
 	xmlFreePatParserContext(ctxt);
 	ctxt = NULL;
 
@@ -2437,15 +3221,60 @@ xmlPatternGetStreamCtxt(xmlPatternPtr comp)
 {
     xmlStreamCtxtPtr ret = NULL, cur;
 
-    if ((comp == NULL) || (comp->stream == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[75]) {
+      if ((comp == (void *) 0 || comp -> stream == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 75\n");
+      else
+        fprintf(stderr, "reached bug index 75\n");
+    }
+    if ((!FIXREVERTER[75] && (comp == (void *) 0 || comp -> stream == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (comp != NULL) {
-        if (comp->stream == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[76]) {
+          if ((comp -> stream == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 76\n");
+          else
+            fprintf(stderr, "reached bug index 76\n");
+        }
+        if ((!FIXREVERTER[76] && (comp -> stream == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    goto failed;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	cur = xmlNewStreamCtxt(comp->stream);
-	if (cur == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[77]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 77\n");
+	  else
+	    fprintf(stderr, "reached bug index 77\n");
+	}
+	if ((!FIXREVERTER[77] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto failed;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (ret == NULL)
 	    ret = cur;
 	else {
diff --git a/relaxng.c b/relaxng.c
index 24c3e510..922fb660 100644
--- a/relaxng.c
+++ b/relaxng.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * relaxng.c : implementation of the Relax-NG handling and validity checking
  *
@@ -989,27 +993,72 @@ xmlRelaxNGNewStates(xmlRelaxNGValidCtxtPtr ctxt, int size)
         ret->nbState = 0;
         return (ret);
     }
-    if (size < 16)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3109]) {
+      if ((size < 16 ) && !(0))
+        fprintf(stderr, "triggered bug index 3109\n");
+      else
+        fprintf(stderr, "reached bug index 3109\n");
+    }
+    if ((!FIXREVERTER[3109] && (size < 16 ))
+    #else
+    if (0
+    #endif
+    )
         size = 16;
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlRelaxNGStatesPtr) xmlMalloc(sizeof(xmlRelaxNGStates) +
                                           (size -
                                            1) *
                                           sizeof(xmlRelaxNGValidStatePtr));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3110]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3110\n");
+      else
+        fprintf(stderr, "reached bug index 3110\n");
+    }
+    if ((!FIXREVERTER[3110] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->nbState = 0;
     ret->maxState = size;
     ret->tabState = (xmlRelaxNGValidStatePtr *) xmlMalloc((size) *
                                                           sizeof
                                                           (xmlRelaxNGValidStatePtr));
-    if (ret->tabState == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3111]) {
+      if ((ret -> tabState == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3111\n");
+      else
+        fprintf(stderr, "reached bug index 3111\n");
+    }
+    if ((!FIXREVERTER[3111] && (ret -> tabState == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt);
         xmlFree(ret);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (ret);
 }
 
@@ -1029,9 +1078,24 @@ xmlRelaxNGAddStatesUniq(xmlRelaxNGValidCtxtPtr ctxt,
                         xmlRelaxNGStatesPtr states,
                         xmlRelaxNGValidStatePtr state)
 {
-    if (state == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3112]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3112\n");
+      else
+        fprintf(stderr, "reached bug index 3112\n");
+    }
+    if ((!FIXREVERTER[3112] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (states->nbState >= states->maxState) {
         xmlRelaxNGValidStatePtr *tmp;
         int size;
@@ -1041,10 +1105,25 @@ xmlRelaxNGAddStatesUniq(xmlRelaxNGValidCtxtPtr ctxt,
                                                      (size) *
                                                      sizeof
                                                      (xmlRelaxNGValidStatePtr));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3113]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3113\n");
+          else
+            fprintf(stderr, "reached bug index 3113\n");
+        }
+        if ((!FIXREVERTER[3113] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt);
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         states->tabState = tmp;
         states->maxState = size;
     }
@@ -1069,9 +1148,24 @@ xmlRelaxNGAddStates(xmlRelaxNGValidCtxtPtr ctxt,
 {
     int i;
 
-    if (state == NULL || states == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3114]) {
+      if ((state == (void *) 0 || states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3114\n");
+      else
+        fprintf(stderr, "reached bug index 3114\n");
+    }
+    if ((!FIXREVERTER[3114] && (state == (void *) 0 || states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (states->nbState >= states->maxState) {
         xmlRelaxNGValidStatePtr *tmp;
         int size;
@@ -1081,10 +1175,25 @@ xmlRelaxNGAddStates(xmlRelaxNGValidCtxtPtr ctxt,
                                                      (size) *
                                                      sizeof
                                                      (xmlRelaxNGValidStatePtr));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3115]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3115\n");
+          else
+            fprintf(stderr, "reached bug index 3115\n");
+        }
+        if ((!FIXREVERTER[3115] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt);
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         states->tabState = tmp;
         states->maxState = size;
     }
@@ -1109,8 +1218,23 @@ static void
 xmlRelaxNGFreeStates(xmlRelaxNGValidCtxtPtr ctxt,
                      xmlRelaxNGStatesPtr states)
 {
-    if (states == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3116]) {
+      if ((states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3116\n");
+      else
+        fprintf(stderr, "reached bug index 3116\n");
+    }
+    if ((!FIXREVERTER[3116] && (states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt != NULL) && (ctxt->freeStates == NULL)) {
         ctxt->freeStatesMax = 40;
         ctxt->freeStatesNr = 0;
@@ -1119,8 +1243,22 @@ xmlRelaxNGFreeStates(xmlRelaxNGValidCtxtPtr ctxt,
         if (ctxt->freeStates == NULL) {
             xmlRngVErrMemory(ctxt);
         }
-    } else if ((ctxt != NULL)
-               && (ctxt->freeStatesNr >= ctxt->freeStatesMax)) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[3117]) {
+      fprintf(stderr, "reached bug index 3117\n");
+    }
+    if ((FIXREVERTER[3117] && (ctxt != (void *) 0 )) || (!FIXREVERTER[3117] && (ctxt != (void *) 0 && ctxt -> freeStatesNr >= ctxt -> freeStatesMax ))
+    #else
+    if (ctxt != (void *) 0 
+    #endif
+    ) {
+                 
+               #ifdef FRCOV
+                 if (!(ctxt -> freeStatesNr >= ctxt -> freeStatesMax ))
+                   fprintf(stderr, "triggered bug index 3117\n");
+                 #endif
+               
         xmlRelaxNGStatesPtr *tmp;
 
         tmp = (xmlRelaxNGStatesPtr *) xmlRealloc(ctxt->freeStates,
@@ -1136,6 +1274,9 @@ xmlRelaxNGFreeStates(xmlRelaxNGValidCtxtPtr ctxt,
         ctxt->freeStates = tmp;
         ctxt->freeStatesMax *= 2;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((ctxt == NULL) || (ctxt->freeStates == NULL)) {
         xmlFree(states->tabState);
         xmlFree(states);
@@ -1164,8 +1305,23 @@ xmlRelaxNGNewValidState(xmlRelaxNGValidCtxtPtr ctxt, xmlNodePtr node)
 
     if (node == NULL) {
         root = xmlDocGetRootElement(ctxt->doc);
-        if (root == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3118]) {
+          if ((root == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3118\n");
+          else
+            fprintf(stderr, "reached bug index 3118\n");
+        }
+        if ((!FIXREVERTER[3118] && (root == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return (NULL);
+            #ifdef FRCOV
+            }
+            #endif
     } else {
         attr = node->properties;
         while (attr != NULL) {
@@ -1183,10 +1339,25 @@ xmlRelaxNGNewValidState(xmlRelaxNGValidCtxtPtr ctxt, xmlNodePtr node)
         ret =
             (xmlRelaxNGValidStatePtr)
             xmlMalloc(sizeof(xmlRelaxNGValidState));
-        if (ret == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3119]) {
+          if ((ret == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3119\n");
+          else
+            fprintf(stderr, "reached bug index 3119\n");
+        }
+        if ((!FIXREVERTER[3119] && (ret == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt);
             return (NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
         memset(ret, 0, sizeof(xmlRelaxNGValidState));
     }
     ret->value = NULL;
@@ -1207,19 +1378,49 @@ xmlRelaxNGNewValidState(xmlRelaxNGValidCtxtPtr ctxt, xmlNodePtr node)
                 ret->maxAttrs = nbAttrs;
             ret->attrs = (xmlAttrPtr *) xmlMalloc(ret->maxAttrs *
                                                   sizeof(xmlAttrPtr));
-            if (ret->attrs == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3120]) {
+              if ((ret -> attrs == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3120\n");
+              else
+                fprintf(stderr, "reached bug index 3120\n");
+            }
+            if ((!FIXREVERTER[3120] && (ret -> attrs == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlRngVErrMemory(ctxt);
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
         } else if (ret->maxAttrs < nbAttrs) {
             xmlAttrPtr *tmp;
 
             tmp = (xmlAttrPtr *) xmlRealloc(ret->attrs, nbAttrs *
                                             sizeof(xmlAttrPtr));
-            if (tmp == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3121]) {
+              if ((tmp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3121\n");
+              else
+                fprintf(stderr, "reached bug index 3121\n");
+            }
+            if ((!FIXREVERTER[3121] && (tmp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlRngVErrMemory(ctxt);
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
             ret->attrs = tmp;
             ret->maxAttrs = nbAttrs;
         }
@@ -1256,8 +1457,23 @@ xmlRelaxNGCopyValidState(xmlRelaxNGValidCtxtPtr ctxt,
     unsigned int maxAttrs;
     xmlAttrPtr *attrs;
 
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3122]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3122\n");
+      else
+        fprintf(stderr, "reached bug index 3122\n");
+    }
+    if ((!FIXREVERTER[3122] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->freeState != NULL) && (ctxt->freeState->nbState > 0)) {
         ctxt->freeState->nbState--;
         ret = ctxt->freeState->tabState[ctxt->freeState->nbState];
@@ -1265,10 +1481,25 @@ xmlRelaxNGCopyValidState(xmlRelaxNGValidCtxtPtr ctxt,
         ret =
             (xmlRelaxNGValidStatePtr)
             xmlMalloc(sizeof(xmlRelaxNGValidState));
-        if (ret == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3123]) {
+          if ((ret == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3123\n");
+          else
+            fprintf(stderr, "reached bug index 3123\n");
+        }
+        if ((!FIXREVERTER[3123] && (ret == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt);
             return (NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
         memset(ret, 0, sizeof(xmlRelaxNGValidState));
     }
     attrs = ret->attrs;
@@ -1281,21 +1512,51 @@ xmlRelaxNGCopyValidState(xmlRelaxNGValidCtxtPtr ctxt,
             ret->maxAttrs = state->maxAttrs;
             ret->attrs = (xmlAttrPtr *) xmlMalloc(ret->maxAttrs *
                                                   sizeof(xmlAttrPtr));
-            if (ret->attrs == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3124]) {
+              if ((ret -> attrs == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3124\n");
+              else
+                fprintf(stderr, "reached bug index 3124\n");
+            }
+            if ((!FIXREVERTER[3124] && (ret -> attrs == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlRngVErrMemory(ctxt);
                 ret->nbAttrs = 0;
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
         } else if (ret->maxAttrs < state->nbAttrs) {
             xmlAttrPtr *tmp;
 
             tmp = (xmlAttrPtr *) xmlRealloc(ret->attrs, state->maxAttrs *
                                             sizeof(xmlAttrPtr));
-            if (tmp == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3125]) {
+              if ((tmp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3125\n");
+              else
+                fprintf(stderr, "reached bug index 3125\n");
+            }
+            if ((!FIXREVERTER[3125] && (tmp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlRngVErrMemory(ctxt);
                 ret->nbAttrs = 0;
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
             ret->maxAttrs = state->maxAttrs;
             ret->attrs = tmp;
         }
@@ -1322,18 +1583,63 @@ xmlRelaxNGEqualValidState(xmlRelaxNGValidCtxtPtr ctxt ATTRIBUTE_UNUSED,
 {
     int i;
 
-    if ((state1 == NULL) || (state2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3126]) {
+      if ((state1 == (void *) 0 || state2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3126\n");
+      else
+        fprintf(stderr, "reached bug index 3126\n");
+    }
+    if ((!FIXREVERTER[3126] && (state1 == (void *) 0 || state2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     if (state1 == state2)
         return (1);
     if (state1->node != state2->node)
         return (0);
     if (state1->seq != state2->seq)
         return (0);
-    if (state1->nbAttrLeft != state2->nbAttrLeft)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3127]) {
+      if ((state1 -> nbAttrLeft != state2 -> nbAttrLeft ) && !(0))
+        fprintf(stderr, "triggered bug index 3127\n");
+      else
+        fprintf(stderr, "reached bug index 3127\n");
+    }
+    if ((!FIXREVERTER[3127] && (state1 -> nbAttrLeft != state2 -> nbAttrLeft ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
-    if (state1->nbAttrs != state2->nbAttrs)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3128]) {
+      if ((state1 -> nbAttrs != state2 -> nbAttrs ) && !(0))
+        fprintf(stderr, "triggered bug index 3128\n");
+      else
+        fprintf(stderr, "reached bug index 3128\n");
+    }
+    if ((!FIXREVERTER[3128] && (state1 -> nbAttrs != state2 -> nbAttrs ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     if (state1->endvalue != state2->endvalue)
         return (0);
     if ((state1->value != state2->value) &&
@@ -1356,8 +1662,23 @@ static void
 xmlRelaxNGFreeValidState(xmlRelaxNGValidCtxtPtr ctxt,
                          xmlRelaxNGValidStatePtr state)
 {
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3129]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3129\n");
+      else
+        fprintf(stderr, "reached bug index 3129\n");
+    }
+    if ((!FIXREVERTER[3129] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((ctxt != NULL) && (ctxt->freeState == NULL)) {
         ctxt->freeState = xmlRelaxNGNewStates(ctxt, 40);
@@ -1765,10 +2086,25 @@ xmlRelaxNGValidErrorPush(xmlRelaxNGValidCtxtPtr ctxt,
             (xmlRelaxNGValidErrorPtr) xmlMalloc(ctxt->errMax *
                                                 sizeof
                                                 (xmlRelaxNGValidError));
-        if (ctxt->errTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3141]) {
+          if ((ctxt -> errTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3141\n");
+          else
+            fprintf(stderr, "reached bug index 3141\n");
+        }
+        if ((!FIXREVERTER[3141] && (ctxt -> errTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt);
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->err = NULL;
     }
     if (ctxt->errNr >= ctxt->errMax) {
@@ -1778,10 +2114,25 @@ xmlRelaxNGValidErrorPush(xmlRelaxNGValidCtxtPtr ctxt,
                                                  ctxt->errMax *
                                                  sizeof
                                                  (xmlRelaxNGValidError));
-        if (ctxt->errTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3142]) {
+          if ((ctxt -> errTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3142\n");
+          else
+            fprintf(stderr, "reached bug index 3142\n");
+        }
+        if ((!FIXREVERTER[3142] && (ctxt -> errTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt);
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->err = &ctxt->errTab[ctxt->errNr - 1];
     }
     if ((ctxt->err != NULL) && (ctxt->state != NULL) &&
@@ -1820,10 +2171,25 @@ xmlRelaxNGValidErrorPop(xmlRelaxNGValidCtxtPtr ctxt)
 {
     xmlRelaxNGValidErrorPtr cur;
 
-    if (ctxt->errNr <= 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3143]) {
+      if ((ctxt -> errNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3143\n");
+      else
+        fprintf(stderr, "reached bug index 3143\n");
+    }
+    if ((!FIXREVERTER[3143] && (ctxt -> errNr <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         ctxt->err = NULL;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->errNr--;
     if (ctxt->errNr > 0)
         ctxt->err = &ctxt->errTab[ctxt->errNr - 1];
@@ -2079,10 +2445,40 @@ xmlRelaxNGGetErrorString(xmlRelaxNGValidErr err, const xmlChar * arg1,
     char msg[1000];
     xmlChar *result;
 
-    if (arg1 == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3151]) {
+      if ((arg1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3151\n");
+      else
+        fprintf(stderr, "reached bug index 3151\n");
+    }
+    if ((!FIXREVERTER[3151] && (arg1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         arg1 = BAD_CAST "";
-    if (arg2 == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3152]) {
+      if ((arg2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3152\n");
+      else
+        fprintf(stderr, "reached bug index 3152\n");
+    }
+    if ((!FIXREVERTER[3152] && (arg2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         arg2 = BAD_CAST "";
+        #ifdef FRCOV
+        }
+        #endif
 
     msg[0] = 0;
     switch (err) {
@@ -2232,11 +2628,41 @@ xmlRelaxNGShowValidError(xmlRelaxNGValidCtxtPtr ctxt,
         return;
 
     msg = xmlRelaxNGGetErrorString(err, arg1, arg2);
-    if (msg == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3153]) {
+      if ((msg == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3153\n");
+      else
+        fprintf(stderr, "reached bug index 3153\n");
+    }
+    if ((!FIXREVERTER[3153] && (msg == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
-
-    if (ctxt->errNo == XML_RELAXNG_OK)
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3154]) {
+      if ((ctxt -> errNo == XML_RELAXNG_OK  ) && !(0))
+        fprintf(stderr, "triggered bug index 3154\n");
+      else
+        fprintf(stderr, "reached bug index 3154\n");
+    }
+    if ((!FIXREVERTER[3154] && (ctxt -> errNo == XML_RELAXNG_OK  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->errNo = err;
+        #ifdef FRCOV
+        }
+        #endif
     xmlRngVErr(ctxt, (child == NULL ? node : child), err,
                (const char *) msg, arg1, arg2);
     xmlFree(msg);
@@ -2268,8 +2694,23 @@ xmlRelaxNGPopErrors(xmlRelaxNGValidCtxtPtr ctxt, int level)
         }
     }
     ctxt->errNr = level;
-    if (ctxt->errNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3155]) {
+      if ((ctxt -> errNr <= 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3155\n");
+      else
+        fprintf(stderr, "reached bug index 3155\n");
+    }
+    if ((!FIXREVERTER[3155] && (ctxt -> errNr <= 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->err = NULL;
+        #ifdef FRCOV
+        }
+        #endif
 }
 
 /**
@@ -2329,8 +2770,23 @@ xmlRelaxNGAddValidError(xmlRelaxNGValidCtxtPtr ctxt,
                         xmlRelaxNGValidErr err, const xmlChar * arg1,
                         const xmlChar * arg2, int dup)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3156]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3156\n");
+      else
+        fprintf(stderr, "reached bug index 3156\n");
+    }
+    if ((!FIXREVERTER[3156] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->flags & FLAGS_NOERROR)
         return;
 
@@ -2390,13 +2846,43 @@ xmlRelaxNGSchemaTypeHave(void *data ATTRIBUTE_UNUSED, const xmlChar * type)
 {
     xmlSchemaTypePtr typ;
 
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3157]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3157\n");
+      else
+        fprintf(stderr, "reached bug index 3157\n");
+    }
+    if ((!FIXREVERTER[3157] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     typ = xmlSchemaGetPredefinedType(type,
                                      BAD_CAST
                                      "http://www.w3.org/2001/XMLSchema");
-    if (typ == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3158]) {
+      if ((typ == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3158\n");
+      else
+        fprintf(stderr, "reached bug index 3158\n");
+    }
+    if ((!FIXREVERTER[3158] && (typ == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
     return (1);
 }
 
@@ -2421,13 +2907,43 @@ xmlRelaxNGSchemaTypeCheck(void *data ATTRIBUTE_UNUSED,
     xmlSchemaTypePtr typ;
     int ret;
 
-    if ((type == NULL) || (value == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3159]) {
+      if ((type == (void *) 0 || value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3159\n");
+      else
+        fprintf(stderr, "reached bug index 3159\n");
+    }
+    if ((!FIXREVERTER[3159] && (type == (void *) 0 || value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     typ = xmlSchemaGetPredefinedType(type,
                                      BAD_CAST
                                      "http://www.w3.org/2001/XMLSchema");
-    if (typ == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3160]) {
+      if ((typ == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3160\n");
+      else
+        fprintf(stderr, "reached bug index 3160\n");
+    }
+    if ((!FIXREVERTER[3160] && (typ == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     ret = xmlSchemaValPredefTypeNode(typ, value,
                                      (xmlSchemaValPtr *) result, node);
     if (ret == 2)               /* special ID error code */
@@ -2462,17 +2978,62 @@ xmlRelaxNGSchemaFacetCheck(void *data ATTRIBUTE_UNUSED,
     xmlSchemaTypePtr typ;
     int ret;
 
-    if ((type == NULL) || (strval == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3164]) {
+      if ((type == (void *) 0 || strval == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3164\n");
+      else
+        fprintf(stderr, "reached bug index 3164\n");
+    }
+    if ((!FIXREVERTER[3164] && (type == (void *) 0 || strval == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     typ = xmlSchemaGetPredefinedType(type,
                                      BAD_CAST
                                      "http://www.w3.org/2001/XMLSchema");
-    if (typ == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3165]) {
+      if ((typ == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3165\n");
+      else
+        fprintf(stderr, "reached bug index 3165\n");
+    }
+    if ((!FIXREVERTER[3165] && (typ == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     facet = xmlSchemaNewFacet();
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3166]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3166\n");
+      else
+        fprintf(stderr, "reached bug index 3166\n");
+    }
+    if ((!FIXREVERTER[3166] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (xmlStrEqual(facetname, BAD_CAST "minInclusive")) {
         facet->type = XML_SCHEMA_FACET_MININCLUSIVE;
@@ -2554,19 +3115,64 @@ xmlRelaxNGSchemaTypeCompare(void *data ATTRIBUTE_UNUSED,
     xmlSchemaTypePtr typ;
     xmlSchemaValPtr res1 = NULL, res2 = NULL;
 
-    if ((type == NULL) || (value1 == NULL) || (value2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3169]) {
+      if ((type == (void *) 0 || value1 == (void *) 0 || value2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3169\n");
+      else
+        fprintf(stderr, "reached bug index 3169\n");
+    }
+    if ((!FIXREVERTER[3169] && (type == (void *) 0 || value1 == (void *) 0 || value2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     typ = xmlSchemaGetPredefinedType(type,
                                      BAD_CAST
                                      "http://www.w3.org/2001/XMLSchema");
-    if (typ == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3170]) {
+      if ((typ == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3170\n");
+      else
+        fprintf(stderr, "reached bug index 3170\n");
+    }
+    if ((!FIXREVERTER[3170] && (typ == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (comp1 == NULL) {
         ret = xmlSchemaValPredefTypeNode(typ, value1, &res1, ctxt1);
         if (ret != 0)
             return (-1);
-        if (res1 == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3172]) {
+          if ((res1 == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3172\n");
+          else
+            fprintf(stderr, "reached bug index 3172\n");
+        }
+        if ((!FIXREVERTER[3172] && (res1 == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return (-1);
+            #ifdef FRCOV
+            }
+            #endif
     } else {
         res1 = (xmlSchemaValPtr) comp1;
     }
@@ -2601,8 +3207,23 @@ static int
 xmlRelaxNGDefaultTypeHave(void *data ATTRIBUTE_UNUSED,
                           const xmlChar * type)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3175]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3175\n");
+      else
+        fprintf(stderr, "reached bug index 3175\n");
+    }
+    if ((!FIXREVERTER[3175] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (xmlStrEqual(type, BAD_CAST "string"))
         return (1);
     if (xmlStrEqual(type, BAD_CAST "token"))
@@ -2629,8 +3250,23 @@ xmlRelaxNGDefaultTypeCheck(void *data ATTRIBUTE_UNUSED,
                            void **result ATTRIBUTE_UNUSED,
                            xmlNodePtr node ATTRIBUTE_UNUSED)
 {
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3176]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3176\n");
+      else
+        fprintf(stderr, "reached bug index 3176\n");
+    }
+    if ((!FIXREVERTER[3176] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (xmlStrEqual(type, BAD_CAST "string"))
         return (1);
     if (xmlStrEqual(type, BAD_CAST "token")) {
@@ -2707,8 +3343,23 @@ xmlRelaxNGFreeTypeLibrary(void *payload,
                           const xmlChar * namespace ATTRIBUTE_UNUSED)
 {
     xmlRelaxNGTypeLibraryPtr lib = (xmlRelaxNGTypeLibraryPtr) payload;
-    if (lib == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3177]) {
+      if ((lib == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3177\n");
+      else
+        fprintf(stderr, "reached bug index 3177\n");
+    }
+    if ((!FIXREVERTER[3177] && (lib == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (lib->namespace != NULL)
         xmlFree((xmlChar *) lib->namespace);
     xmlFree(lib);
@@ -3359,8 +4010,23 @@ xmlRelaxNGIsNullable(xmlRelaxNGDefinePtr define)
 static int
 xmlRelaxNGIsBlank(xmlChar * str)
 {
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3199]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3199\n");
+      else
+        fprintf(stderr, "reached bug index 3199\n");
+    }
+    if ((!FIXREVERTER[3199] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
     while (*str != 0) {
         if (!(IS_BLANK_CH(*str)))
             return (0);
@@ -7832,27 +8498,89 @@ xmlRelaxNGValidateCompiledCallback(xmlRegExecCtxtPtr exec ATTRIBUTE_UNUSED,
     xmlRelaxNGDefinePtr define = (xmlRelaxNGDefinePtr) transdata;
     int ret;
 
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3328]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3328\n");
+      else
+        fprintf(stderr, "reached bug index 3328\n");
+    }
+    if ((!FIXREVERTER[3328] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         fprintf(stderr, "callback on %s missing context\n", token);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (define == NULL) {
         if (token[0] == '#')
             return;
         fprintf(stderr, "callback on %s missing define\n", token);
-        if ((ctxt != NULL) && (ctxt->errNo == XML_RELAXNG_OK))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3329]) {
+          fprintf(stderr, "reached bug index 3329\n");
+        }
+        if ((FIXREVERTER[3329] && (ctxt != (void *) 0 )) || (!FIXREVERTER[3329] && (ctxt != (void *) 0 && ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (ctxt != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(ctxt -> errNo == XML_RELAXNG_OK  ))
+              fprintf(stderr, "triggered bug index 3329\n");
+            #endif
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }}
+            #endif
         return;
     }
     if (define->type != XML_RELAXNG_ELEMENT) {
         fprintf(stderr, "callback on %s define is not element\n", token);
-        if (ctxt->errNo == XML_RELAXNG_OK)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3330]) {
+          if ((ctxt -> errNo == XML_RELAXNG_OK  ) && !(0))
+            fprintf(stderr, "triggered bug index 3330\n");
+          else
+            fprintf(stderr, "reached bug index 3330\n");
+        }
+        if ((!FIXREVERTER[3330] && (ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }
+            #endif
         return;
     }
     ret = xmlRelaxNGValidateDefinition(ctxt, define);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3331]) {
+      if ((ret != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3331\n");
+      else
+        fprintf(stderr, "reached bug index 3331\n");
+    }
+    if ((!FIXREVERTER[3331] && (ret != 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->perr = ret;
+        #ifdef FRCOV
+        }
+        #endif
 }
 
 /**
@@ -7874,8 +8602,23 @@ xmlRelaxNGValidateCompiledContent(xmlRelaxNGValidCtxtPtr ctxt,
     int ret = 0;
     int oldperr;
 
-    if ((ctxt == NULL) || (regexp == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3332]) {
+      if ((ctxt == (void *) 0 || regexp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3332\n");
+      else
+        fprintf(stderr, "reached bug index 3332\n");
+    }
+    if ((!FIXREVERTER[3332] && (ctxt == (void *) 0 || regexp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     oldperr = ctxt->perr;
     exec = xmlRegNewExecCtxt(regexp,
                              xmlRelaxNGValidateCompiledCallback, ctxt);
@@ -7935,9 +8678,27 @@ xmlRelaxNGValidateCompiledContent(xmlRelaxNGValidCtxtPtr ctxt,
      * There might be content model errors outside of the pure
      * regexp validation, e.g. for attribute values.
      */
-    if ((ret == 0) && (ctxt->perr != 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3334]) {
+      fprintf(stderr, "reached bug index 3334\n");
+    }
+    if ((FIXREVERTER[3334] && (ret == 0 )) || (!FIXREVERTER[3334] && (ret == 0 && ctxt -> perr != 0 ))
+    #else
+    if (ret == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> perr != 0 ))
+        fprintf(stderr, "triggered bug index 3334\n");
+      #endif
+    
         ret = ctxt->perr;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->perr = oldperr;
     return (ret);
 }
@@ -7970,10 +8731,25 @@ xmlRelaxNGElemPush(xmlRelaxNGValidCtxtPtr ctxt, xmlRegExecCtxtPtr exec)
         ctxt->elemTab = (xmlRegExecCtxtPtr *) xmlMalloc(ctxt->elemMax *
                                                         sizeof
                                                         (xmlRegExecCtxtPtr));
-        if (ctxt->elemTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3335]) {
+          if ((ctxt -> elemTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3335\n");
+          else
+            fprintf(stderr, "reached bug index 3335\n");
+        }
+        if ((!FIXREVERTER[3335] && (ctxt -> elemTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt);
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     if (ctxt->elemNr >= ctxt->elemMax) {
         ctxt->elemMax *= 2;
@@ -7981,10 +8757,25 @@ xmlRelaxNGElemPush(xmlRelaxNGValidCtxtPtr ctxt, xmlRegExecCtxtPtr exec)
                                                          ctxt->elemMax *
                                                          sizeof
                                                          (xmlRegExecCtxtPtr));
-        if (ctxt->elemTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3336]) {
+          if ((ctxt -> elemTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3336\n");
+          else
+            fprintf(stderr, "reached bug index 3336\n");
+        }
+        if ((!FIXREVERTER[3336] && (ctxt -> elemTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlRngVErrMemory(ctxt);
             return (-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     ctxt->elemTab[ctxt->elemNr++] = exec;
     ctxt->elem = exec;
@@ -8038,25 +8829,72 @@ xmlRelaxNGValidateProgressiveCallback(xmlRegExecCtxtPtr exec
     xmlNodePtr node;
     int ret = 0, oldflags;
 
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3338]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3338\n");
+      else
+        fprintf(stderr, "reached bug index 3338\n");
+    }
+    if ((!FIXREVERTER[3338] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         fprintf(stderr, "callback on %s missing context\n", token);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     node = ctxt->pnode;
     ctxt->pstate = 1;
     if (define == NULL) {
         if (token[0] == '#')
             return;
         fprintf(stderr, "callback on %s missing define\n", token);
-        if ((ctxt != NULL) && (ctxt->errNo == XML_RELAXNG_OK))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3339]) {
+          fprintf(stderr, "reached bug index 3339\n");
+        }
+        if ((FIXREVERTER[3339] && (ctxt != (void *) 0 )) || (!FIXREVERTER[3339] && (ctxt != (void *) 0 && ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (ctxt != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(ctxt -> errNo == XML_RELAXNG_OK  ))
+              fprintf(stderr, "triggered bug index 3339\n");
+            #endif
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }}
+            #endif
         ctxt->pstate = -1;
         return;
     }
     if (define->type != XML_RELAXNG_ELEMENT) {
         fprintf(stderr, "callback on %s define is not element\n", token);
-        if (ctxt->errNo == XML_RELAXNG_OK)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3340]) {
+          if ((ctxt -> errNo == XML_RELAXNG_OK  ) && !(0))
+            fprintf(stderr, "triggered bug index 3340\n");
+          else
+            fprintf(stderr, "reached bug index 3340\n");
+        }
+        if ((!FIXREVERTER[3340] && (ctxt -> errNo == XML_RELAXNG_OK  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->errNo = XML_RELAXNG_ERR_INTERNAL;
+            #ifdef FRCOV
+            }
+            #endif
         ctxt->pstate = -1;
         return;
     }
@@ -8067,7 +8905,19 @@ xmlRelaxNGValidateProgressiveCallback(xmlRegExecCtxtPtr exec
         ctxt->pstate = -1;
         return;
     }
-    if (define->contModel == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3341]) {
+      if ((define -> contModel == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3341\n");
+      else
+        fprintf(stderr, "reached bug index 3341\n");
+    }
+    if ((!FIXREVERTER[3341] && (define -> contModel == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /*
          * this node cannot be validated in a streamable fashion
          */
@@ -8075,22 +8925,55 @@ xmlRelaxNGValidateProgressiveCallback(xmlRegExecCtxtPtr exec
         ctxt->pdef = define;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     exec = xmlRegNewExecCtxt(define->contModel,
                              xmlRelaxNGValidateProgressiveCallback, ctxt);
-    if (exec == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3342]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3342\n");
+      else
+        fprintf(stderr, "reached bug index 3342\n");
+    }
+    if ((!FIXREVERTER[3342] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         ctxt->pstate = -1;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     xmlRelaxNGElemPush(ctxt, exec);
 
     /*
      * Validate the attributes part of the content.
      */
     state = xmlRelaxNGNewValidState(ctxt, node);
-    if (state == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3343]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3343\n");
+      else
+        fprintf(stderr, "reached bug index 3343\n");
+    }
+    if ((!FIXREVERTER[3343] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         ctxt->pstate = -1;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     oldstate = ctxt->state;
     ctxt->state = state;
     if (define->attrs != NULL) {
@@ -8387,18 +9270,48 @@ xmlRelaxNGNormalize(xmlRelaxNGValidCtxtPtr ctxt, const xmlChar * str)
     const xmlChar *tmp;
     int len;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3354]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3354\n");
+      else
+        fprintf(stderr, "reached bug index 3354\n");
+    }
+    if ((!FIXREVERTER[3354] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     tmp = str;
     while (*tmp != 0)
         tmp++;
     len = tmp - str;
 
     ret = (xmlChar *) xmlMallocAtomic(len + 1);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3355]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3355\n");
+      else
+        fprintf(stderr, "reached bug index 3355\n");
+    }
+    if ((!FIXREVERTER[3355] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     p = ret;
     while (IS_BLANK_CH(*str))
         str++;
@@ -8437,9 +9350,24 @@ xmlRelaxNGValidateDatatype(xmlRelaxNGValidCtxtPtr ctxt,
     void *result = NULL;
     xmlRelaxNGDefinePtr cur;
 
-    if ((define == NULL) || (define->data == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3356]) {
+      if ((define == (void *) 0 || define -> data == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3356\n");
+      else
+        fprintf(stderr, "reached bug index 3356\n");
+    }
+    if ((!FIXREVERTER[3356] && (define == (void *) 0 || define -> data == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     lib = (xmlRelaxNGTypeLibraryPtr) define->data;
     if (lib->check != NULL) {
         if ((define->attrs != NULL) &&
@@ -8453,8 +9381,25 @@ xmlRelaxNGValidateDatatype(xmlRelaxNGValidCtxtPtr ctxt,
         ret = -1;
     if (ret < 0) {
         VALID_ERR2(XML_RELAXNG_ERR_TYPE, define->name);
-        if ((result != NULL) && (lib != NULL) && (lib->freef != NULL))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3357]) {
+          fprintf(stderr, "reached bug index 3357\n");
+        }
+        if ((FIXREVERTER[3357] && (result != (void *) 0 && lib != (void *) 0 )) || (!FIXREVERTER[3357] && (result != (void *) 0 && lib != (void *) 0 && lib -> freef != (void *) 0 ))
+        #else
+        if (result != (void *) 0 && lib != (void *) 0 
+        #endif
+        )
+            
+            #ifdef FRCOV
+            {if (!(lib -> freef != (void *) 0 ))
+              fprintf(stderr, "triggered bug index 3357\n");
+            #endif
             lib->freef(lib->data, result);
+            #ifdef FRCOV
+            }}
+            #endif
         return (-1);
     } else if (ret == 1) {
         ret = 0;
@@ -8469,12 +9414,42 @@ xmlRelaxNGValidateDatatype(xmlRelaxNGValidCtxtPtr ctxt,
         if (lib->facet != NULL) {
             tmp = lib->facet(lib->data, define->name, cur->name,
                              cur->value, value, result);
-            if (tmp != 0)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3358]) {
+              if ((tmp != 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3358\n");
+              else
+                fprintf(stderr, "reached bug index 3358\n");
+            }
+            if ((!FIXREVERTER[3358] && (tmp != 0 ))
+            #else
+            if (0
+            #endif
+            )
                 ret = -1;
+                #ifdef FRCOV
+                }
+                #endif
         }
         cur = cur->next;
     }
-    if ((ret == 0) && (define->content != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3359]) {
+      fprintf(stderr, "reached bug index 3359\n");
+    }
+    if ((FIXREVERTER[3359] && (ret == 0 )) || (!FIXREVERTER[3359] && (ret == 0 && define -> content != (void *) 0 ))
+    #else
+    if (ret == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(define -> content != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3359\n");
+      #endif
+    
         const xmlChar *oldvalue, *oldendvalue;
 
         oldvalue = ctxt->state->value;
@@ -8485,8 +9460,28 @@ xmlRelaxNGValidateDatatype(xmlRelaxNGValidCtxtPtr ctxt,
         ctxt->state->value = (xmlChar *) oldvalue;
         ctxt->state->endvalue = (xmlChar *) oldendvalue;
     }
-    if ((result != NULL) && (lib != NULL) && (lib->freef != NULL))
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3360]) {
+      fprintf(stderr, "reached bug index 3360\n");
+    }
+    if ((FIXREVERTER[3360] && (result != (void *) 0 && lib != (void *) 0 )) || (!FIXREVERTER[3360] && (result != (void *) 0 && lib != (void *) 0 && lib -> freef != (void *) 0 ))
+    #else
+    if (result != (void *) 0 && lib != (void *) 0 
+    #endif
+    )
+        
+        #ifdef FRCOV
+        {if (!(lib -> freef != (void *) 0 ))
+          fprintf(stderr, "triggered bug index 3360\n");
+        #endif
         lib->freef(lib->data, result);
+        #ifdef FRCOV
+        }}
+        #endif
     return (ret);
 }
 
@@ -8537,8 +9532,23 @@ xmlRelaxNGValidateValueList(xmlRelaxNGValidCtxtPtr ctxt,
 
     while (defines != NULL) {
         ret = xmlRelaxNGValidateValue(ctxt, defines);
-        if (ret != 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3361]) {
+          if ((ret != 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3361\n");
+          else
+            fprintf(stderr, "reached bug index 3361\n");
+        }
+        if ((!FIXREVERTER[3361] && (ret != 0 ))
+        #else
+        if (0
+        #endif
+        )
             break;
+            #ifdef FRCOV
+            }
+            #endif
         defines = defines->next;
     }
     return (ret);
@@ -8638,9 +9648,24 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
                 oldvalue = ctxt->state->value;
                 while (list != NULL) {
                     ret = xmlRelaxNGValidateValue(ctxt, list);
-                    if (ret == 0) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3362]) {
+                      if ((ret == 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3362\n");
+                      else
+                        fprintf(stderr, "reached bug index 3362\n");
+                    }
+                    if ((!FIXREVERTER[3362] && (ret == 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ctxt->state->value = oldvalue;
                     list = list->next;
                 }
@@ -8665,10 +9690,25 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
                 if (val == NULL) {
                     val = xmlStrdup(BAD_CAST "");
                 }
-                if (val == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3363]) {
+                  if ((val == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3363\n");
+                  else
+                    fprintf(stderr, "reached bug index 3363\n");
+                }
+                if ((!FIXREVERTER[3363] && (val == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     VALID_ERR(XML_RELAXNG_ERR_NOSTATE);
                     return (-1);
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 cur = val;
                 while (*cur != 0) {
                     if (IS_BLANK_CH(*cur)) {
@@ -8690,9 +9730,24 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
                     if (ctxt->state->value == ctxt->state->endvalue)
                         ctxt->state->value = NULL;
                     ret = xmlRelaxNGValidateValue(ctxt, list);
-                    if (ret != 0) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3364]) {
+                      if ((ret != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3364\n");
+                      else
+                        fprintf(stderr, "reached bug index 3364\n");
+                    }
+                    if ((!FIXREVERTER[3364] && (ret != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     list = list->next;
                 }
 
@@ -8709,9 +9764,24 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
             }
         case XML_RELAXNG_ONEORMORE:
             ret = xmlRelaxNGValidateValueList(ctxt, define->content);
-            if (ret != 0) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3365]) {
+              if ((ret != 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3365\n");
+              else
+                fprintf(stderr, "reached bug index 3365\n");
+            }
+            if ((!FIXREVERTER[3365] && (ret != 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
             /* Falls through. */
         case XML_RELAXNG_ZEROORMORE:{
                 xmlChar *cur, *temp;
@@ -8730,11 +9800,26 @@ xmlRelaxNGValidateValue(xmlRelaxNGValidCtxtPtr ctxt,
                     temp = cur;
                     ret =
                         xmlRelaxNGValidateValueList(ctxt, define->content);
-                    if (ret != 0) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3366]) {
+                      if ((ret != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3366\n");
+                      else
+                        fprintf(stderr, "reached bug index 3366\n");
+                    }
+                    if ((!FIXREVERTER[3366] && (ret != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         ctxt->state->value = temp;
                         ret = 0;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     cur = ctxt->state->value;
                 }
                 ctxt->flags = oldflags;
@@ -8830,8 +9915,23 @@ xmlRelaxNGValidateValueContent(xmlRelaxNGValidCtxtPtr ctxt,
 
     while (defines != NULL) {
         ret = xmlRelaxNGValidateValue(ctxt, defines);
-        if (ret != 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3367]) {
+          if ((ret != 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3367\n");
+          else
+            fprintf(stderr, "reached bug index 3367\n");
+        }
+        if ((!FIXREVERTER[3367] && (ret != 0 ))
+        #else
+        if (0
+        #endif
+        )
             break;
+            #ifdef FRCOV
+            }
+            #endif
         defines = defines->next;
     }
     return (ret);
@@ -8867,8 +9967,23 @@ xmlRelaxNGAttributeMatch(xmlRelaxNGValidCtxtPtr ctxt,
                 return (0);
         }
     }
-    if (define->nameClass == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3368]) {
+      if ((define -> nameClass == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3368\n");
+      else
+        fprintf(stderr, "reached bug index 3368\n");
+    }
+    if ((!FIXREVERTER[3368] && (define -> nameClass == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
     define = define->nameClass;
     if (define->type == XML_RELAXNG_EXCEPT) {
         xmlRelaxNGDefinePtr list;
@@ -9059,8 +10174,23 @@ xmlRelaxNGNodeMatchesList(xmlNodePtr node, xmlRelaxNGDefinePtr * list)
     xmlRelaxNGDefinePtr cur;
     int i = 0, tmp;
 
-    if ((node == NULL) || (list == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3374]) {
+      if ((node == (void *) 0 || list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3374\n");
+      else
+        fprintf(stderr, "reached bug index 3374\n");
+    }
+    if ((!FIXREVERTER[3374] && (node == (void *) 0 || list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = list[i++];
     while (cur != NULL) {
@@ -9149,16 +10279,46 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
      * pertaining to each group
      */
     list = (xmlNodePtr *) xmlMalloc(nbgroups * sizeof(xmlNodePtr));
-    if (list == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3376]) {
+      if ((list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3376\n");
+      else
+        fprintf(stderr, "reached bug index 3376\n");
+    }
+    if ((!FIXREVERTER[3376] && (list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt);
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(list, 0, nbgroups * sizeof(xmlNodePtr));
     lasts = (xmlNodePtr *) xmlMalloc(nbgroups * sizeof(xmlNodePtr));
-    if (lasts == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3377]) {
+      if ((lasts == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3377\n");
+      else
+        fprintf(stderr, "reached bug index 3377\n");
+    }
+    if ((!FIXREVERTER[3377] && (lasts == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRngVErrMemory(ctxt);
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(lasts, 0, nbgroups * sizeof(xmlNodePtr));
 
     /*
@@ -9182,18 +10342,48 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
                 if (cur->ns != NULL) {
                     tmp = xmlHashLookup2(partitions->triage, cur->name,
                                          cur->ns->href);
-                    if (tmp == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3378]) {
+                      if ((tmp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3378\n");
+                      else
+                        fprintf(stderr, "reached bug index 3378\n");
+                    }
+                    if ((!FIXREVERTER[3378] && (tmp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         tmp = xmlHashLookup2(partitions->triage,
                                              BAD_CAST "#any",
                                              cur->ns->href);
+                                             #ifdef FRCOV
+                                             }
+                                             #endif
                 } else
                     tmp =
                         xmlHashLookup2(partitions->triage, cur->name,
                                        NULL);
-                if (tmp == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3379]) {
+                  if ((tmp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3379\n");
+                  else
+                    fprintf(stderr, "reached bug index 3379\n");
+                }
+                if ((!FIXREVERTER[3379] && (tmp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     tmp =
                         xmlHashLookup2(partitions->triage, BAD_CAST "#any",
                                        NULL);
+                                       #ifdef FRCOV
+                                       }
+                                       #endif
             }
 
             if (tmp == NULL) {
@@ -9209,8 +10399,23 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
         } else {
             for (i = 0; i < nbgroups; i++) {
                 group = partitions->groups[i];
-                if (group == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3380]) {
+                  if ((group == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3380\n");
+                  else
+                    fprintf(stderr, "reached bug index 3380\n");
+                }
+                if ((!FIXREVERTER[3380] && (group == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     continue;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 if (xmlRelaxNGNodeMatchesList(cur, group->defs))
                     break;
             }
@@ -9218,9 +10423,24 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
         /*
          * We break as soon as an element not matched is found
          */
-        if (i >= nbgroups) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3381]) {
+          if ((i >= nbgroups ) && !(0))
+            fprintf(stderr, "triggered bug index 3381\n");
+          else
+            fprintf(stderr, "reached bug index 3381\n");
+        }
+        if ((!FIXREVERTER[3381] && (i >= nbgroups ))
+        #else
+        if (0
+        #endif
+        ) {
             break;
         }
+        #ifdef FRCOV
+        }
+        #endif
         if (lasts[i] != NULL) {
             lasts[i]->next = cur;
             lasts[i] = cur;
@@ -9243,10 +10463,25 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
     oldstate = ctxt->state;
     for (i = 0; i < nbgroups; i++) {
         ctxt->state = xmlRelaxNGCopyValidState(ctxt, oldstate);
-	if (ctxt->state == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3382]) {
+	  if ((ctxt -> state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3382\n");
+	  else
+	    fprintf(stderr, "reached bug index 3382\n");
+	}
+	if ((!FIXREVERTER[3382] && (ctxt -> state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ret = -1;
 	    break;
 	}
+	#ifdef FRCOV
+	}
+	#endif
         group = partitions->groups[i];
         if (lasts[i] != NULL) {
             last = lasts[i]->next;
@@ -9254,8 +10489,23 @@ xmlRelaxNGValidateInterleave(xmlRelaxNGValidCtxtPtr ctxt,
         }
         ctxt->state->seq = list[i];
         ret = xmlRelaxNGValidateDefinition(ctxt, group->rule);
-        if (ret != 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3383]) {
+          if ((ret != 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3383\n");
+          else
+            fprintf(stderr, "reached bug index 3383\n");
+        }
+        if ((!FIXREVERTER[3383] && (ret != 0 ))
+        #else
+        if (0
+        #endif
+        )
             break;
+            #ifdef FRCOV
+            }
+            #endif
         if (ctxt->state != NULL) {
             cur = ctxt->state->seq;
             cur = xmlRelaxNGSkipIgnored(ctxt, cur);
@@ -9403,16 +10653,46 @@ xmlRelaxNGValidateDefinitionList(xmlRelaxNGValidCtxtPtr ctxt,
     int ret = 0, res;
 
 
-    if (defines == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3385]) {
+      if ((defines == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3385\n");
+      else
+        fprintf(stderr, "reached bug index 3385\n");
+    }
+    if ((!FIXREVERTER[3385] && (defines == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         VALID_ERR2(XML_RELAXNG_ERR_INTERNAL,
                    BAD_CAST "NULL definition list");
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     while (defines != NULL) {
         if ((ctxt->state != NULL) || (ctxt->states != NULL)) {
             res = xmlRelaxNGValidateDefinition(ctxt, defines);
-            if (res < 0)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3386]) {
+              if ((res < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3386\n");
+              else
+                fprintf(stderr, "reached bug index 3386\n");
+            }
+            if ((!FIXREVERTER[3386] && (res < 0 ))
+            #else
+            if (0
+            #endif
+            )
                 ret = -1;
+                #ifdef FRCOV
+                }
+                #endif
         } else {
             VALID_ERR(XML_RELAXNG_ERR_NOSTATE);
             return (-1);
@@ -9465,8 +10745,23 @@ xmlRelaxNGElementMatch(xmlRelaxNGValidCtxtPtr ctxt,
         return (0);
     }
 
-    if (define->nameClass == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3387]) {
+      if ((define -> nameClass == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3387\n");
+      else
+        fprintf(stderr, "reached bug index 3387\n");
+    }
+    if ((!FIXREVERTER[3387] && (define -> nameClass == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
 
     define = define->nameClass;
     if (define->type == XML_RELAXNG_EXCEPT) {
@@ -9480,16 +10775,76 @@ xmlRelaxNGElementMatch(xmlRelaxNGValidCtxtPtr ctxt,
         list = define->content;
         while (list != NULL) {
             ret = xmlRelaxNGElementMatch(ctxt, list, elem);
-            if (ret == 1) {
-                if (ctxt != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3389]) {
+              if ((ret == 1 ) && !(0))
+                fprintf(stderr, "triggered bug index 3389\n");
+              else
+                fprintf(stderr, "reached bug index 3389\n");
+            }
+            if ((!FIXREVERTER[3389] && (ret == 1 ))
+            #else
+            if (0
+            #endif
+            ) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3388]) {
+                  if ((ctxt != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 3388\n");
+                  else
+                    fprintf(stderr, "reached bug index 3388\n");
+                }
+                if ((!FIXREVERTER[3388] && (ctxt != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     ctxt->flags = oldflags;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return (0);
             }
-            if (ret < 0) {
-                if (ctxt != NULL)
+            #ifdef FRCOV
+            }
+            #endif
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3391]) {
+              if ((ret < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3391\n");
+              else
+                fprintf(stderr, "reached bug index 3391\n");
+            }
+            if ((!FIXREVERTER[3391] && (ret < 0 ))
+            #else
+            if (0
+            #endif
+            ) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3390]) {
+                  if ((ctxt != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 3390\n");
+                  else
+                    fprintf(stderr, "reached bug index 3390\n");
+                }
+                if ((!FIXREVERTER[3390] && (ctxt != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     ctxt->flags = oldflags;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
             list = list->next;
         }
         ret = 1;
@@ -9507,16 +10862,76 @@ xmlRelaxNGElementMatch(xmlRelaxNGValidCtxtPtr ctxt,
         list = define->nameClass;
         while (list != NULL) {
             ret = xmlRelaxNGElementMatch(ctxt, list, elem);
-            if (ret == 1) {
-                if (ctxt != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3393]) {
+              if ((ret == 1 ) && !(0))
+                fprintf(stderr, "triggered bug index 3393\n");
+              else
+                fprintf(stderr, "reached bug index 3393\n");
+            }
+            if ((!FIXREVERTER[3393] && (ret == 1 ))
+            #else
+            if (0
+            #endif
+            ) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3392]) {
+                  if ((ctxt != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 3392\n");
+                  else
+                    fprintf(stderr, "reached bug index 3392\n");
+                }
+                if ((!FIXREVERTER[3392] && (ctxt != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     ctxt->flags = oldflags;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return (1);
             }
-            if (ret < 0) {
-                if (ctxt != NULL)
+            #ifdef FRCOV
+            }
+            #endif
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3395]) {
+              if ((ret < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3395\n");
+              else
+                fprintf(stderr, "reached bug index 3395\n");
+            }
+            if ((!FIXREVERTER[3395] && (ret < 0 ))
+            #else
+            if (0
+            #endif
+            ) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3394]) {
+                  if ((ctxt != (void *) 0  ) && !(0))
+                    fprintf(stderr, "triggered bug index 3394\n");
+                  else
+                    fprintf(stderr, "reached bug index 3394\n");
+                }
+                if ((!FIXREVERTER[3394] && (ctxt != (void *) 0  ))
+                #else
+                if (0
+                #endif
+                )
                     ctxt->flags = oldflags;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return (ret);
             }
+            #ifdef FRCOV
+            }
+            #endif
             list = list->next;
         }
         if (ctxt != NULL) {
@@ -9564,8 +10979,23 @@ xmlRelaxNGBestState(xmlRelaxNGValidCtxtPtr ctxt)
 
     for (i = 0; i < ctxt->states->nbState; i++) {
         state = ctxt->states->tabState[i];
-        if (state == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3396]) {
+          if ((state == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3396\n");
+          else
+            fprintf(stderr, "reached bug index 3396\n");
+        }
+        if ((!FIXREVERTER[3396] && (state == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             continue;
+            #ifdef FRCOV
+            }
+            #endif
         if (state->seq != NULL) {
             if ((best == -1) || (value > 100000)) {
                 value = 100000;
@@ -9663,10 +11093,25 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
     int ret = 0, i, tmp, oldflags, errNr;
     xmlRelaxNGValidStatePtr oldstate = NULL, state;
 
-    if (define == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3397]) {
+      if ((define == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3397\n");
+      else
+        fprintf(stderr, "reached bug index 3397\n");
+    }
+    if ((!FIXREVERTER[3397] && (define == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         VALID_ERR(XML_RELAXNG_ERR_NODEFINE);
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (ctxt->state != NULL) {
         node = ctxt->state->seq;
@@ -9732,12 +11177,27 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
             }
 
             ret = xmlRelaxNGElementMatch(ctxt, define, node);
-            if (ret <= 0) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3398]) {
+              if ((ret <= 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3398\n");
+              else
+                fprintf(stderr, "reached bug index 3398\n");
+            }
+            if ((!FIXREVERTER[3398] && (ret <= 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 ret = -1;
                 if ((ctxt->flags & FLAGS_IGNORABLE) == 0)
                     xmlRelaxNGDumpValidError(ctxt);
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
             ret = 0;
             if (ctxt->errNr != 0) {
                 if (ctxt->errNr > errNr)
@@ -9758,12 +11218,27 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 ctxt->flags -= FLAGS_MIXED_CONTENT;
             }
             state = xmlRelaxNGNewValidState(ctxt, node);
-            if (state == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3399]) {
+              if ((state == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3399\n");
+              else
+                fprintf(stderr, "reached bug index 3399\n");
+            }
+            if ((!FIXREVERTER[3399] && (state == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 ret = -1;
                 if ((ctxt->flags & FLAGS_IGNORABLE) == 0)
                     xmlRelaxNGDumpValidError(ctxt);
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             oldstate = ctxt->state;
             ctxt->state = state;
@@ -9791,8 +11266,23 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 ctxt->states = tmpstates;
                 xmlRelaxNGFreeValidState(ctxt, nstate);
 
-                if (tmp != 0)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3400]) {
+                  if ((tmp != 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3400\n");
+                  else
+                    fprintf(stderr, "reached bug index 3400\n");
+                }
+                if ((!FIXREVERTER[3400] && (tmp != 0 ))
+                #else
+                if (0
+                #endif
+                )
                     ret = -1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 if (ctxt->states != NULL) {
                     tmp = -1;
@@ -9828,8 +11318,23 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                     state = ctxt->state;
 		    if (ctxt->state != NULL)
 			ctxt->state->seq = nseq;
-                    if (ret == 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3401]) {
+                      if ((ret == 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3401\n");
+                      else
+                        fprintf(stderr, "reached bug index 3401\n");
+                    }
+                    if ((!FIXREVERTER[3401] && (ret == 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         ret = xmlRelaxNGValidateElementEnd(ctxt, 1);
+                        #ifdef FRCOV
+                        }
+                        #endif
                     xmlRelaxNGFreeValidState(ctxt, state);
                 }
             } else {
@@ -9882,8 +11387,23 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                         ret = -1;
                 } else {
                     state = ctxt->state;
-                    if (ret == 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3402]) {
+                      if ((ret == 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3402\n");
+                      else
+                        fprintf(stderr, "reached bug index 3402\n");
+                    }
+                    if ((!FIXREVERTER[3402] && (ret == 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         ret = xmlRelaxNGValidateElementEnd(ctxt, 1);
+                        #ifdef FRCOV
+                        }
+                        #endif
                     xmlRelaxNGFreeValidState(ctxt, state);
                 }
             }
@@ -9892,8 +11412,23 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
             }
             ctxt->flags = oldflags;
             ctxt->state = oldstate;
-            if (oldstate != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3403]) {
+              if ((oldstate != (void *) 0  ) && !(0))
+                fprintf(stderr, "triggered bug index 3403\n");
+              else
+                fprintf(stderr, "reached bug index 3403\n");
+            }
+            if ((!FIXREVERTER[3403] && (oldstate != (void *) 0  ))
+            #else
+            if (0
+            #endif
+            )
                 oldstate->seq = xmlRelaxNGSkipIgnored(ctxt, node->next);
+                #ifdef FRCOV
+                }
+                #endif
             if (ret != 0) {
                 if ((ctxt->flags & FLAGS_IGNORABLE) == 0) {
                     xmlRelaxNGDumpValidError(ctxt);
@@ -9952,9 +11487,24 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
         case XML_RELAXNG_ONEORMORE:
             errNr = ctxt->errNr;
             ret = xmlRelaxNGValidateDefinitionList(ctxt, define->content);
-            if (ret != 0) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3404]) {
+              if ((ret != 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3404\n");
+              else
+                fprintf(stderr, "reached bug index 3404\n");
+            }
+            if ((!FIXREVERTER[3404] && (ret != 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
             if (ctxt->errNr > errNr)
                 xmlRelaxNGPopErrors(ctxt, errNr);
             /* Falls through. */
@@ -9965,10 +11515,25 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
 
                 errNr = ctxt->errNr;
                 res = xmlRelaxNGNewStates(ctxt, 1);
-                if (res == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3405]) {
+                  if ((res == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3405\n");
+                  else
+                    fprintf(stderr, "reached bug index 3405\n");
+                }
+                if ((!FIXREVERTER[3405] && (res == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     ret = -1;
                     break;
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 /*
                  * All the input states are also exit states
                  */
@@ -10073,10 +11638,25 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                                 xmlRelaxNGNewStates(ctxt,
                                                     res->nbState - base);
 			        states = ctxt->states;
-				if (states == NULL) {
+				
+				#ifdef FRCOV
+				{if (FIXREVERTER[3410]) {
+				  if ((states == (void *) 0 ) && !(0))
+				    fprintf(stderr, "triggered bug index 3410\n");
+				  else
+				    fprintf(stderr, "reached bug index 3410\n");
+				}
+				if ((!FIXREVERTER[3410] && (states == (void *) 0 ))
+				#else
+				if (0
+				#endif
+				) {
 				    progress = 0;
 				    break;
 				}
+				#ifdef FRCOV
+				}
+				#endif
                             }
                             states->nbState = 0;
                             for (i = base; i < res->nbState; i++)
@@ -10131,17 +11711,47 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                         if (node->ns != NULL) {
                             list = xmlHashLookup2(triage, node->name,
                                                   node->ns->href);
-                            if (list == NULL)
+                            
+                            #ifdef FRCOV
+                            {if (FIXREVERTER[3411]) {
+                              if ((list == (void *) 0 ) && !(0))
+                                fprintf(stderr, "triggered bug index 3411\n");
+                              else
+                                fprintf(stderr, "reached bug index 3411\n");
+                            }
+                            if ((!FIXREVERTER[3411] && (list == (void *) 0 ))
+                            #else
+                            if (0
+                            #endif
+                            )
                                 list =
                                     xmlHashLookup2(triage, BAD_CAST "#any",
                                                    node->ns->href);
+                                                   #ifdef FRCOV
+                                                   }
+                                                   #endif
                         } else
                             list =
                                 xmlHashLookup2(triage, node->name, NULL);
-                        if (list == NULL)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[3412]) {
+                          if ((list == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 3412\n");
+                          else
+                            fprintf(stderr, "reached bug index 3412\n");
+                        }
+                        if ((!FIXREVERTER[3412] && (list == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             list =
                                 xmlHashLookup2(triage, BAD_CAST "#any",
                                                NULL);
+                                               #ifdef FRCOV
+                                               }
+                                               #endif
                     }
                     if (list == NULL) {
                         ret = -1;
@@ -10243,11 +11853,26 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 }
                 if (content == NULL) {
                     content = xmlStrdup(BAD_CAST "");
-                    if (content == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3413]) {
+                      if ((content == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3413\n");
+                      else
+                        fprintf(stderr, "reached bug index 3413\n");
+                    }
+                    if ((!FIXREVERTER[3413] && (content == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlRngVErrMemory(ctxt);
                         ret = -1;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
                 ret = xmlRelaxNGValidateDatatype(ctxt, content, define,
                                                  ctxt->state->seq);
@@ -10286,11 +11911,26 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 }
                 if (content == NULL) {
                     content = xmlStrdup(BAD_CAST "");
-                    if (content == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3414]) {
+                      if ((content == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3414\n");
+                      else
+                        fprintf(stderr, "reached bug index 3414\n");
+                    }
+                    if ((!FIXREVERTER[3414] && (content == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlRngVErrMemory(ctxt);
                         ret = -1;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
                 oldvalue = ctxt->state->value;
                 ctxt->state->value = content;
@@ -10337,11 +11977,26 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 }
                 if (content == NULL) {
                     content = xmlStrdup(BAD_CAST "");
-                    if (content == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3415]) {
+                      if ((content == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3415\n");
+                      else
+                        fprintf(stderr, "reached bug index 3415\n");
+                    }
+                    if ((!FIXREVERTER[3415] && (content == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlRngVErrMemory(ctxt);
                         ret = -1;
                         break;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
                 len = xmlStrlen(content);
                 oldvalue = ctxt->state->value;
@@ -10353,9 +12008,27 @@ xmlRelaxNGValidateState(xmlRelaxNGValidCtxtPtr ctxt,
                 ctxt->state->endvalue = oldendvalue;
                 if (ret == -1) {
                     VALID_ERR(XML_RELAXNG_ERR_LIST);
-                } else if ((ret == 0) && (node != NULL)) {
+                } else 
+                #ifdef FRCOV
+                {if (FIXREVERTER[3416]) {
+                  fprintf(stderr, "reached bug index 3416\n");
+                }
+                if ((FIXREVERTER[3416] && (ret == 0 )) || (!FIXREVERTER[3416] && (ret == 0 && node != (void *) 0 ))
+                #else
+                if (ret == 0 
+                #endif
+                ) {
+                  
+                #ifdef FRCOV
+                  if (!(node != (void *) 0 ))
+                    fprintf(stderr, "triggered bug index 3416\n");
+                  #endif
+                
                     ctxt->state->seq = node->next;
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 if (content != NULL)
                     xmlFree(content);
                 break;
@@ -10389,11 +12062,29 @@ xmlRelaxNGValidateDefinition(xmlRelaxNGValidCtxtPtr ctxt,
     /*
      * We should NOT have both ctxt->state and ctxt->states
      */
-    if ((ctxt->state != NULL) && (ctxt->states != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3417]) {
+      fprintf(stderr, "reached bug index 3417\n");
+    }
+    if ((FIXREVERTER[3417] && (ctxt -> state != (void *) 0 )) || (!FIXREVERTER[3417] && (ctxt -> state != (void *) 0 && ctxt -> states != (void *) 0 ))
+    #else
+    if (ctxt -> state != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> states != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3417\n");
+      #endif
+    
         /* TODO */
         xmlRelaxNGFreeValidState(ctxt, ctxt->state);
         ctxt->state = NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((ctxt->states == NULL) || (ctxt->states->nbState == 1)) {
         if (ctxt->states != NULL) {
@@ -10402,11 +12093,29 @@ xmlRelaxNGValidateDefinition(xmlRelaxNGValidCtxtPtr ctxt,
             ctxt->states = NULL;
         }
         ret = xmlRelaxNGValidateState(ctxt, define);
-        if ((ctxt->state != NULL) && (ctxt->states != NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3418]) {
+          fprintf(stderr, "reached bug index 3418\n");
+        }
+        if ((FIXREVERTER[3418] && (ctxt -> state != (void *) 0 )) || (!FIXREVERTER[3418] && (ctxt -> state != (void *) 0 && ctxt -> states != (void *) 0 ))
+        #else
+        if (ctxt -> state != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(ctxt -> states != (void *) 0 ))
+            fprintf(stderr, "triggered bug index 3418\n");
+          #endif
+        
             /* TODO */
             xmlRelaxNGFreeValidState(ctxt, ctxt->state);
             ctxt->state = NULL;
         }
+        #ifdef FRCOV
+        }
+        #endif
         if ((ctxt->states != NULL) && (ctxt->states->nbState == 1)) {
             ctxt->state = ctxt->states->tabState[0];
             xmlRelaxNGFreeStates(ctxt, ctxt->states);
@@ -10428,11 +12137,29 @@ xmlRelaxNGValidateDefinition(xmlRelaxNGValidCtxtPtr ctxt,
         /*
          * We should NOT have both ctxt->state and ctxt->states
          */
-        if ((ctxt->state != NULL) && (ctxt->states != NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3419]) {
+          fprintf(stderr, "reached bug index 3419\n");
+        }
+        if ((FIXREVERTER[3419] && (ctxt -> state != (void *) 0 )) || (!FIXREVERTER[3419] && (ctxt -> state != (void *) 0 && ctxt -> states != (void *) 0 ))
+        #else
+        if (ctxt -> state != (void *) 0 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(ctxt -> states != (void *) 0 ))
+            fprintf(stderr, "triggered bug index 3419\n");
+          #endif
+        
             /* TODO */
             xmlRelaxNGFreeValidState(ctxt, ctxt->state);
             ctxt->state = NULL;
         }
+        #ifdef FRCOV
+        }
+        #endif
         if (ret == 0) {
             if (ctxt->states == NULL) {
                 if (res != NULL) {
@@ -10495,11 +12222,29 @@ xmlRelaxNGValidateDefinition(xmlRelaxNGValidCtxtPtr ctxt,
             ctxt->states = NULL;
         }
     }
-    if ((ctxt->state != NULL) && (ctxt->states != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3420]) {
+      fprintf(stderr, "reached bug index 3420\n");
+    }
+    if ((FIXREVERTER[3420] && (ctxt -> state != (void *) 0 )) || (!FIXREVERTER[3420] && (ctxt -> state != (void *) 0 && ctxt -> states != (void *) 0 ))
+    #else
+    if (ctxt -> state != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> states != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3420\n");
+      #endif
+    
         /* TODO */
         xmlRelaxNGFreeValidState(ctxt, ctxt->state);
         ctxt->state = NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (ret);
 }
 
diff --git a/threads.c b/threads.c
index 36347c2f..17140877 100644
--- a/threads.c
+++ b/threads.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /**
  * threads.c: set of generic threading related routines
  *
@@ -297,8 +301,23 @@ xmlFreeRMutex(xmlRMutexPtr tok ATTRIBUTE_UNUSED)
 void
 xmlRMutexLock(xmlRMutexPtr tok)
 {
-    if (tok == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1349]) {
+      if ((tok == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1349\n");
+      else
+        fprintf(stderr, "reached bug index 1349\n");
+    }
+    if ((!FIXREVERTER[1349] && (tok == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 #ifdef HAVE_POSIX_THREADS
     if (XML_IS_THREADED() == 0)
         return;
@@ -333,8 +352,23 @@ xmlRMutexLock(xmlRMutexPtr tok)
 void
 xmlRMutexUnlock(xmlRMutexPtr tok ATTRIBUTE_UNUSED)
 {
-    if (tok == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1351]) {
+      if ((tok == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1351\n");
+      else
+        fprintf(stderr, "reached bug index 1351\n");
+    }
+    if ((!FIXREVERTER[1351] && (tok == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
 #ifdef HAVE_POSIX_THREADS
     if (XML_IS_THREADED() == 0)
         return;
diff --git a/tree.c b/tree.c
index 75f7569a..cb4034f1 100644
--- a/tree.c
+++ b/tree.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * tree.c : implementation of access function for an XML tree.
  *
@@ -170,8 +174,38 @@ xmlBuildQName(const xmlChar *ncname, const xmlChar *prefix,
     int lenn, lenp;
     xmlChar *ret;
 
-    if (ncname == NULL) return(NULL);
-    if (prefix == NULL) return((xmlChar *) ncname);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3735]) {
+      if ((ncname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3735\n");
+      else
+        fprintf(stderr, "reached bug index 3735\n");
+    }
+    if ((!FIXREVERTER[3735] && (ncname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3736]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3736\n");
+      else
+        fprintf(stderr, "reached bug index 3736\n");
+    }
+    if ((!FIXREVERTER[3736] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return((xmlChar *) ncname);
+    #ifdef FRCOV
+    }
+    #endif
 
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
     /* Make allocation more likely */
@@ -184,8 +218,23 @@ xmlBuildQName(const xmlChar *ncname, const xmlChar *prefix,
 
     if ((memory == NULL) || (len < lenn + lenp + 2)) {
 	ret = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (ret == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3738]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3738\n");
+	  else
+	    fprintf(stderr, "reached bug index 3738\n");
+	}
+	if ((!FIXREVERTER[3738] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else {
 	ret = memory;
     }
@@ -220,9 +269,39 @@ xmlSplitQName2(const xmlChar *name, xmlChar **prefix) {
     int len = 0;
     xmlChar *ret = NULL;
 
-    if (prefix == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3739]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3739\n");
+      else
+        fprintf(stderr, "reached bug index 3739\n");
+    }
+    if ((!FIXREVERTER[3739] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     *prefix = NULL;
-    if (name == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3740]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3740\n");
+      else
+        fprintf(stderr, "reached bug index 3740\n");
+    }
+    if ((!FIXREVERTER[3740] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /* nasty but valid */
     if (name[0] == ':')
@@ -242,13 +321,28 @@ xmlSplitQName2(const xmlChar *name, xmlChar **prefix) {
     if (*prefix == NULL)
 	return(NULL);
     ret = xmlStrdup(&name[len + 1]);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3741]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3741\n");
+      else
+        fprintf(stderr, "reached bug index 3741\n");
+    }
+    if ((!FIXREVERTER[3741] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (*prefix != NULL) {
 	    xmlFree(*prefix);
 	    *prefix = NULL;
 	}
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(ret);
 }
@@ -269,8 +363,38 @@ const xmlChar *
 xmlSplitQName3(const xmlChar *name, int *len) {
     int l = 0;
 
-    if (name == NULL) return(NULL);
-    if (len == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3742]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3742\n");
+      else
+        fprintf(stderr, "reached bug index 3742\n");
+    }
+    if ((!FIXREVERTER[3742] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3743]) {
+      if ((len == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3743\n");
+      else
+        fprintf(stderr, "reached bug index 3743\n");
+    }
+    if ((!FIXREVERTER[3743] && (len == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /* nasty but valid */
     if (name[0] == ':')
@@ -308,8 +432,23 @@ xmlSplitQName4(const xmlChar *name, xmlChar **prefixPtr) {
     xmlChar *prefix;
     int l = 0;
 
-    if ((name == NULL) || (prefixPtr == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3744]) {
+      if ((name == (void *) 0 || prefixPtr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3744\n");
+      else
+        fprintf(stderr, "reached bug index 3744\n");
+    }
+    if ((!FIXREVERTER[3744] && (name == (void *) 0 || prefixPtr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     *prefixPtr = NULL;
 
@@ -331,8 +470,23 @@ xmlSplitQName4(const xmlChar *name, xmlChar **prefixPtr) {
 	return(name);
 
     prefix = xmlStrndup(name, l);
-    if (prefix == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3745]) {
+      if ((prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3745\n");
+      else
+        fprintf(stderr, "reached bug index 3745\n");
+    }
+    if ((!FIXREVERTER[3745] && (prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     *prefixPtr = prefix;
     return(&name[l+1]);
@@ -361,8 +515,23 @@ xmlValidateNCName(const xmlChar *value, int space) {
     const xmlChar *cur = value;
     int c,l;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3746]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3746\n");
+      else
+        fprintf(stderr, "reached bug index 3746\n");
+    }
+    if ((!FIXREVERTER[3746] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * First quick algorithm for ASCII range
@@ -434,8 +603,23 @@ xmlValidateQName(const xmlChar *value, int space) {
     const xmlChar *cur = value;
     int c,l;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3748]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3748\n");
+      else
+        fprintf(stderr, "reached bug index 3748\n");
+    }
+    if ((!FIXREVERTER[3748] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * First quick algorithm for ASCII range
      */
@@ -532,8 +716,23 @@ xmlValidateName(const xmlChar *value, int space) {
     const xmlChar *cur = value;
     int c,l;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3750]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3750\n");
+      else
+        fprintf(stderr, "reached bug index 3750\n");
+    }
+    if ((!FIXREVERTER[3750] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * First quick algorithm for ASCII range
      */
@@ -601,8 +800,23 @@ xmlValidateNMToken(const xmlChar *value, int space) {
     const xmlChar *cur = value;
     int c,l;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3752]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3752\n");
+      else
+        fprintf(stderr, "reached bug index 3752\n");
+    }
+    if ((!FIXREVERTER[3752] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
      * First quick algorithm for ASCII range
      */
@@ -729,20 +943,65 @@ xmlNewNs(xmlNodePtr node, const xmlChar *href, const xmlChar *prefix) {
      * Allocate a new Namespace and fill the fields.
      */
     cur = (xmlNsPtr) xmlMalloc(sizeof(xmlNs));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3754]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3754\n");
+      else
+        fprintf(stderr, "reached bug index 3754\n");
+    }
+    if ((!FIXREVERTER[3754] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlNs));
     cur->type = XML_LOCAL_NAMESPACE;
 
     if (href != NULL) {
 	cur->href = xmlStrdup(href);
-        if (cur->href == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3755]) {
+          if ((cur -> href == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3755\n");
+          else
+            fprintf(stderr, "reached bug index 3755\n");
+        }
+        if ((!FIXREVERTER[3755] && (cur -> href == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (prefix != NULL) {
 	cur->prefix = xmlStrdup(prefix);
-        if (cur->prefix == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3756]) {
+          if ((cur -> prefix == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3756\n");
+          else
+            fprintf(stderr, "reached bug index 3756\n");
+        }
+        if ((!FIXREVERTER[3756] && (cur -> prefix == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     /*
@@ -784,9 +1043,24 @@ error:
  */
 void
 xmlSetNs(xmlNodePtr node, xmlNsPtr ns) {
-    if (node == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3757]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3757\n");
+      else
+        fprintf(stderr, "reached bug index 3757\n");
+    }
+    if ((!FIXREVERTER[3757] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((node->type == XML_ELEMENT_NODE) ||
         (node->type == XML_ATTRIBUTE_NODE))
 	node->ns = ns;
@@ -800,9 +1074,24 @@ xmlSetNs(xmlNodePtr node, xmlNsPtr ns) {
  */
 void
 xmlFreeNs(xmlNsPtr cur) {
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3758]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3758\n");
+      else
+        fprintf(stderr, "reached bug index 3758\n");
+    }
+    if ((!FIXREVERTER[3758] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (cur->href != NULL) xmlFree((char *) cur->href);
     if (cur->prefix != NULL) xmlFree((char *) cur->prefix);
     xmlFree(cur);
@@ -817,9 +1106,24 @@ xmlFreeNs(xmlNsPtr cur) {
 void
 xmlFreeNsList(xmlNsPtr cur) {
     xmlNsPtr next;
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3759]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3759\n");
+      else
+        fprintf(stderr, "reached bug index 3759\n");
+    }
+    if ((!FIXREVERTER[3759] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     while (cur != NULL) {
         next = cur->next;
         xmlFreeNs(cur);
@@ -858,28 +1162,103 @@ xmlNewDtd(xmlDocPtr doc, const xmlChar *name,
      * Allocate a new DTD and fill the fields.
      */
     cur = (xmlDtdPtr) xmlMalloc(sizeof(xmlDtd));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3760]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3760\n");
+      else
+        fprintf(stderr, "reached bug index 3760\n");
+    }
+    if ((!FIXREVERTER[3760] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0 , sizeof(xmlDtd));
     cur->type = XML_DTD_NODE;
 
     if (name != NULL) {
 	cur->name = xmlStrdup(name);
-        if (cur->name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3761]) {
+          if ((cur -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3761\n");
+          else
+            fprintf(stderr, "reached bug index 3761\n");
+        }
+        if ((!FIXREVERTER[3761] && (cur -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (ExternalID != NULL) {
 	cur->ExternalID = xmlStrdup(ExternalID);
-        if (cur->ExternalID == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3762]) {
+          if ((cur -> ExternalID == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3762\n");
+          else
+            fprintf(stderr, "reached bug index 3762\n");
+        }
+        if ((!FIXREVERTER[3762] && (cur -> ExternalID == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (SystemID != NULL) {
 	cur->SystemID = xmlStrdup(SystemID);
-        if (cur->SystemID == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3763]) {
+          if ((cur -> SystemID == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3763\n");
+          else
+            fprintf(stderr, "reached bug index 3763\n");
+        }
+        if ((!FIXREVERTER[3763] && (cur -> SystemID == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
-    }
-    if (doc != NULL)
+            #ifdef FRCOV
+            }
+            #endif
+    }
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3764]) {
+      if ((doc != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3764\n");
+      else
+        fprintf(stderr, "reached bug index 3764\n");
+    }
+    if ((!FIXREVERTER[3764] && (doc != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	doc->extSubset = cur;
+	#ifdef FRCOV
+	}
+	#endif
     cur->doc = doc;
 
     if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
@@ -903,8 +1282,23 @@ xmlDtdPtr
 xmlGetIntSubset(const xmlDoc *doc) {
     xmlNodePtr cur;
 
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3765]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3765\n");
+      else
+        fprintf(stderr, "reached bug index 3765\n");
+    }
+    if ((!FIXREVERTER[3765] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     cur = doc->children;
     while (cur != NULL) {
 	if (cur->type == XML_DTD_NODE)
@@ -946,25 +1340,85 @@ xmlCreateIntSubset(xmlDocPtr doc, const xmlChar *name,
      * Allocate a new DTD and fill the fields.
      */
     cur = (xmlDtdPtr) xmlMalloc(sizeof(xmlDtd));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3766]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3766\n");
+      else
+        fprintf(stderr, "reached bug index 3766\n");
+    }
+    if ((!FIXREVERTER[3766] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlDtd));
     cur->type = XML_DTD_NODE;
 
     if (name != NULL) {
 	cur->name = xmlStrdup(name);
-	if (cur->name == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3767]) {
+	  if ((cur -> name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3767\n");
+	  else
+	    fprintf(stderr, "reached bug index 3767\n");
+	}
+	if ((!FIXREVERTER[3767] && (cur -> name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (ExternalID != NULL) {
 	cur->ExternalID = xmlStrdup(ExternalID);
-	if (cur->ExternalID  == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3768]) {
+	  if ((cur -> ExternalID == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3768\n");
+	  else
+	    fprintf(stderr, "reached bug index 3768\n");
+	}
+	if ((!FIXREVERTER[3768] && (cur -> ExternalID == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (SystemID != NULL) {
 	cur->SystemID = xmlStrdup(SystemID);
-	if (cur->SystemID == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3769]) {
+	  if ((cur -> SystemID == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3769\n");
+	  else
+	    fprintf(stderr, "reached bug index 3769\n");
+	}
+	if ((!FIXREVERTER[3769] && (cur -> SystemID == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (doc != NULL) {
 	doc->intSubset = cur;
@@ -1036,10 +1490,40 @@ void
 xmlFreeDtd(xmlDtdPtr cur) {
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3770]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3770\n");
+      else
+        fprintf(stderr, "reached bug index 3770\n");
+    }
+    if ((!FIXREVERTER[3770] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return;
     }
-    if (cur->doc != NULL) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3771]) {
+      if ((cur -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3771\n");
+      else
+        fprintf(stderr, "reached bug index 3771\n");
+    }
+    if ((!FIXREVERTER[3771] && (cur -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
 	xmlDeregisterNodeDefaultValue((xmlNodePtr)cur);
@@ -1093,23 +1577,68 @@ xmlDocPtr
 xmlNewDoc(const xmlChar *version) {
     xmlDocPtr cur;
 
-    if (version == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3772]) {
+      if ((version == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3772\n");
+      else
+        fprintf(stderr, "reached bug index 3772\n");
+    }
+    if ((!FIXREVERTER[3772] && (version == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	version = (const xmlChar *) "1.0";
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Allocate a new document and fill the fields.
      */
     cur = (xmlDocPtr) xmlMalloc(sizeof(xmlDoc));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3773]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3773\n");
+      else
+        fprintf(stderr, "reached bug index 3773\n");
+    }
+    if ((!FIXREVERTER[3773] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlDoc));
     cur->type = XML_DOCUMENT_NODE;
 
     cur->version = xmlStrdup(version);
-    if (cur->version == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3774]) {
+      if ((cur -> version == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3774\n");
+      else
+        fprintf(stderr, "reached bug index 3774\n");
+    }
+    if ((!FIXREVERTER[3774] && (cur -> version == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(cur);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     cur->standalone = -1;
     cur->compression = -1; /* not initialized */
     cur->doc = cur;
@@ -1138,9 +1667,24 @@ xmlFreeDoc(xmlDocPtr cur) {
     xmlDtdPtr extSubset, intSubset;
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3775]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3775\n");
+      else
+        fprintf(stderr, "reached bug index 3775\n");
+    }
+    if ((!FIXREVERTER[3775] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     dict = cur->dict;
 
@@ -1156,8 +1700,23 @@ xmlFreeDoc(xmlDocPtr cur) {
     cur->refs = NULL;
     extSubset = cur->extSubset;
     intSubset = cur->intSubset;
-    if (intSubset == extSubset)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3776]) {
+      if ((intSubset == extSubset ) && !(0))
+        fprintf(stderr, "triggered bug index 3776\n");
+      else
+        fprintf(stderr, "reached bug index 3776\n");
+    }
+    if ((!FIXREVERTER[3776] && (intSubset == extSubset ))
+    #else
+    if (0
+    #endif
+    )
 	extSubset = NULL;
+	#ifdef FRCOV
+	}
+	#endif
     if (extSubset != NULL) {
 	xmlUnlinkNodeInternal((xmlNodePtr) cur->extSubset);
 	cur->extSubset = NULL;
@@ -1213,14 +1772,44 @@ xmlNodeParseContentInternal(const xmlDoc *doc, xmlNodePtr parent,
     else
         remaining = len;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3777]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3777\n");
+      else
+        fprintf(stderr, "reached bug index 3777\n");
+    }
+    if ((!FIXREVERTER[3777] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto done;
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = value;
 
     buf = xmlBufCreateSize(64);
-    if (buf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3778]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3778\n");
+      else
+        fprintf(stderr, "reached bug index 3778\n");
+    }
+    if ((!FIXREVERTER[3778] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     xmlBufSetAllocationScheme(buf, XML_BUFFER_ALLOC_DOUBLEIT);
 
     q = cur;
@@ -1253,8 +1842,23 @@ xmlNodeParseContentInternal(const xmlDoc *doc, xmlNodePtr parent,
 			charval = 0;
 			break;
 		    }
-                    if (charval > 0x110000)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3779]) {
+                      if ((charval > 1114112 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3779\n");
+                      else
+                        fprintf(stderr, "reached bug index 3779\n");
+                    }
+                    if ((!FIXREVERTER[3779] && (charval > 1114112 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         charval = 0x110000;
+                        #ifdef FRCOV
+                        }
+                        #endif
 		    cur++;
                     remaining--;
 		}
@@ -1275,8 +1879,23 @@ xmlNodeParseContentInternal(const xmlDoc *doc, xmlNodePtr parent,
 			charval = 0;
 			break;
 		    }
-                    if (charval > 0x110000)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3780]) {
+                      if ((charval > 1114112 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3780\n");
+                      else
+                        fprintf(stderr, "reached bug index 3780\n");
+                    }
+                    if ((!FIXREVERTER[3780] && (charval > 1114112 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         charval = 0x110000;
+                        #ifdef FRCOV
+                        }
+                        #endif
 		    cur++;
                     remaining--;
 		}
@@ -1300,8 +1919,23 @@ xmlNodeParseContentInternal(const xmlDoc *doc, xmlNodePtr parent,
 		    break;
 		if (cur != q) {
 		    val = xmlStrndup(q, cur - q);
-                    if (val == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3781]) {
+                      if ((val == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3781\n");
+                      else
+                        fprintf(stderr, "reached bug index 3781\n");
+                    }
+                    if ((!FIXREVERTER[3781] && (val == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto out;
+                        #ifdef FRCOV
+                        }
+                        #endif
 		    ent = xmlGetDocEntity(doc, val);
 		    if ((ent != NULL) &&
 			(ent->etype == XML_INTERNAL_PREDEFINED_ENTITY)) {
@@ -1316,8 +1950,23 @@ xmlNodeParseContentInternal(const xmlDoc *doc, xmlNodePtr parent,
 			 */
 			if (!xmlBufIsEmpty(buf)) {
 			    node = xmlNewDocText(doc, NULL);
-			    if (node == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[3782]) {
+			      if ((node == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 3782\n");
+			      else
+			        fprintf(stderr, "reached bug index 3782\n");
+			    }
+			    if ((!FIXREVERTER[3782] && (node == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				goto out;
+				#ifdef FRCOV
+				}
+				#endif
 			    node->content = xmlBufDetach(buf);
                             node->parent = parent;
 
@@ -1350,8 +1999,23 @@ xmlNodeParseContentInternal(const xmlDoc *doc, xmlNodePtr parent,
 			 */
 			node = xmlNewEntityRef((xmlDocPtr) doc, val);
                         val = NULL;
-			if (node == NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[3784]) {
+			  if ((node == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 3784\n");
+			  else
+			    fprintf(stderr, "reached bug index 3784\n");
+			}
+			if ((!FIXREVERTER[3784] && (node == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    goto out;
+			    #ifdef FRCOV
+			    }
+			    #endif
                         node->parent = parent;
                         node->last = (xmlNodePtr) ent;
                         if (ent != NULL) {
@@ -1378,8 +2042,23 @@ xmlNodeParseContentInternal(const xmlDoc *doc, xmlNodePtr parent,
 		xmlChar buffer[10];
 		int l;
 
-                if (charval >= 0x110000)
-                    charval = 0xFFFD; /* replacement character */
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3785]) {
+                  if ((charval >= 1114112 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3785\n");
+                  else
+                    fprintf(stderr, "reached bug index 3785\n");
+                }
+                if ((!FIXREVERTER[3785] && (charval >= 1114112 ))
+                #else
+                if (0
+                #endif
+                )
+                    charval = 0xFFFD;
+                    #ifdef FRCOV
+                    }
+                    #endif /* replacement character */
 
 		l = xmlCopyCharMultiByte(buffer, charval);
 		buffer[l] = 0;
@@ -1403,8 +2082,23 @@ xmlNodeParseContentInternal(const xmlDoc *doc, xmlNodePtr parent,
 
     if (!xmlBufIsEmpty(buf)) {
 	node = xmlNewDocText(doc, NULL);
-	if (node == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3786]) {
+	  if ((node == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3786\n");
+	  else
+	    fprintf(stderr, "reached bug index 3786\n");
+	}
+	if ((!FIXREVERTER[3786] && (node == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
             goto out;
+            #ifdef FRCOV
+            }
+            #endif
         node->parent = parent;
 	node->content = xmlBufDetach(buf);
 
@@ -1417,8 +2111,23 @@ xmlNodeParseContentInternal(const xmlDoc *doc, xmlNodePtr parent,
         last = node;
     } else if (head == NULL) {
         head = xmlNewDocText(doc, BAD_CAST "");
-        if (head == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3787]) {
+          if ((head == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3787\n");
+          else
+            fprintf(stderr, "reached bug index 3787\n");
+        }
+        if ((!FIXREVERTER[3787] && (head == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto out;
+            #ifdef FRCOV
+            }
+            #endif
         head->parent = parent;
         last = head;
     }
@@ -1530,21 +2239,66 @@ xmlNodeListGetStringInternal(xmlDocPtr doc, const xmlNode *node, int escMode) {
     xmlBufPtr buf;
     xmlChar *ret;
 
-    if (node == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3788]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3788\n");
+      else
+        fprintf(stderr, "reached bug index 3788\n");
+    }
+    if ((!FIXREVERTER[3788] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrdup(BAD_CAST ""));
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((escMode == 0) &&
         ((node->type == XML_TEXT_NODE) ||
          (node->type == XML_CDATA_SECTION_NODE)) &&
         (node->next == NULL)) {
-        if (node->content == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3789]) {
+          if ((node -> content == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3789\n");
+          else
+            fprintf(stderr, "reached bug index 3789\n");
+        }
+        if ((!FIXREVERTER[3789] && (node -> content == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(xmlStrdup(BAD_CAST ""));
+            #ifdef FRCOV
+            }
+            #endif
         return(xmlStrdup(node->content));
     }
 
     buf = xmlBufCreateSize(64);
-    if (buf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3790]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3790\n");
+      else
+        fprintf(stderr, "reached bug index 3790\n");
+    }
+    if ((!FIXREVERTER[3790] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (node != NULL) {
         if ((node->type == XML_TEXT_NODE) ||
@@ -1563,8 +2317,23 @@ xmlNodeListGetStringInternal(xmlDocPtr doc, const xmlNode *node, int escMode) {
                                                              node->content);
                     else
                         encoded = xmlEncodeSpecialChars(doc, node->content);
-                    if (encoded == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[3791]) {
+                      if ((encoded == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 3791\n");
+                      else
+                        fprintf(stderr, "reached bug index 3791\n");
+                    }
+                    if ((!FIXREVERTER[3791] && (encoded == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto error;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     xmlBufCat(buf, encoded);
                     xmlFree(encoded);
                 }
@@ -1670,7 +2439,19 @@ xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns,
      * Allocate a new property and fill the fields.
      */
     cur = (xmlAttrPtr) xmlMalloc(sizeof(xmlAttr));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3792]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3792\n");
+      else
+        fprintf(stderr, "reached bug index 3792\n");
+    }
+    if ((!FIXREVERTER[3792] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         if ((eatname == 1) &&
 	    ((node == NULL) || (node->doc == NULL) ||
              (node->doc->dict == NULL) ||
@@ -1678,6 +2459,9 @@ xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns,
             xmlFree((xmlChar *) name);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlAttr));
     cur->type = XML_ATTRIBUTE_NODE;
 
@@ -1693,8 +2477,23 @@ xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns,
             cur->name = (xmlChar *) xmlDictLookup(doc->dict, name, -1);
         else
             cur->name = xmlStrdup(name);
-        if (cur->name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3793]) {
+          if ((cur -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3793\n");
+          else
+            fprintf(stderr, "reached bug index 3793\n");
+        }
+        if ((!FIXREVERTER[3793] && (cur -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     } else
         cur->name = name;
 
@@ -1702,14 +2501,44 @@ xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns,
         xmlNodePtr tmp;
 
         cur->children = xmlNewDocText(doc, value);
-        if (cur->children == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3794]) {
+          if ((cur -> children == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3794\n");
+          else
+            fprintf(stderr, "reached bug index 3794\n");
+        }
+        if ((!FIXREVERTER[3794] && (cur -> children == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
         cur->last = NULL;
         tmp = cur->children;
         while (tmp != NULL) {
             tmp->parent = (xmlNodePtr) cur;
-            if (tmp->next == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3795]) {
+              if ((tmp -> next == (void *) 0  ) && !(0))
+                fprintf(stderr, "triggered bug index 3795\n");
+              else
+                fprintf(stderr, "reached bug index 3795\n");
+            }
+            if ((!FIXREVERTER[3795] && (tmp -> next == (void *) 0  ))
+            #else
+            if (0
+            #endif
+            )
                 cur->last = tmp;
+                #ifdef FRCOV
+                }
+                #endif
             tmp = tmp->next;
         }
 
@@ -1770,9 +2599,24 @@ error:
 xmlAttrPtr
 xmlNewProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value) {
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3797]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3797\n");
+      else
+        fprintf(stderr, "reached bug index 3797\n");
+    }
+    if ((!FIXREVERTER[3797] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 	return xmlNewPropInternal(node, NULL, name, value, 0);
 }
@@ -1800,9 +2644,24 @@ xmlAttrPtr
 xmlNewNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name,
            const xmlChar *value) {
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3798]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3798\n");
+      else
+        fprintf(stderr, "reached bug index 3798\n");
+    }
+    if ((!FIXREVERTER[3798] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return xmlNewPropInternal(node, ns, name, value, 0);
 }
@@ -1825,9 +2684,24 @@ xmlAttrPtr
 xmlNewNsPropEatName(xmlNodePtr node, xmlNsPtr ns, xmlChar *name,
            const xmlChar *value) {
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3799]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3799\n");
+      else
+        fprintf(stderr, "reached bug index 3799\n");
+    }
+    if ((!FIXREVERTER[3799] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return xmlNewPropInternal(node, ns, name, value, 1);
 }
@@ -1852,16 +2726,46 @@ xmlAttrPtr
 xmlNewDocProp(xmlDocPtr doc, const xmlChar *name, const xmlChar *value) {
     xmlAttrPtr cur;
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3800]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3800\n");
+      else
+        fprintf(stderr, "reached bug index 3800\n");
+    }
+    if ((!FIXREVERTER[3800] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Allocate a new property and fill the fields.
      */
     cur = (xmlAttrPtr) xmlMalloc(sizeof(xmlAttr));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3801]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3801\n");
+      else
+        fprintf(stderr, "reached bug index 3801\n");
+    }
+    if ((!FIXREVERTER[3801] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlAttr));
     cur->type = XML_ATTRIBUTE_NODE;
 
@@ -1869,8 +2773,23 @@ xmlNewDocProp(xmlDocPtr doc, const xmlChar *name, const xmlChar *value) {
 	cur->name = xmlDictLookup(doc->dict, name, -1);
     else
 	cur->name = xmlStrdup(name);
-    if (cur->name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3802]) {
+      if ((cur -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3802\n");
+      else
+        fprintf(stderr, "reached bug index 3802\n");
+    }
+    if ((!FIXREVERTER[3802] && (cur -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     cur->doc = doc;
     if (value != NULL) {
 	if (xmlNodeParseContent((xmlNodePtr) cur, value, -1) < 0)
@@ -1895,7 +2814,22 @@ error:
 void
 xmlFreePropList(xmlAttrPtr cur) {
     xmlAttrPtr next;
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3803]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3803\n");
+      else
+        fprintf(stderr, "reached bug index 3803\n");
+    }
+    if ((!FIXREVERTER[3803] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     while (cur != NULL) {
         next = cur->next;
         xmlFreeProp(cur);
@@ -1912,9 +2846,39 @@ xmlFreePropList(xmlAttrPtr cur) {
 void
 xmlFreeProp(xmlAttrPtr cur) {
     xmlDictPtr dict = NULL;
-    if (cur == NULL) return;
-
-    if (cur->doc != NULL) dict = cur->doc->dict;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3804]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3804\n");
+      else
+        fprintf(stderr, "reached bug index 3804\n");
+    }
+    if ((!FIXREVERTER[3804] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3805]) {
+      if ((cur -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3805\n");
+      else
+        fprintf(stderr, "reached bug index 3805\n");
+    }
+    if ((!FIXREVERTER[3805] && (cur -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
 	xmlDeregisterNodeDefaultValue((xmlNodePtr)cur);
@@ -1944,12 +2908,42 @@ xmlFreeProp(xmlAttrPtr cur) {
 int
 xmlRemoveProp(xmlAttrPtr cur) {
     xmlAttrPtr tmp;
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3806]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3806\n");
+      else
+        fprintf(stderr, "reached bug index 3806\n");
+    }
+    if ((!FIXREVERTER[3806] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
-    if (cur->parent == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3807]) {
+      if ((cur -> parent == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3807\n");
+      else
+        fprintf(stderr, "reached bug index 3807\n");
+    }
+    if ((!FIXREVERTER[3807] && (cur -> parent == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     tmp = cur->parent->properties;
     if (tmp == cur) {
         cur->parent->properties = cur->next;
@@ -1986,16 +2980,46 @@ xmlNodePtr
 xmlNewDocPI(xmlDocPtr doc, const xmlChar *name, const xmlChar *content) {
     xmlNodePtr cur;
 
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3808]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3808\n");
+      else
+        fprintf(stderr, "reached bug index 3808\n");
+    }
+    if ((!FIXREVERTER[3808] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3809]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3809\n");
+      else
+        fprintf(stderr, "reached bug index 3809\n");
+    }
+    if ((!FIXREVERTER[3809] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_PI_NODE;
     cur->doc = doc;
@@ -2004,12 +3028,42 @@ xmlNewDocPI(xmlDocPtr doc, const xmlChar *name, const xmlChar *content) {
         cur->name = xmlDictLookup(doc->dict, name, -1);
     else
 	cur->name = xmlStrdup(name);
-    if (cur->name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3810]) {
+      if ((cur -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3810\n");
+      else
+        fprintf(stderr, "reached bug index 3810\n");
+    }
+    if ((!FIXREVERTER[3810] && (cur -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     if (content != NULL) {
 	cur->content = xmlStrdup(content);
-        if (cur->content == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3811]) {
+          if ((cur -> content == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3811\n");
+          else
+            fprintf(stderr, "reached bug index 3811\n");
+        }
+        if ((!FIXREVERTER[3811] && (cur -> content == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
@@ -2082,8 +3136,23 @@ xmlNewElem(xmlDocPtr doc, xmlNsPtr ns, const xmlChar *name,
     xmlNodePtr cur;
 
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3812]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3812\n");
+      else
+        fprintf(stderr, "reached bug index 3812\n");
+    }
+    if ((!FIXREVERTER[3812] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlNode));
 
     cur->type = XML_ELEMENT_NODE;
@@ -2137,26 +3206,86 @@ xmlNewDocNode(xmlDocPtr doc, xmlNsPtr ns,
     xmlNodePtr cur;
     xmlChar *copy;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3813]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3813\n");
+      else
+        fprintf(stderr, "reached bug index 3813\n");
+    }
+    if ((!FIXREVERTER[3813] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((doc != NULL) && (doc->dict != NULL)) {
         const xmlChar *dictName = xmlDictLookup(doc->dict, name, -1);
 
-        if (dictName == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3814]) {
+          if ((dictName == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3814\n");
+          else
+            fprintf(stderr, "reached bug index 3814\n");
+        }
+        if ((!FIXREVERTER[3814] && (dictName == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(NULL);
+            #ifdef FRCOV
+            }
+            #endif
         return(xmlNewElem(doc, ns, dictName, content));
     }
 
     copy = xmlStrdup(name);
-    if (copy == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3815]) {
+      if ((copy == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3815\n");
+      else
+        fprintf(stderr, "reached bug index 3815\n");
+    }
+    if ((!FIXREVERTER[3815] && (copy == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = xmlNewElem(doc, ns, copy, content);
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3816]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3816\n");
+      else
+        fprintf(stderr, "reached bug index 3816\n");
+    }
+    if ((!FIXREVERTER[3816] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(copy);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(cur);
 }
@@ -2182,11 +3311,38 @@ xmlNewDocNodeEatName(xmlDocPtr doc, xmlNsPtr ns,
                      xmlChar *name, const xmlChar *content) {
     xmlNodePtr cur;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3817]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3817\n");
+      else
+        fprintf(stderr, "reached bug index 3817\n");
+    }
+    if ((!FIXREVERTER[3817] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     cur = xmlNewElem(doc, ns, name, content);
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3818]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3818\n");
+      else
+        fprintf(stderr, "reached bug index 3818\n");
+    }
+    if ((!FIXREVERTER[3818] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /* if name doesn't come from the doc dictionary free it here */
         if ((doc == NULL) ||
             (doc->dict == NULL) ||
@@ -2194,6 +3350,9 @@ xmlNewDocNodeEatName(xmlDocPtr doc, xmlNsPtr ns,
             xmlFree(name);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(cur);
 }
@@ -2287,16 +3446,46 @@ xmlNewText(const xmlChar *content) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3821]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3821\n");
+      else
+        fprintf(stderr, "reached bug index 3821\n");
+    }
+    if ((!FIXREVERTER[3821] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_TEXT_NODE;
 
     cur->name = xmlStringText;
     if (content != NULL) {
 	cur->content = xmlStrdup(content);
-        if (cur->content == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3822]) {
+          if ((cur -> content == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3822\n");
+          else
+            fprintf(stderr, "reached bug index 3822\n");
+        }
+        if ((!FIXREVERTER[3822] && (cur -> content == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
@@ -2393,10 +3582,25 @@ xmlNewEntityRef(xmlDocPtr doc, xmlChar *name) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3826]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3826\n");
+      else
+        fprintf(stderr, "reached bug index 3826\n");
+    }
+    if ((!FIXREVERTER[3826] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(name);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_ENTITY_REF_NODE;
     cur->doc = doc;
@@ -2465,15 +3669,45 @@ xmlNewReference(const xmlDoc *doc, const xmlChar *name) {
     xmlNodePtr cur;
     xmlEntityPtr ent;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3829]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3829\n");
+      else
+        fprintf(stderr, "reached bug index 3829\n");
+    }
+    if ((!FIXREVERTER[3829] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3830]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3830\n");
+      else
+        fprintf(stderr, "reached bug index 3830\n");
+    }
+    if ((!FIXREVERTER[3830] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_ENTITY_REF_NODE;
 
@@ -2488,8 +3722,23 @@ xmlNewReference(const xmlDoc *doc, const xmlChar *name) {
 	    cur->name = xmlStrndup(name, len);
     } else
 	cur->name = xmlStrdup(name);
-    if (cur->name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3831]) {
+      if ((cur -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3831\n");
+      else
+        fprintf(stderr, "reached bug index 3831\n");
+    }
+    if ((!FIXREVERTER[3831] && (cur -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
 
     ent = xmlGetDocEntity(doc, cur->name);
     if (ent != NULL) {
@@ -2527,7 +3776,22 @@ xmlNewDocText(const xmlDoc *doc, const xmlChar *content) {
     xmlNodePtr cur;
 
     cur = xmlNewText(content);
-    if (cur != NULL) cur->doc = (xmlDoc *)doc;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3832]) {
+      if ((cur != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3832\n");
+      else
+        fprintf(stderr, "reached bug index 3832\n");
+    }
+    if ((!FIXREVERTER[3832] && (cur != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    ) cur->doc = (xmlDoc *)doc;
+    #ifdef FRCOV
+    }
+    #endif
     return(cur);
 }
 
@@ -2607,16 +3871,46 @@ xmlNewComment(const xmlChar *content) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3836]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3836\n");
+      else
+        fprintf(stderr, "reached bug index 3836\n");
+    }
+    if ((!FIXREVERTER[3836] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_COMMENT_NODE;
 
     cur->name = xmlStringComment;
     if (content != NULL) {
 	cur->content = xmlStrdup(content);
-        if (cur->content == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3837]) {
+          if ((cur -> content == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3837\n");
+          else
+            fprintf(stderr, "reached bug index 3837\n");
+        }
+        if ((!FIXREVERTER[3837] && (cur -> content == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
@@ -2647,18 +3941,48 @@ xmlNewCDataBlock(xmlDocPtr doc, const xmlChar *content, int len) {
      * Allocate a new node and fill the fields.
      */
     cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3838]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3838\n");
+      else
+        fprintf(stderr, "reached bug index 3838\n");
+    }
+    if ((!FIXREVERTER[3838] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlNode));
     cur->type = XML_CDATA_SECTION_NODE;
     cur->doc = doc;
 
     if (content != NULL) {
 	cur->content = xmlStrndup(content, len);
-        if (cur->content == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3839]) {
+          if ((cur -> content == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3839\n");
+          else
+            fprintf(stderr, "reached bug index 3839\n");
+        }
+        if ((!FIXREVERTER[3839] && (cur -> content == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFree(cur);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
 
     if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
@@ -2681,7 +4005,22 @@ xmlNewDocComment(xmlDocPtr doc, const xmlChar *content) {
     xmlNodePtr cur;
 
     cur = xmlNewComment(content);
-    if (cur != NULL) cur->doc = doc;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3840]) {
+      if ((cur != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 3840\n");
+      else
+        fprintf(stderr, "reached bug index 3840\n");
+    }
+    if ((!FIXREVERTER[3840] && (cur != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    ) cur->doc = doc;
+    #ifdef FRCOV
+    }
+    #endif
     return(cur);
 }
 
@@ -2690,8 +4029,23 @@ xmlRemoveEntity(xmlEntityPtr ent) {
     xmlDocPtr doc = ent->doc;
     xmlDtdPtr intSubset, extSubset;
 
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3841]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3841\n");
+      else
+        fprintf(stderr, "reached bug index 3841\n");
+    }
+    if ((!FIXREVERTER[3841] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     intSubset = doc->intSubset;
     extSubset = doc->extSubset;
 
@@ -3006,12 +4360,42 @@ static int
 xmlTextAddContent(xmlNodePtr text, const xmlChar *content, int len) {
     xmlChar *merged;
 
-    if (content == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3847]) {
+      if ((content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3847\n");
+      else
+        fprintf(stderr, "reached bug index 3847\n");
+    }
+    if ((!FIXREVERTER[3847] && (content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     merged = xmlStrncatNew(text->content, content, len);
-    if (merged == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3848]) {
+      if ((merged == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3848\n");
+      else
+        fprintf(stderr, "reached bug index 3848\n");
+    }
+    if ((!FIXREVERTER[3848] && (merged == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlTextSetContent(text, merged);
     return(0);
@@ -3042,8 +4426,23 @@ xmlInsertProp(xmlDocPtr doc, xmlNodePtr cur, xmlNodePtr parent,
     cur->next = next;
 
     if (prev == NULL) {
-        if (parent != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3849]) {
+          if ((parent != (void *) 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 3849\n");
+          else
+            fprintf(stderr, "reached bug index 3849\n");
+        }
+        if ((!FIXREVERTER[3849] && (parent != (void *) 0  ))
+        #else
+        if (0
+        #endif
+        )
             parent->properties = (xmlAttrPtr) cur;
+            #ifdef FRCOV
+            }
+            #endif
     } else {
         prev->next = cur;
     }
@@ -3086,8 +4485,23 @@ xmlInsertNode(xmlDocPtr doc, xmlNodePtr cur, xmlNodePtr parent,
 	        xmlChar *merged;
 
                 merged = xmlStrncatNew(cur->content, next->content, -1);
-                if (merged == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3850]) {
+                  if ((merged == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3850\n");
+                  else
+                    fprintf(stderr, "reached bug index 3850\n");
+                }
+                if ((!FIXREVERTER[3850] && (merged == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return(NULL);
+                    #ifdef FRCOV
+                    }
+                    #endif
                 xmlTextSetContent(next, merged);
             }
 
@@ -3100,10 +4514,40 @@ xmlInsertNode(xmlDocPtr doc, xmlNodePtr cur, xmlNodePtr parent,
     /* Unlink */
     oldParent = cur->parent;
     if (oldParent != NULL) {
-        if (oldParent->children == cur)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3851]) {
+          if ((oldParent -> children == cur  ) && !(0))
+            fprintf(stderr, "triggered bug index 3851\n");
+          else
+            fprintf(stderr, "reached bug index 3851\n");
+        }
+        if ((!FIXREVERTER[3851] && (oldParent -> children == cur  ))
+        #else
+        if (0
+        #endif
+        )
             oldParent->children = cur->next;
-        if (oldParent->last == cur)
+            #ifdef FRCOV
+            }
+            #endif
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3852]) {
+          if ((oldParent -> last == cur  ) && !(0))
+            fprintf(stderr, "triggered bug index 3852\n");
+          else
+            fprintf(stderr, "reached bug index 3852\n");
+        }
+        if ((!FIXREVERTER[3852] && (oldParent -> last == cur  ))
+        #else
+        if (0
+        #endif
+        )
             oldParent->last = cur->prev;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (cur->next != NULL)
         cur->next->prev = cur->prev;
@@ -3131,14 +4575,44 @@ xmlInsertNode(xmlDocPtr doc, xmlNodePtr cur, xmlNodePtr parent,
     cur->next = next;
 
     if (prev == NULL) {
-        if (parent != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3853]) {
+          if ((parent != (void *) 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 3853\n");
+          else
+            fprintf(stderr, "reached bug index 3853\n");
+        }
+        if ((!FIXREVERTER[3853] && (parent != (void *) 0  ))
+        #else
+        if (0
+        #endif
+        )
             parent->children = cur;
+            #ifdef FRCOV
+            }
+            #endif
     } else {
         prev->next = cur;
     }
     if (next == NULL) {
-        if (parent != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3854]) {
+          if ((parent != (void *) 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 3854\n");
+          else
+            fprintf(stderr, "reached bug index 3854\n");
+        }
+        if ((!FIXREVERTER[3854] && (parent != (void *) 0  ))
+        #else
+        if (0
+        #endif
+        )
             parent->last = cur;
+            #ifdef FRCOV
+            }
+            #endif
     } else {
         next->prev = cur;
     }
@@ -3628,12 +5102,42 @@ xmlFreeNodeList(xmlNodePtr cur) {
     xmlDictPtr dict = NULL;
     size_t depth = 0;
 
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3861]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3861\n");
+      else
+        fprintf(stderr, "reached bug index 3861\n");
+    }
+    if ((!FIXREVERTER[3861] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (cur->type == XML_NAMESPACE_DECL) {
 	xmlFreeNsList((xmlNsPtr) cur);
 	return;
     }
-    if (cur->doc != NULL) dict = cur->doc->dict;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3862]) {
+      if ((cur -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3862\n");
+      else
+        fprintf(stderr, "reached bug index 3862\n");
+    }
+    if ((!FIXREVERTER[3862] && (cur -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
     while (1) {
         while ((cur->children != NULL) &&
                (cur->type != XML_DOCUMENT_NODE) &&
@@ -3694,8 +5198,23 @@ xmlFreeNodeList(xmlNodePtr cur) {
         if (next != NULL) {
 	    cur = next;
         } else {
-            if ((depth == 0) || (parent == NULL))
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3863]) {
+              if ((parent == (void *) 0 ) && !(depth == 0 ))
+                fprintf(stderr, "triggered bug index 3863\n");
+              else
+                fprintf(stderr, "reached bug index 3863\n");
+            }
+            if ((FIXREVERTER[3863] && (depth == 0 )) || (!FIXREVERTER[3863] && (depth == 0 || parent == (void *) 0 ))
+            #else
+            if (depth == 0 
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
             depth -= 1;
             cur = parent;
             cur->children = NULL;
@@ -3716,7 +5235,22 @@ void
 xmlFreeNode(xmlNodePtr cur) {
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3864]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3864\n");
+      else
+        fprintf(stderr, "reached bug index 3864\n");
+    }
+    if ((!FIXREVERTER[3864] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     /* use xmlFreeDtd for DTD nodes */
     if (cur->type == XML_DTD_NODE) {
@@ -3735,7 +5269,22 @@ xmlFreeNode(xmlNodePtr cur) {
     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
 	xmlDeregisterNodeDefaultValue(cur);
 
-    if (cur->doc != NULL) dict = cur->doc->dict;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3865]) {
+      if ((cur -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3865\n");
+      else
+        fprintf(stderr, "reached bug index 3865\n");
+    }
+    if ((!FIXREVERTER[3865] && (cur -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) dict = cur->doc->dict;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (cur->type == XML_ENTITY_DECL) {
         xmlEntityPtr ent = (xmlEntityPtr) cur;
@@ -3790,10 +5339,40 @@ xmlUnlinkNodeInternal(xmlNodePtr cur) {
 	    if (parent->properties == (xmlAttrPtr) cur)
 		parent->properties = ((xmlAttrPtr) cur)->next;
 	} else {
-	    if (parent->children == cur)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3866]) {
+	      if ((parent -> children == cur  ) && !(0))
+	        fprintf(stderr, "triggered bug index 3866\n");
+	      else
+	        fprintf(stderr, "reached bug index 3866\n");
+	    }
+	    if ((!FIXREVERTER[3866] && (parent -> children == cur  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		parent->children = cur->next;
-	    if (parent->last == cur)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3867]) {
+	      if ((parent -> last == cur  ) && !(0))
+	        fprintf(stderr, "triggered bug index 3867\n");
+	      else
+	        fprintf(stderr, "reached bug index 3867\n");
+	    }
+	    if ((!FIXREVERTER[3867] && (parent -> last == cur  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		parent->last = cur->prev;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	cur->parent = NULL;
     }
@@ -3817,8 +5396,23 @@ xmlUnlinkNodeInternal(xmlNodePtr cur) {
  */
 void
 xmlUnlinkNode(xmlNodePtr cur) {
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3868]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3868\n");
+      else
+        fprintf(stderr, "reached bug index 3868\n");
+    }
+    if ((!FIXREVERTER[3868] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (cur->type == XML_NAMESPACE_DECL)
         return;
@@ -3923,7 +5517,22 @@ xmlNsPtr
 xmlCopyNamespace(xmlNsPtr cur) {
     xmlNsPtr ret;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3869]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3869\n");
+      else
+        fprintf(stderr, "reached bug index 3869\n");
+    }
+    if ((!FIXREVERTER[3869] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     switch (cur->type) {
 	case XML_LOCAL_NAMESPACE:
 	    ret = xmlNewNs(NULL, cur->href, cur->prefix);
@@ -3950,10 +5559,25 @@ xmlCopyNamespaceList(xmlNsPtr cur) {
 
     while (cur != NULL) {
         q = xmlCopyNamespace(cur);
-        if (q == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3870]) {
+          if ((q == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3870\n");
+          else
+            fprintf(stderr, "reached bug index 3870\n");
+        }
+        if ((!FIXREVERTER[3870] && (q == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFreeNsList(ret);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
 	if (p == NULL) {
 	    ret = p = q;
 	} else {
@@ -3969,7 +5593,22 @@ static xmlAttrPtr
 xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) {
     xmlAttrPtr ret = NULL;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3871]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3871\n");
+      else
+        fprintf(stderr, "reached bug index 3871\n");
+    }
+    if ((!FIXREVERTER[3871] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if ((target != NULL) && (target->type != XML_ELEMENT_NODE))
         return(NULL);
     if (target != NULL)
@@ -3982,7 +5621,22 @@ xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) {
 	ret = xmlNewDocProp(cur->children->doc, cur->name, NULL);
     else
 	ret = xmlNewDocProp(NULL, cur->name, NULL);
-    if (ret == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3872]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3872\n");
+      else
+        fprintf(stderr, "reached bug index 3872\n");
+    }
+    if ((!FIXREVERTER[3872] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret->parent = target;
 
     if ((cur->ns != NULL) && (target != NULL)) {
@@ -4014,8 +5668,23 @@ xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) {
             root = pred;
           }
           ret->ns = xmlNewNs(root, ns->href, ns->prefix);
-          if (ret->ns == NULL)
+          
+          #ifdef FRCOV
+          {if (FIXREVERTER[3875]) {
+            if ((ret -> ns == (void *) 0 ) && !(0))
+              fprintf(stderr, "triggered bug index 3875\n");
+            else
+              fprintf(stderr, "reached bug index 3875\n");
+          }
+          if ((!FIXREVERTER[3875] && (ret -> ns == (void *) 0 ))
+          #else
+          if (0
+          #endif
+          )
               goto error;
+              #ifdef FRCOV
+              }
+              #endif
         }
       } else {
         /*
@@ -4032,8 +5701,23 @@ xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) {
            * This is expensive
            */
           ret->ns = xmlNewReconciledNs(target, cur->ns);
-          if (ret->ns == NULL)
+          
+          #ifdef FRCOV
+          {if (FIXREVERTER[3876]) {
+            if ((ret -> ns == (void *) 0 ) && !(0))
+              fprintf(stderr, "triggered bug index 3876\n");
+            else
+              fprintf(stderr, "reached bug index 3876\n");
+          }
+          if ((!FIXREVERTER[3876] && (ret -> ns == (void *) 0 ))
+          #else
+          if (0
+          #endif
+          )
               goto error;
+              #ifdef FRCOV
+              }
+              #endif
         }
       }
 
@@ -4044,14 +5728,44 @@ xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) {
 	xmlNodePtr tmp;
 
 	ret->children = xmlStaticCopyNodeList(cur->children, ret->doc, (xmlNodePtr) ret);
-        if (ret->children == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3877]) {
+          if ((ret -> children == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3877\n");
+          else
+            fprintf(stderr, "reached bug index 3877\n");
+        }
+        if ((!FIXREVERTER[3877] && (ret -> children == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
 	ret->last = NULL;
 	tmp = ret->children;
 	while (tmp != NULL) {
 	    /* tmp->parent = (xmlNodePtr)ret; */
-	    if (tmp->next == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3878]) {
+	      if ((tmp -> next == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 3878\n");
+	      else
+	        fprintf(stderr, "reached bug index 3878\n");
+	    }
+	    if ((!FIXREVERTER[3878] && (tmp -> next == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        ret->last = tmp;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    tmp = tmp->next;
 	}
     }
@@ -4071,8 +5785,23 @@ xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) {
 	    xmlChar *id;
 
 	    id = xmlNodeGetContent((xmlNodePtr) cur);
-	    if (id == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3880]) {
+	      if ((id == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3880\n");
+	      else
+	        fprintf(stderr, "reached bug index 3880\n");
+	    }
+	    if ((!FIXREVERTER[3880] && (id == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
                 goto error;
+                #ifdef FRCOV
+                }
+                #endif
             res = xmlAddIDSafe(ret, id);
 	    xmlFree(id);
             if (res < 0)
@@ -4126,10 +5855,25 @@ xmlCopyPropList(xmlNodePtr target, xmlAttrPtr cur) {
         return(NULL);
     while (cur != NULL) {
         q = xmlCopyProp(target, cur);
-	if (q == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3882]) {
+	  if ((q == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3882\n");
+	  else
+	    fprintf(stderr, "reached bug index 3882\n");
+	}
+	if ((!FIXREVERTER[3882] && (q == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             xmlFreePropList(ret);
 	    return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
 	if (p == NULL) {
 	    ret = p = q;
 	} else {
@@ -4177,7 +5921,22 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
                   int extended) {
     xmlNodePtr ret;
 
-    if (node == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3883]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3883\n");
+      else
+        fprintf(stderr, "reached bug index 3883\n");
+    }
+    if ((!FIXREVERTER[3883] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     switch (node->type) {
         case XML_TEXT_NODE:
         case XML_CDATA_SECTION_NODE:
@@ -4207,8 +5966,23 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
      * Allocate a new node and fill the fields.
      */
     ret = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3884]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3884\n");
+      else
+        fprintf(stderr, "reached bug index 3884\n");
+    }
+    if ((!FIXREVERTER[3884] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(ret, 0, sizeof(xmlNode));
     ret->type = node->type;
 
@@ -4225,8 +5999,23 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
 	    ret->name = xmlDictLookup(doc->dict, node->name, -1);
 	else
 	    ret->name = xmlStrdup(node->name);
-        if (ret->name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3885]) {
+          if ((ret -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3885\n");
+          else
+            fprintf(stderr, "reached bug index 3885\n");
+        }
+        if ((!FIXREVERTER[3885] && (ret -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if ((node->type != XML_ELEMENT_NODE) &&
 	(node->content != NULL) &&
@@ -4234,8 +6023,23 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
 	(node->type != XML_XINCLUDE_END) &&
 	(node->type != XML_XINCLUDE_START)) {
 	ret->content = xmlStrdup(node->content);
-        if (ret->content == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3886]) {
+          if ((ret -> content == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3886\n");
+          else
+            fprintf(stderr, "reached bug index 3886\n");
+        }
+        if ((!FIXREVERTER[3886] && (ret -> content == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }else{
       if (node->type == XML_ELEMENT_NODE)
         ret->line = node->line;
@@ -4246,8 +6050,23 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
     if (((node->type == XML_ELEMENT_NODE) ||
          (node->type == XML_XINCLUDE_START)) && (node->nsDef != NULL)) {
         ret->nsDef = xmlCopyNamespaceList(node->nsDef);
-        if (ret->nsDef == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3887]) {
+          if ((ret -> nsDef == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3887\n");
+          else
+            fprintf(stderr, "reached bug index 3887\n");
+        }
+        if ((!FIXREVERTER[3887] && (ret -> nsDef == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     if ((node->type == XML_ELEMENT_NODE) && (node->ns != NULL)) {
@@ -4277,8 +6096,23 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
             } else {
                 ret->ns = xmlNewReconciledNs(ret, node->ns);
 	    }
-            if (ret->ns == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3890]) {
+              if ((ret -> ns == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3890\n");
+              else
+                fprintf(stderr, "reached bug index 3890\n");
+            }
+            if ((!FIXREVERTER[3890] && (ret -> ns == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto error;
+                #ifdef FRCOV
+                }
+                #endif
 	} else {
 	    /*
 	     * reference the existing namespace definition in our own tree.
@@ -4288,8 +6122,23 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
     }
     if ((node->type == XML_ELEMENT_NODE) && (node->properties != NULL)) {
         ret->properties = xmlCopyPropList(ret, node->properties);
-        if (ret->properties == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3891]) {
+          if ((ret -> properties == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3891\n");
+          else
+            fprintf(stderr, "reached bug index 3891\n");
+        }
+        if ((!FIXREVERTER[3891] && (ret -> properties == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (node->type == XML_ENTITY_REF_NODE) {
 	if ((doc == NULL) || (node->doc != doc)) {
@@ -4304,15 +6153,45 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
             ret->children = node->children;
 	}
 	ret->last = ret->children;
-    } else if ((node->children != NULL) && (extended != 2)) {
+    } else 
+    #ifdef FRCOV
+    {if (FIXREVERTER[3893]) {
+      fprintf(stderr, "reached bug index 3893\n");
+    }
+    if ((FIXREVERTER[3893] && (extended != 2 )) || (!FIXREVERTER[3893] && (node -> children != (void *) 0 && extended != 2 ))
+    #else
+    if (extended != 2 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(node -> children != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3893\n");
+      #endif
+    
         xmlNodePtr cur, insert;
 
         cur = node->children;
         insert = ret;
         while (cur != NULL) {
             xmlNodePtr copy = xmlStaticCopyNode(cur, doc, insert, 2);
-            if (copy == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3892]) {
+              if ((copy == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3892\n");
+              else
+                fprintf(stderr, "reached bug index 3892\n");
+            }
+            if ((!FIXREVERTER[3892] && (copy == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto error;
+                #ifdef FRCOV
+                }
+                #endif
 
             /* Check for coalesced text nodes */
             if (insert->last != copy) {
@@ -4347,6 +6226,9 @@ xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
             }
         }
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 out:
     if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
@@ -4382,13 +6264,43 @@ xmlStaticCopyNodeList(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent) {
 
 #ifdef LIBXML_TREE_ENABLED
 	if (node->type == XML_DTD_NODE ) {
-	    if (doc == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3894]) {
+	      if ((doc == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3894\n");
+	      else
+	        fprintf(stderr, "reached bug index 3894\n");
+	    }
+	    if ((!FIXREVERTER[3894] && (doc == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		node = next;
 		continue;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if ((doc->intSubset == NULL) && (newSubset == NULL)) {
 		q = (xmlNodePtr) xmlCopyDtd( (xmlDtdPtr) node );
-		if (q == NULL) goto error;
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[3895]) {
+		  if ((q == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 3895\n");
+		  else
+		    fprintf(stderr, "reached bug index 3895\n");
+		}
+		if ((!FIXREVERTER[3895] && (q == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) goto error;
+		#ifdef FRCOV
+		}
+		#endif
                 /* Can't fail on DTD */
 		xmlSetTreeDoc(q, doc);
 		q->parent = parent;
@@ -4420,7 +6332,22 @@ xmlStaticCopyNodeList(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent) {
 	} else
 #endif /* LIBXML_TREE_ENABLED */
 	    q = xmlStaticCopyNode(node, doc, parent, 1);
-	if (q == NULL) goto error;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3896]) {
+	  if ((q == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3896\n");
+	  else
+	    fprintf(stderr, "reached bug index 3896\n");
+	}
+	if ((!FIXREVERTER[3896] && (q == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) goto error;
+	#ifdef FRCOV
+	}
+	#endif
 	if (ret == NULL) {
 	    q->prev = NULL;
 	    ret = p = q;
@@ -4432,8 +6359,25 @@ xmlStaticCopyNodeList(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent) {
 	}
 	node = next;
     }
-    if ((doc != NULL) && (newSubset != NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3897]) {
+      fprintf(stderr, "reached bug index 3897\n");
+    }
+    if ((FIXREVERTER[3897] && (doc != (void *) 0 )) || (!FIXREVERTER[3897] && (doc != (void *) 0 && newSubset != (void *) 0  ))
+    #else
+    if (doc != (void *) 0 
+    #endif
+    )
+        
+        #ifdef FRCOV
+        {if (!(newSubset != (void *) 0  ))
+          fprintf(stderr, "triggered bug index 3897\n");
+        #endif
         doc->intSubset = newSubset;
+        #ifdef FRCOV
+        }}
+        #endif
     return(ret);
 error:
     xmlFreeNodeList(ret);
@@ -4532,38 +6476,143 @@ xmlCopyDtd(xmlDtdPtr dtd) {
     xmlDtdPtr ret;
     xmlNodePtr cur, p = NULL, q;
 
-    if (dtd == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3898]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3898\n");
+      else
+        fprintf(stderr, "reached bug index 3898\n");
+    }
+    if ((!FIXREVERTER[3898] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlNewDtd(NULL, dtd->name, dtd->ExternalID, dtd->SystemID);
-    if (ret == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3899]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3899\n");
+      else
+        fprintf(stderr, "reached bug index 3899\n");
+    }
+    if ((!FIXREVERTER[3899] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     if (dtd->entities != NULL) {
         ret->entities = (void *) xmlCopyEntitiesTable(
 	                    (xmlEntitiesTablePtr) dtd->entities);
-        if (ret->entities == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3900]) {
+          if ((ret -> entities == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3900\n");
+          else
+            fprintf(stderr, "reached bug index 3900\n");
+        }
+        if ((!FIXREVERTER[3900] && (ret -> entities == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (dtd->notations != NULL) {
         ret->notations = (void *) xmlCopyNotationTable(
 	                    (xmlNotationTablePtr) dtd->notations);
-        if (ret->notations == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3901]) {
+          if ((ret -> notations == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3901\n");
+          else
+            fprintf(stderr, "reached bug index 3901\n");
+        }
+        if ((!FIXREVERTER[3901] && (ret -> notations == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (dtd->elements != NULL) {
         ret->elements = (void *) xmlCopyElementTable(
 	                    (xmlElementTablePtr) dtd->elements);
-        if (ret->elements == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3902]) {
+          if ((ret -> elements == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3902\n");
+          else
+            fprintf(stderr, "reached bug index 3902\n");
+        }
+        if ((!FIXREVERTER[3902] && (ret -> elements == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (dtd->attributes != NULL) {
         ret->attributes = (void *) xmlCopyAttributeTable(
 	                    (xmlAttributeTablePtr) dtd->attributes);
-        if (ret->attributes == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3903]) {
+          if ((ret -> attributes == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3903\n");
+          else
+            fprintf(stderr, "reached bug index 3903\n");
+        }
+        if ((!FIXREVERTER[3903] && (ret -> attributes == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (dtd->pentities != NULL) {
 	ret->pentities = (void *) xmlCopyEntitiesTable(
 			    (xmlEntitiesTablePtr) dtd->pentities);
-        if (ret->pentities == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3904]) {
+          if ((ret -> pentities == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3904\n");
+          else
+            fprintf(stderr, "reached bug index 3904\n");
+        }
+        if ((!FIXREVERTER[3904] && (ret -> pentities == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     cur = dtd->children;
@@ -4596,14 +6645,44 @@ xmlCopyDtd(xmlDtdPtr dtd) {
 		xmlGetDtdQAttrDesc(ret, tmp->elem, tmp->name, tmp->prefix);
 	} else if (cur->type == XML_COMMENT_NODE) {
 	    q = xmlCopyNode(cur, 0);
-            if (q == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3905]) {
+              if ((q == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3905\n");
+              else
+                fprintf(stderr, "reached bug index 3905\n");
+            }
+            if ((!FIXREVERTER[3905] && (q == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto error;
+                #ifdef FRCOV
+                }
+                #endif
 	}
 
-	if (q == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3906]) {
+	  if ((q == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3906\n");
+	  else
+	    fprintf(stderr, "reached bug index 3906\n");
+	}
+	if ((!FIXREVERTER[3906] && (q == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    cur = cur->next;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	if (p == NULL)
 	    ret->children = q;
@@ -4642,24 +6721,99 @@ xmlDocPtr
 xmlCopyDoc(xmlDocPtr doc, int recursive) {
     xmlDocPtr ret;
 
-    if (doc == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3907]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3907\n");
+      else
+        fprintf(stderr, "reached bug index 3907\n");
+    }
+    if ((!FIXREVERTER[3907] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlNewDoc(doc->version);
-    if (ret == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3908]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3908\n");
+      else
+        fprintf(stderr, "reached bug index 3908\n");
+    }
+    if ((!FIXREVERTER[3908] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret->type = doc->type;
     if (doc->name != NULL) {
         ret->name = xmlMemStrdup(doc->name);
-        if (ret->name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3909]) {
+          if ((ret -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3909\n");
+          else
+            fprintf(stderr, "reached bug index 3909\n");
+        }
+        if ((!FIXREVERTER[3909] && (ret -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (doc->encoding != NULL) {
         ret->encoding = xmlStrdup(doc->encoding);
-        if (ret->encoding == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3910]) {
+          if ((ret -> encoding == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3910\n");
+          else
+            fprintf(stderr, "reached bug index 3910\n");
+        }
+        if ((!FIXREVERTER[3910] && (ret -> encoding == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (doc->URL != NULL) {
         ret->URL = xmlStrdup(doc->URL);
-        if (ret->URL == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3911]) {
+          if ((ret -> URL == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3911\n");
+          else
+            fprintf(stderr, "reached bug index 3911\n");
+        }
+        if ((!FIXREVERTER[3911] && (ret -> URL == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     ret->charset = doc->charset;
     ret->compression = doc->compression;
@@ -4671,29 +6825,89 @@ xmlCopyDoc(xmlDocPtr doc, int recursive) {
 #ifdef LIBXML_TREE_ENABLED
     if (doc->intSubset != NULL) {
         ret->intSubset = xmlCopyDtd(doc->intSubset);
-	if (ret->intSubset == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3912]) {
+	  if ((ret -> intSubset == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 3912\n");
+	  else
+	    fprintf(stderr, "reached bug index 3912\n");
+	}
+	if ((!FIXREVERTER[3912] && (ret -> intSubset == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
         /* Can't fail on DTD */
 	xmlSetTreeDoc((xmlNodePtr)ret->intSubset, ret);
     }
 #endif
     if (doc->oldNs != NULL) {
         ret->oldNs = xmlCopyNamespaceList(doc->oldNs);
-        if (ret->oldNs == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3913]) {
+          if ((ret -> oldNs == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3913\n");
+          else
+            fprintf(stderr, "reached bug index 3913\n");
+        }
+        if ((!FIXREVERTER[3913] && (ret -> oldNs == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (doc->children != NULL) {
 	xmlNodePtr tmp;
 
 	ret->children = xmlStaticCopyNodeList(doc->children, ret,
 		                               (xmlNodePtr)ret);
-        if (ret->children == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3914]) {
+          if ((ret -> children == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3914\n");
+          else
+            fprintf(stderr, "reached bug index 3914\n");
+        }
+        if ((!FIXREVERTER[3914] && (ret -> children == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
 	ret->last = NULL;
 	tmp = ret->children;
 	while (tmp != NULL) {
-	    if (tmp->next == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3915]) {
+	      if ((tmp -> next == (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 3915\n");
+	      else
+	        fprintf(stderr, "reached bug index 3915\n");
+	    }
+	    if ((!FIXREVERTER[3915] && (tmp -> next == (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        ret->last = tmp;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    tmp = tmp->next;
 	}
     }
@@ -4743,8 +6957,23 @@ xmlGetLineNoInternal(const xmlNode *node, int depth)
 	        result = xmlGetLineNoInternal(node->children, depth + 1);
 	    else if (node->next != NULL)
 	        result = xmlGetLineNoInternal(node->next, depth + 1);
-	    else if (node->prev != NULL)
+	    else 
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3917]) {
+	      if ((node -> prev != (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3917\n");
+	      else
+	        fprintf(stderr, "reached bug index 3917\n");
+	    }
+	    if ((!FIXREVERTER[3917] && (node -> prev != (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        result = xmlGetLineNoInternal(node->prev, depth + 1);
+	        #ifdef FRCOV
+	        }
+	        #endif
 	}
 	if ((result == -1) || (result == 65535))
 	    result = (long) node->line;
@@ -5034,7 +7263,22 @@ xmlNodePtr
 xmlDocGetRootElement(const xmlDoc *doc) {
     xmlNodePtr ret;
 
-    if (doc == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3928]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3928\n");
+      else
+        fprintf(stderr, "reached bug index 3928\n");
+    }
+    if ((!FIXREVERTER[3928] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = doc->children;
     while (ret != NULL) {
 	if (ret->type == XML_ELEMENT_NODE)
@@ -5368,19 +7612,63 @@ xmlNodeGetBaseSafe(const xmlDoc *doc, const xmlNode *cur, xmlChar **baseOut) {
     xmlChar *base, *newbase;
     int res;
 
-    if (baseOut == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3943]) {
+      if ((baseOut == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3943\n");
+      else
+        fprintf(stderr, "reached bug index 3943\n");
+    }
+    if ((!FIXREVERTER[3943] && (baseOut == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(1);
+        #ifdef FRCOV
+        }
+        #endif
     *baseOut = NULL;
     if ((cur == NULL) && (doc == NULL))
         return(1);
     if ((cur != NULL) && (cur->type == XML_NAMESPACE_DECL))
         return(1);
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3944]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3944\n");
+      else
+        fprintf(stderr, "reached bug index 3944\n");
+    }
+    if ((!FIXREVERTER[3944] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         doc = cur->doc;
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((doc != NULL) && (doc->type == XML_HTML_DOCUMENT_NODE)) {
         cur = doc->children;
-	while ((cur != NULL) && (cur->name != NULL)) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[3946])
+	  fprintf(stderr, "reached bug index 3946\n");
+	while ((FIXREVERTER[3946] && (cur != (void *) 0 )) || (!FIXREVERTER[3946] && (cur != (void *) 0 && cur -> name != (void *) 0 ))
+	#else
+	while (cur != (void *) 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(cur -> name != (void *) 0 ))
+	    fprintf(stderr, "triggered bug index 3946\n");
+	  #endif
+	
 	    if (cur->type != XML_ELEMENT_NODE) {
 	        cur = cur->next;
 		continue;
@@ -5396,12 +7684,30 @@ xmlNodeGetBaseSafe(const xmlDoc *doc, const xmlNode *cur, xmlChar **baseOut) {
 	    if (!xmlStrcasecmp(cur->name, BAD_CAST "base")) {
                 if (xmlNodeGetAttrValue(cur, BAD_CAST "href", NULL, &ret) < 0)
                     return(-1);
-                if (ret == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3945]) {
+                  if ((ret == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3945\n");
+                  else
+                    fprintf(stderr, "reached bug index 3945\n");
+                }
+                if ((!FIXREVERTER[3945] && (ret == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return(1);
+                    #ifdef FRCOV
+                    }
+                    #endif
                 goto found;
 	    }
 	    cur = cur->next;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	return(0);
     }
 
@@ -5409,12 +7715,42 @@ xmlNodeGetBaseSafe(const xmlDoc *doc, const xmlNode *cur, xmlChar **baseOut) {
 	if (cur->type == XML_ENTITY_DECL) {
 	    xmlEntityPtr ent = (xmlEntityPtr) cur;
 
-            if (ent->URI == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3947]) {
+              if ((ent -> URI == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3947\n");
+              else
+                fprintf(stderr, "reached bug index 3947\n");
+            }
+            if ((!FIXREVERTER[3947] && (ent -> URI == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
             xmlFree(ret);
 	    ret = xmlStrdup(ent->URI);
-            if (ret == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3948]) {
+              if ((ret == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3948\n");
+              else
+                fprintf(stderr, "reached bug index 3948\n");
+            }
+            if ((!FIXREVERTER[3948] && (ret == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return(-1);
+                #ifdef FRCOV
+                }
+                #endif
             goto found;
 	}
 	if (cur->type == XML_ELEMENT_NODE) {
@@ -5443,11 +7779,41 @@ xmlNodeGetBaseSafe(const xmlDoc *doc, const xmlNode *cur, xmlChar **baseOut) {
 	cur = cur->parent;
     }
 
-    if ((doc != NULL) && (doc->URL != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3952]) {
+      fprintf(stderr, "reached bug index 3952\n");
+    }
+    if ((FIXREVERTER[3952] && (doc != (void *) 0 )) || (!FIXREVERTER[3952] && (doc != (void *) 0 && doc -> URL != (void *) 0 ))
+    #else
+    if (doc != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(doc -> URL != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 3952\n");
+      #endif
+    
 	if (ret == NULL) {
 	    ret = xmlStrdup(doc->URL);
-            if (ret == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3950]) {
+              if ((ret == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3950\n");
+              else
+                fprintf(stderr, "reached bug index 3950\n");
+            }
+            if ((!FIXREVERTER[3950] && (ret == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return(-1);
+                #ifdef FRCOV
+                }
+                #endif
         } else {
             res = xmlBuildURISafe(ret, doc->URL, &newbase);
             xmlFree(ret);
@@ -5456,6 +7822,9 @@ xmlNodeGetBaseSafe(const xmlDoc *doc, const xmlNode *cur, xmlChar **baseOut) {
             ret = newbase;
         }
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 found:
     *baseOut = ret;
@@ -5518,8 +7887,23 @@ xmlBufGetEntityRefContent(xmlBufPtr buf, const xmlNode *ref) {
     } else {
         /* lookup entity declaration */
         ent = xmlGetDocEntity(ref->doc, ref->name);
-        if (ent == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3955]) {
+          if ((ent == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3955\n");
+          else
+            fprintf(stderr, "reached bug index 3955\n");
+        }
+        if ((!FIXREVERTER[3955] && (ent == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     /*
@@ -5588,8 +7972,23 @@ xmlBufGetChildContent(xmlBufPtr buf, const xmlNode *tree) {
 int
 xmlBufGetNodeContent(xmlBufPtr buf, const xmlNode *cur)
 {
-    if ((cur == NULL) || (buf == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3956]) {
+      if ((cur == (void *) 0 || buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3956\n");
+      else
+        fprintf(stderr, "reached bug index 3956\n");
+    }
+    if ((!FIXREVERTER[3956] && (cur == (void *) 0 || buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     switch (cur->type) {
         case XML_DOCUMENT_NODE:
@@ -5640,8 +8039,23 @@ xmlNodeGetContent(const xmlNode *cur)
     xmlBufPtr buf;
     xmlChar *ret;
 
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3957]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3957\n");
+      else
+        fprintf(stderr, "reached bug index 3957\n");
+    }
+    if ((!FIXREVERTER[3957] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     switch (cur->type) {
         case XML_DOCUMENT_NODE:
@@ -5655,15 +8069,45 @@ xmlNodeGetContent(const xmlNode *cur)
         case XML_ENTITY_DECL: {
             xmlNodePtr children = cur->children;
 
-            if (children == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[3958]) {
+              if ((children == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 3958\n");
+              else
+                fprintf(stderr, "reached bug index 3958\n");
+            }
+            if ((!FIXREVERTER[3958] && (children == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return(xmlStrdup(BAD_CAST ""));
+                #ifdef FRCOV
+                }
+                #endif
 
             /* Optimization for single text children */
             if (((children->type == XML_TEXT_NODE) ||
                  (children->type == XML_CDATA_SECTION_NODE)) &&
                 (children->next == NULL)) {
-                if (children->content == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[3959]) {
+                  if ((children -> content == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 3959\n");
+                  else
+                    fprintf(stderr, "reached bug index 3959\n");
+                }
+                if ((!FIXREVERTER[3959] && (children -> content == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     return(xmlStrdup(BAD_CAST ""));
+                    #ifdef FRCOV
+                    }
+                    #endif
                 return(xmlStrdup(children->content));
             }
 
@@ -5687,8 +8131,23 @@ xmlNodeGetContent(const xmlNode *cur)
     }
 
     buf = xmlBufCreateSize(64);
-    if (buf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3960]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3960\n");
+      else
+        fprintf(stderr, "reached bug index 3960\n");
+    }
+    if ((!FIXREVERTER[3960] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     xmlBufSetAllocationScheme(buf, XML_BUFFER_ALLOC_DOUBLEIT);
     xmlBufGetNodeContent(buf, cur);
     ret = xmlBufDetach(buf);
@@ -5899,8 +8358,23 @@ xmlGetNsListSafe(const xmlDoc *doc ATTRIBUTE_UNUSED, const xmlNode *node,
     int maxns = 0;
     int i;
 
-    if (out == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3967]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3967\n");
+      else
+        fprintf(stderr, "reached bug index 3967\n");
+    }
+    if ((!FIXREVERTER[3967] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(1);
+        #ifdef FRCOV
+        }
+        #endif
     *out = NULL;
     if ((node == NULL) || (node->type == XML_NAMESPACE_DECL))
         return(1);
@@ -5922,10 +8396,25 @@ xmlGetNsListSafe(const xmlDoc *doc ATTRIBUTE_UNUSED, const xmlNode *node,
                         tmp = (xmlNsPtr *) xmlRealloc(namespaces,
                                                       (maxns + 1) *
                                                       sizeof(xmlNsPtr));
-                        if (tmp == NULL) {
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[3968]) {
+                          if ((tmp == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 3968\n");
+                          else
+                            fprintf(stderr, "reached bug index 3968\n");
+                        }
+                        if ((!FIXREVERTER[3968] && (tmp == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        ) {
                             xmlFree(namespaces);
                             return(-1);
                         }
+                        #ifdef FRCOV
+                        }
+                        #endif
                         namespaces = tmp;
                     }
                     namespaces[nbns++] = cur;
@@ -5970,20 +8459,65 @@ xmlNewXmlNs(void) {
     xmlNsPtr ns;
 
     ns = (xmlNsPtr) xmlMalloc(sizeof(xmlNs));
-    if (ns == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3969]) {
+      if ((ns == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3969\n");
+      else
+        fprintf(stderr, "reached bug index 3969\n");
+    }
+    if ((!FIXREVERTER[3969] && (ns == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     memset(ns, 0, sizeof(xmlNs));
     ns->type = XML_LOCAL_NAMESPACE;
     ns->href = xmlStrdup(XML_XML_NAMESPACE);
-    if (ns->href == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3970]) {
+      if ((ns -> href == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3970\n");
+      else
+        fprintf(stderr, "reached bug index 3970\n");
+    }
+    if ((!FIXREVERTER[3970] && (ns -> href == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFreeNs(ns);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ns->prefix = xmlStrdup(BAD_CAST "xml");
-    if (ns->prefix == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3971]) {
+      if ((ns -> prefix == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3971\n");
+      else
+        fprintf(stderr, "reached bug index 3971\n");
+    }
+    if ((!FIXREVERTER[3971] && (ns -> prefix == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFreeNs(ns);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(ns);
 }
@@ -6030,8 +8564,23 @@ xmlSearchNsSafe(xmlNodePtr node, const xmlChar *prefix,
     xmlNodePtr orig = node;
     xmlNodePtr parent;
 
-    if (out == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3972]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3972\n");
+      else
+        fprintf(stderr, "reached bug index 3972\n");
+    }
+    if ((!FIXREVERTER[3972] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(1);
+        #ifdef FRCOV
+        }
+        #endif
     *out = NULL;
     if ((node == NULL) || (node->type == XML_NAMESPACE_DECL))
         return(1);
@@ -6040,16 +8589,46 @@ xmlSearchNsSafe(xmlNodePtr node, const xmlChar *prefix,
 
     if ((doc != NULL) && (IS_STR_XML(prefix))) {
         cur = xmlTreeEnsureXMLDecl(doc);
-        if (cur == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3973]) {
+          if ((cur == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3973\n");
+          else
+            fprintf(stderr, "reached bug index 3973\n");
+        }
+        if ((!FIXREVERTER[3973] && (cur == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(-1);
+            #ifdef FRCOV
+            }
+            #endif
         *out = cur;
         return(0);
     }
 
     while (node->type != XML_ELEMENT_NODE) {
         node = node->parent;
-        if (node == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3974]) {
+          if ((node == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3974\n");
+          else
+            fprintf(stderr, "reached bug index 3974\n");
+        }
+        if ((!FIXREVERTER[3974] && (node == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(0);
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     parent = node;
@@ -6084,8 +8663,23 @@ xmlSearchNsSafe(xmlNodePtr node, const xmlChar *prefix,
      */
     if ((doc == NULL) && (IS_STR_XML(prefix))) {
         cur = xmlNewXmlNs();
-        if (cur == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3975]) {
+          if ((cur == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3975\n");
+          else
+            fprintf(stderr, "reached bug index 3975\n");
+        }
+        if ((!FIXREVERTER[3975] && (cur == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(-1);
+            #ifdef FRCOV
+            }
+            #endif
         cur->next = parent->nsDef;
         parent->nsDef = cur;
         *out = cur;
@@ -6183,8 +8777,23 @@ xmlSearchNsByHrefSafe(xmlNodePtr node, const xmlChar *href,
     xmlNodePtr parent;
     int is_attr;
 
-    if (out == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3976]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3976\n");
+      else
+        fprintf(stderr, "reached bug index 3976\n");
+    }
+    if ((!FIXREVERTER[3976] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(1);
+        #ifdef FRCOV
+        }
+        #endif
     *out = NULL;
     if ((node == NULL) || (node->type == XML_NAMESPACE_DECL))
         return(1);
@@ -6193,8 +8802,23 @@ xmlSearchNsByHrefSafe(xmlNodePtr node, const xmlChar *href,
 
     if ((doc != NULL) && (xmlStrEqual(href, XML_XML_NAMESPACE))) {
         cur = xmlTreeEnsureXMLDecl(doc);
-        if (cur == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3977]) {
+          if ((cur == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3977\n");
+          else
+            fprintf(stderr, "reached bug index 3977\n");
+        }
+        if ((!FIXREVERTER[3977] && (cur == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(-1);
+            #ifdef FRCOV
+            }
+            #endif
         *out = cur;
         return(0);
     }
@@ -6203,8 +8827,23 @@ xmlSearchNsByHrefSafe(xmlNodePtr node, const xmlChar *href,
 
     while (node->type != XML_ELEMENT_NODE) {
         node = node->parent;
-        if (node == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3978]) {
+          if ((node == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3978\n");
+          else
+            fprintf(stderr, "reached bug index 3978\n");
+        }
+        if ((!FIXREVERTER[3978] && (node == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(0);
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     parent = node;
@@ -6245,8 +8884,23 @@ xmlSearchNsByHrefSafe(xmlNodePtr node, const xmlChar *href,
      */
     if ((doc == NULL) && (xmlStrEqual(href, XML_XML_NAMESPACE))) {
         cur = xmlNewXmlNs();
-        if (cur == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[3979]) {
+          if ((cur == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 3979\n");
+          else
+            fprintf(stderr, "reached bug index 3979\n");
+        }
+        if ((!FIXREVERTER[3979] && (cur == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(-1);
+            #ifdef FRCOV
+            }
+            #endif
         cur->next = parent->nsDef;
         parent->nsDef = cur;
         *out = cur;
@@ -6562,14 +9216,59 @@ xmlGetPropNodeInternal(const xmlNode *node, const xmlChar *name,
 	*/
 	if ((node->ns != NULL) && (node->ns->prefix != NULL)) {
 	    tmpstr = xmlStrdup(node->ns->prefix);
-	    if (tmpstr == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3987]) {
+	      if ((tmpstr == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3987\n");
+	      else
+	        fprintf(stderr, "reached bug index 3987\n");
+	    }
+	    if ((!FIXREVERTER[3987] && (tmpstr == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    tmpstr = xmlStrcat(tmpstr, BAD_CAST ":");
-	    if (tmpstr == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3988]) {
+	      if ((tmpstr == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3988\n");
+	      else
+	        fprintf(stderr, "reached bug index 3988\n");
+	    }
+	    if ((!FIXREVERTER[3988] && (tmpstr == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    tmpstr = xmlStrcat(tmpstr, node->name);
-	    if (tmpstr == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3989]) {
+	      if ((tmpstr == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3989\n");
+	      else
+	        fprintf(stderr, "reached bug index 3989\n");
+	    }
+	    if ((!FIXREVERTER[3989] && (tmpstr == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    elemQName = tmpstr;
 	} else
 	    elemQName = (xmlChar *) node->name;
@@ -6601,11 +9300,26 @@ xmlGetPropNodeInternal(const xmlNode *node, const xmlChar *name,
 	    * ns-decls corresponding to @nsName.
 	    */
 	    nsList = xmlGetNsList(node->doc, node);
-	    if (nsList == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[3990]) {
+	      if ((nsList == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 3990\n");
+	      else
+	        fprintf(stderr, "reached bug index 3990\n");
+	    }
+	    if ((!FIXREVERTER[3990] && (nsList == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if (tmpstr != NULL)
 		    xmlFree(tmpstr);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    cur = nsList;
 	    while (*cur != NULL) {
 		if (xmlStrEqual((*cur)->href, nsName)) {
@@ -6639,8 +9353,23 @@ xmlGetPropNodeInternal(const xmlNode *node, const xmlChar *name,
 static xmlChar*
 xmlGetPropNodeValueInternal(const xmlAttr *prop)
 {
-    if (prop == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3991]) {
+      if ((prop == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3991\n");
+      else
+        fprintf(stderr, "reached bug index 3991\n");
+    }
+    if ((!FIXREVERTER[3991] && (prop == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (prop->type == XML_ATTRIBUTE_NODE) {
 	return(xmlNodeGetContent((xmlNodePtr) prop));
     } else if (prop->type == XML_ATTRIBUTE_DECL) {
@@ -6745,13 +9474,43 @@ xmlNodeGetAttrValue(const xmlNode *node, const xmlChar *name,
                     const xmlChar *nsUri, xmlChar **out) {
     xmlAttrPtr prop;
 
-    if (out == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3992]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3992\n");
+      else
+        fprintf(stderr, "reached bug index 3992\n");
+    }
+    if ((!FIXREVERTER[3992] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(1);
+        #ifdef FRCOV
+        }
+        #endif
     *out = NULL;
 
     prop = xmlGetPropNodeInternal(node, name, nsUri, 0);
-    if (prop == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3993]) {
+      if ((prop == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3993\n");
+      else
+        fprintf(stderr, "reached bug index 3993\n");
+    }
+    if ((!FIXREVERTER[3993] && (prop == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(1);
+	#ifdef FRCOV
+	}
+	#endif
 
     *out = xmlGetPropNodeValueInternal(prop);
     if (*out == NULL)
@@ -6784,8 +9543,23 @@ xmlGetProp(const xmlNode *node, const xmlChar *name) {
     xmlAttrPtr prop;
 
     prop = xmlHasProp(node, name);
-    if (prop == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3994]) {
+      if ((prop == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3994\n");
+      else
+        fprintf(stderr, "reached bug index 3994\n");
+    }
+    if ((!FIXREVERTER[3994] && (prop == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlGetPropNodeValueInternal(prop));
 }
 
@@ -6812,8 +9586,23 @@ xmlGetNoNsProp(const xmlNode *node, const xmlChar *name) {
     xmlAttrPtr prop;
 
     prop = xmlGetPropNodeInternal(node, name, NULL, 1);
-    if (prop == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3995]) {
+      if ((prop == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3995\n");
+      else
+        fprintf(stderr, "reached bug index 3995\n");
+    }
+    if ((!FIXREVERTER[3995] && (prop == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlGetPropNodeValueInternal(prop));
 }
 
@@ -6919,8 +9708,23 @@ xmlSetProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value) {
      * handle QNames
      */
     localname = xmlSplitQName4(name, &prefix);
-    if (localname == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[3999]) {
+      if ((localname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 3999\n");
+      else
+        fprintf(stderr, "reached bug index 3999\n");
+    }
+    if ((!FIXREVERTER[3999] && (localname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (prefix != NULL) {
 	res = xmlSearchNsSafe(node, prefix, &ns);
@@ -6954,8 +9758,23 @@ xmlSetNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name,
 
     if (ns && (ns->href == NULL))
 	return(NULL);
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4001]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4001\n");
+      else
+        fprintf(stderr, "reached bug index 4001\n");
+    }
+    if ((!FIXREVERTER[4001] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     prop = xmlGetPropNodeInternal(node, name,
                                   (ns != NULL) ? ns->href : NULL, 0);
     if (prop != NULL) {
@@ -6966,8 +9785,23 @@ xmlSetNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name,
 	*/
         if (value != NULL) {
 	    children = xmlNewDocText(node->doc, value);
-            if (children == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[4002]) {
+              if ((children == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 4002\n");
+              else
+                fprintf(stderr, "reached bug index 4002\n");
+            }
+            if ((!FIXREVERTER[4002] && (children == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return(NULL);
+                #ifdef FRCOV
+                }
+                #endif
         }
 
 	if (prop->atype == XML_ATTRIBUTE_ID) {
@@ -6987,8 +9821,23 @@ xmlSetNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name,
 	    tmp = prop->children;
 	    while (tmp != NULL) {
 		tmp->parent = (xmlNodePtr) prop;
-		if (tmp->next == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4003]) {
+		  if ((tmp -> next == (void *) 0  ) && !(0))
+		    fprintf(stderr, "triggered bug index 4003\n");
+		  else
+		    fprintf(stderr, "reached bug index 4003\n");
+		}
+		if ((!FIXREVERTER[4003] && (tmp -> next == (void *) 0  ))
+		#else
+		if (0
+		#endif
+		)
 		    prop->last = tmp;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		tmp = tmp->next;
 	    }
 	}
@@ -7015,7 +9864,22 @@ xmlSetNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name,
  */
 int
 xmlNodeIsText(const xmlNode *node) {
-    if (node == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4004]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4004\n");
+      else
+        fprintf(stderr, "reached bug index 4004\n");
+    }
+    if ((!FIXREVERTER[4004] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (node->type == XML_TEXT_NODE) return(1);
     return(0);
@@ -7033,12 +9897,42 @@ xmlNodeIsText(const xmlNode *node) {
 int
 xmlIsBlankNode(const xmlNode *node) {
     const xmlChar *cur;
-    if (node == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4005]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4005\n");
+      else
+        fprintf(stderr, "reached bug index 4005\n");
+    }
+    if ((!FIXREVERTER[4005] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((node->type != XML_TEXT_NODE) &&
         (node->type != XML_CDATA_SECTION_NODE))
 	return(0);
-    if (node->content == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4006]) {
+      if ((node -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4006\n");
+      else
+        fprintf(stderr, "reached bug index 4006\n");
+    }
+    if ((!FIXREVERTER[4006] && (node -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
     cur = node->content;
     while (*cur != 0) {
 	if (!IS_BLANK_CH(*cur)) return(0);
@@ -7063,8 +9957,23 @@ xmlIsBlankNode(const xmlNode *node) {
 
 int
 xmlTextConcat(xmlNodePtr node, const xmlChar *content, int len) {
-    if (node == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4007]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4007\n");
+      else
+        fprintf(stderr, "reached bug index 4007\n");
+    }
+    if ((!FIXREVERTER[4007] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((node->type != XML_TEXT_NODE) &&
         (node->type != XML_CDATA_SECTION_NODE) &&
@@ -7092,16 +10001,46 @@ xmlBufferCreate(void) {
     xmlBufferPtr ret;
 
     ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4008]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4008\n");
+      else
+        fprintf(stderr, "reached bug index 4008\n");
+    }
+    if ((!FIXREVERTER[4008] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret->use = 0;
     ret->size = xmlDefaultBufferSize;
     ret->alloc = xmlBufferAllocScheme;
     ret->content = (xmlChar *) xmlMallocAtomic(ret->size);
-    if (ret->content == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4009]) {
+      if ((ret -> content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4009\n");
+      else
+        fprintf(stderr, "reached bug index 4009\n");
+    }
+    if ((!FIXREVERTER[4009] && (ret -> content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(ret);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->content[0] = 0;
     ret->contentIO = NULL;
     return(ret);
@@ -7209,9 +10148,24 @@ xmlBufferSetAllocationScheme(xmlBufferPtr buf,
  */
 void
 xmlBufferFree(xmlBufferPtr buf) {
-    if (buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4014]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4014\n");
+      else
+        fprintf(stderr, "reached bug index 4014\n");
+    }
+    if ((!FIXREVERTER[4014] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if ((buf->alloc == XML_BUFFER_ALLOC_IO) &&
         (buf->contentIO != NULL)) {
@@ -7410,12 +10364,42 @@ xmlBufferResize(xmlBufferPtr buf, unsigned int size)
     xmlChar* rebuf = NULL;
     size_t start_buf;
 
-    if (buf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4027]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4027\n");
+      else
+        fprintf(stderr, "reached bug index 4027\n");
+    }
+    if ((!FIXREVERTER[4027] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     /* Don't resize if we don't have to */
-    if (size < buf->size)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4028]) {
+      if ((size < buf -> size ) && !(0))
+        fprintf(stderr, "triggered bug index 4028\n");
+      else
+        fprintf(stderr, "reached bug index 4028\n");
+    }
+    if ((!FIXREVERTER[4028] && (size < buf -> size ))
+    #else
+    if (0
+    #endif
+    )
         return 1;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (size > UINT_MAX - 10)
         return 0;
@@ -7467,8 +10451,23 @@ xmlBufferResize(xmlBufferPtr buf, unsigned int size)
 	    buf->size += start_buf;
 	} else {
 	    rebuf = (xmlChar *) xmlRealloc(buf->contentIO, start_buf + newSize);
-	    if (rebuf == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4029]) {
+	      if ((rebuf == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4029\n");
+	      else
+	        fprintf(stderr, "reached bug index 4029\n");
+	    }
+	    if ((!FIXREVERTER[4029] && (rebuf == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return 0;
+		#ifdef FRCOV
+		}
+		#endif
 	    buf->contentIO = rebuf;
 	    buf->content = rebuf + start_buf;
 	}
@@ -7492,8 +10491,23 @@ xmlBufferResize(xmlBufferPtr buf, unsigned int size)
 		rebuf[buf->use] = 0;
 	    }
 	}
-	if (rebuf == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4030]) {
+	  if ((rebuf == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4030\n");
+	  else
+	    fprintf(stderr, "reached bug index 4030\n");
+	}
+	if ((!FIXREVERTER[4030] && (rebuf == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	buf->content = rebuf;
     }
     buf->size = newSize;
@@ -7517,19 +10531,94 @@ int
 xmlBufferAdd(xmlBufferPtr buf, const xmlChar *str, int len) {
     unsigned int needSize;
 
-    if ((str == NULL) || (buf == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4031]) {
+      if ((str == (void *) 0 || buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4031\n");
+      else
+        fprintf(stderr, "reached bug index 4031\n");
+    }
+    if ((!FIXREVERTER[4031] && (str == (void *) 0 || buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return -1;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (len < -1) {
 	return -1;
     }
-    if (len == 0) return 0;
-
-    if (len < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4032]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4032\n");
+      else
+        fprintf(stderr, "reached bug index 4032\n");
+    }
+    if ((!FIXREVERTER[4032] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4033]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4033\n");
+      else
+        fprintf(stderr, "reached bug index 4033\n");
+    }
+    if ((!FIXREVERTER[4033] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
         len = xmlStrlen(str);
-
-    if (len < 0) return -1;
-    if (len == 0) return 0;
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4034]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4034\n");
+      else
+        fprintf(stderr, "reached bug index 4034\n");
+    }
+    if ((!FIXREVERTER[4034] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return -1;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4035]) {
+      if ((len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4035\n");
+      else
+        fprintf(stderr, "reached bug index 4035\n");
+    }
+    if ((!FIXREVERTER[4035] && (len == 0 ))
+    #else
+    if (0
+    #endif
+    ) return 0;
+    #ifdef FRCOV
+    }
+    #endif
 
     /* Note that both buf->size and buf->use can be zero here. */
     if ((unsigned) len >= buf->size - buf->use) {
diff --git a/uri.c b/uri.c
index 3803e0de..9be02116 100644
--- a/uri.c
+++ b/uri.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /**
  * uri.c: set of generic URI related routines
  *
@@ -195,8 +199,23 @@ static void xmlCleanURI(xmlURIPtr uri);
 
 static int
 xmlIsUnreserved(xmlURIPtr uri, const char *cur) {
-    if (uri == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1665]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1665\n");
+      else
+        fprintf(stderr, "reached bug index 1665\n");
+    }
+    if ((!FIXREVERTER[1665] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (ISA_STRICTLY_UNRESERVED(cur))
         return(1);
@@ -236,8 +255,23 @@ xmlParse3986Scheme(xmlURIPtr uri, const char **str) {
     if (uri != NULL) {
 	if (uri->scheme != NULL) xmlFree(uri->scheme);
 	uri->scheme = STRNDUP(*str, cur - *str);
-        if (uri->scheme == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1666]) {
+          if ((uri -> scheme == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1666\n");
+          else
+            fprintf(stderr, "reached bug index 1666\n");
+        }
+        if ((!FIXREVERTER[1666] && (uri -> scheme == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(-1);
+            #ifdef FRCOV
+            }
+            #endif
     }
     *str = cur;
     return(0);
@@ -275,8 +309,23 @@ xmlParse3986Fragment(xmlURIPtr uri, const char **str)
 	    uri->fragment = STRNDUP(*str, cur - *str);
 	else
 	    uri->fragment = xmlURIUnescapeString(*str, cur - *str, NULL);
-        if (uri->fragment == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1667]) {
+          if ((uri -> fragment == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1667\n");
+          else
+            fprintf(stderr, "reached bug index 1667\n");
+        }
+        if ((!FIXREVERTER[1667] && (uri -> fragment == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return (-1);
+            #ifdef FRCOV
+            }
+            #endif
     }
     *str = cur;
     return (0);
@@ -309,8 +358,23 @@ xmlParse3986Query(xmlURIPtr uri, const char **str)
 	    uri->query = STRNDUP(*str, cur - *str);
 	else
 	    uri->query = xmlURIUnescapeString(*str, cur - *str, NULL);
-        if (uri->query == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1668]) {
+          if ((uri -> query == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1668\n");
+          else
+            fprintf(stderr, "reached bug index 1668\n");
+        }
+        if ((!FIXREVERTER[1668] && (uri -> query == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return (-1);
+            #ifdef FRCOV
+            }
+            #endif
 
 	/* Save the raw bytes of the query as well.
 	 * See: http://mail.gnome.org/archives/xml/2007-April/thread.html#00114
@@ -318,8 +382,23 @@ xmlParse3986Query(xmlURIPtr uri, const char **str)
 	if (uri->query_raw != NULL)
 	    xmlFree (uri->query_raw);
 	uri->query_raw = STRNDUP (*str, cur - *str);
-        if (uri->query_raw == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1669]) {
+          if ((uri -> query_raw == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1669\n");
+          else
+            fprintf(stderr, "reached bug index 1669\n");
+        }
+        if ((!FIXREVERTER[1669] && (uri -> query_raw == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return (-1);
+            #ifdef FRCOV
+            }
+            #endif
     }
     *str = cur;
     return (0);
@@ -347,17 +426,62 @@ xmlParse3986Port(xmlURIPtr uri, const char **str)
 	while (ISA_DIGIT(cur)) {
             int digit = *cur - '0';
 
-            if (port > INT_MAX / 10)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1670]) {
+              if ((port > 2147483647 / 10 ) && !(0))
+                fprintf(stderr, "triggered bug index 1670\n");
+              else
+                fprintf(stderr, "reached bug index 1670\n");
+            }
+            if ((!FIXREVERTER[1670] && (port > 2147483647 / 10 ))
+            #else
+            if (0
+            #endif
+            )
                 return(1);
+                #ifdef FRCOV
+                }
+                #endif
             port *= 10;
-            if (port > INT_MAX - digit)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1671]) {
+              if ((port > 2147483647 - digit ) && !(0))
+                fprintf(stderr, "triggered bug index 1671\n");
+              else
+                fprintf(stderr, "reached bug index 1671\n");
+            }
+            if ((!FIXREVERTER[1671] && (port > 2147483647 - digit ))
+            #else
+            if (0
+            #endif
+            )
                 return(1);
+                #ifdef FRCOV
+                }
+                #endif
 	    port += digit;
 
 	    cur++;
 	}
-	if (uri != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1672]) {
+	  if ((uri != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1672\n");
+	  else
+	    fprintf(stderr, "reached bug index 1672\n");
+	}
+	if ((!FIXREVERTER[1672] && (uri != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    uri->port = port;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	*str = cur;
 	return(0);
     }
@@ -392,8 +516,23 @@ xmlParse3986Userinfo(xmlURIPtr uri, const char **str)
 		uri->user = STRNDUP(*str, cur - *str);
 	    else
 		uri->user = xmlURIUnescapeString(*str, cur - *str, NULL);
-            if (uri->user == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1673]) {
+              if ((uri -> user == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1673\n");
+              else
+                fprintf(stderr, "reached bug index 1673\n");
+            }
+            if ((!FIXREVERTER[1673] && (uri -> user == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return(-1);
+                #ifdef FRCOV
+                }
+                #endif
 	}
 	*str = cur;
 	return(0);
@@ -511,8 +650,23 @@ found:
 		uri->server = STRNDUP(host, cur - host);
 	    else
 		uri->server = xmlURIUnescapeString(host, cur - host, NULL);
-            if (uri->server == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1674]) {
+              if ((uri -> server == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1674\n");
+              else
+                fprintf(stderr, "reached bug index 1674\n");
+            }
+            if ((!FIXREVERTER[1674] && (uri -> server == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return(-1);
+                #ifdef FRCOV
+                }
+                #endif
 	} else
 	    uri->server = NULL;
     }
@@ -625,8 +779,23 @@ xmlParse3986PathAbEmpty(xmlURIPtr uri, const char **str)
                 uri->path = STRNDUP(*str, cur - *str);
             else
                 uri->path = xmlURIUnescapeString(*str, cur - *str, NULL);
-            if (uri->path == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1679]) {
+              if ((uri -> path == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1679\n");
+              else
+                fprintf(stderr, "reached bug index 1679\n");
+            }
+            if ((!FIXREVERTER[1679] && (uri -> path == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return (-1);
+                #ifdef FRCOV
+                }
+                #endif
         } else {
             uri->path = NULL;
         }
@@ -673,8 +842,23 @@ xmlParse3986PathAbsolute(xmlURIPtr uri, const char **str)
                 uri->path = STRNDUP(*str, cur - *str);
             else
                 uri->path = xmlURIUnescapeString(*str, cur - *str, NULL);
-            if (uri->path == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1681]) {
+              if ((uri -> path == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1681\n");
+              else
+                fprintf(stderr, "reached bug index 1681\n");
+            }
+            if ((!FIXREVERTER[1681] && (uri -> path == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return (-1);
+                #ifdef FRCOV
+                }
+                #endif
         } else {
             uri->path = NULL;
         }
@@ -717,8 +901,23 @@ xmlParse3986PathRootless(xmlURIPtr uri, const char **str)
                 uri->path = STRNDUP(*str, cur - *str);
             else
                 uri->path = xmlURIUnescapeString(*str, cur - *str, NULL);
-            if (uri->path == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1684]) {
+              if ((uri -> path == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1684\n");
+              else
+                fprintf(stderr, "reached bug index 1684\n");
+            }
+            if ((!FIXREVERTER[1684] && (uri -> path == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return (-1);
+                #ifdef FRCOV
+                }
+                #endif
         } else {
             uri->path = NULL;
         }
@@ -761,8 +960,23 @@ xmlParse3986PathNoScheme(xmlURIPtr uri, const char **str)
                 uri->path = STRNDUP(*str, cur - *str);
             else
                 uri->path = xmlURIUnescapeString(*str, cur - *str, NULL);
-            if (uri->path == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1687]) {
+              if ((uri -> path == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1687\n");
+              else
+                fprintf(stderr, "reached bug index 1687\n");
+            }
+            if ((!FIXREVERTER[1687] && (uri -> path == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return (-1);
+                #ifdef FRCOV
+                }
+                #endif
         } else {
             uri->path = NULL;
         }
@@ -939,8 +1153,23 @@ static int
 xmlParse3986URIReference(xmlURIPtr uri, const char *str) {
     int ret;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1702]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1702\n");
+      else
+        fprintf(stderr, "reached bug index 1702\n");
+    }
+    if ((!FIXREVERTER[1702] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     xmlCleanURI(uri);
 
     /*
@@ -982,12 +1211,42 @@ xmlParseURISafe(const char *str, xmlURIPtr *uriOut) {
 
     if (uriOut != NULL)
         *uriOut = NULL;
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1705]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1705\n");
+      else
+        fprintf(stderr, "reached bug index 1705\n");
+    }
+    if ((!FIXREVERTER[1705] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(1);
+	#ifdef FRCOV
+	}
+	#endif
 
     uri = xmlCreateURI();
-    if (uri == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1706]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1706\n");
+      else
+        fprintf(stderr, "reached bug index 1706\n");
+    }
+    if ((!FIXREVERTER[1706] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = xmlParse3986URIReference(uri, str);
     if (ret) {
@@ -1084,8 +1343,23 @@ xmlCreateURI(void) {
     xmlURIPtr ret;
 
     ret = (xmlURIPtr) xmlMalloc(sizeof(xmlURI));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1708]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1708\n");
+      else
+        fprintf(stderr, "reached bug index 1708\n");
+    }
+    if ((!FIXREVERTER[1708] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(ret, 0, sizeof(xmlURI));
     ret->port = PORT_EMPTY;
     return(ret);
@@ -1106,8 +1380,23 @@ xmlSaveUriRealloc(xmlChar *ret, int *max) {
         return(NULL);
     tmp = *max * 2;
     temp = (xmlChar *) xmlRealloc(ret, (tmp + 1));
-    if (temp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1709]) {
+      if ((temp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1709\n");
+      else
+        fprintf(stderr, "reached bug index 1709\n");
+    }
+    if ((!FIXREVERTER[1709] && (temp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     *max = tmp;
     return(temp);
 }
@@ -1128,13 +1417,43 @@ xmlSaveUri(xmlURIPtr uri) {
     int len;
     int max;
 
-    if (uri == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1710]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1710\n");
+      else
+        fprintf(stderr, "reached bug index 1710\n");
+    }
+    if ((!FIXREVERTER[1710] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
 
     max = 80;
     ret = (xmlChar *) xmlMallocAtomic(max + 1);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1711]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1711\n");
+      else
+        fprintf(stderr, "reached bug index 1711\n");
+    }
+    if ((!FIXREVERTER[1711] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     len = 0;
 
     if (uri->scheme != NULL) {
@@ -1142,14 +1461,44 @@ xmlSaveUri(xmlURIPtr uri) {
 	while (*p != 0) {
 	    if (len >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1712]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1712\n");
+                  else
+                    fprintf(stderr, "reached bug index 1712\n");
+                }
+                if ((!FIXREVERTER[1712] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
 		ret = temp;
 	    }
 	    ret[len++] = *p++;
 	}
 	if (len >= max) {
             temp = xmlSaveUriRealloc(ret, &max);
-            if (temp == NULL) goto mem_error;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1713]) {
+              if ((temp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1713\n");
+              else
+                fprintf(stderr, "reached bug index 1713\n");
+            }
+            if ((!FIXREVERTER[1713] && (temp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
             ret = temp;
 	}
 	ret[len++] = ':';
@@ -1159,7 +1508,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	while (*p != 0) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1714]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1714\n");
+                  else
+                    fprintf(stderr, "reached bug index 1714\n");
+                }
+                if ((!FIXREVERTER[1714] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    if (IS_RESERVED(*(p)) || IS_UNRESERVED(*(p)))
@@ -1176,7 +1540,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	if ((uri->server != NULL) || (uri->port != PORT_EMPTY)) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1715]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1715\n");
+                  else
+                    fprintf(stderr, "reached bug index 1715\n");
+                }
+                if ((!FIXREVERTER[1715] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    ret[len++] = '/';
@@ -1186,7 +1565,22 @@ xmlSaveUri(xmlURIPtr uri) {
 		while (*p != 0) {
 		    if (len + 3 >= max) {
                         temp = xmlSaveUriRealloc(ret, &max);
-                        if (temp == NULL) goto mem_error;
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1716]) {
+                          if ((temp == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1716\n");
+                          else
+                            fprintf(stderr, "reached bug index 1716\n");
+                        }
+                        if ((!FIXREVERTER[1716] && (temp == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        ) goto mem_error;
+                        #ifdef FRCOV
+                        }
+                        #endif
                         ret = temp;
 		    }
 		    if ((IS_UNRESERVED(*(p))) ||
@@ -1205,7 +1599,22 @@ xmlSaveUri(xmlURIPtr uri) {
 		}
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1717]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1717\n");
+                      else
+                        fprintf(stderr, "reached bug index 1717\n");
+                    }
+                    if ((!FIXREVERTER[1717] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		ret[len++] = '@';
@@ -1215,7 +1624,22 @@ xmlSaveUri(xmlURIPtr uri) {
 		while (*p != 0) {
 		    if (len >= max) {
 			temp = xmlSaveUriRealloc(ret, &max);
-			if (temp == NULL) goto mem_error;
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1718]) {
+			  if ((temp == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 1718\n");
+			  else
+			    fprintf(stderr, "reached bug index 1718\n");
+			}
+			if ((!FIXREVERTER[1718] && (temp == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) goto mem_error;
+			#ifdef FRCOV
+			}
+			#endif
 			ret = temp;
 		    }
                     /* TODO: escaping? */
@@ -1225,7 +1649,22 @@ xmlSaveUri(xmlURIPtr uri) {
             if (uri->port > 0) {
                 if (len + 10 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1719]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1719\n");
+                      else
+                        fprintf(stderr, "reached bug index 1719\n");
+                    }
+                    if ((!FIXREVERTER[1719] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
                 }
                 len += snprintf((char *) &ret[len], max - len, ":%d", uri->port);
@@ -1233,7 +1672,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	} else if (uri->authority != NULL) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1720]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1720\n");
+                  else
+                    fprintf(stderr, "reached bug index 1720\n");
+                }
+                if ((!FIXREVERTER[1720] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    ret[len++] = '/';
@@ -1242,7 +1696,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	    while (*p != 0) {
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1721]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1721\n");
+                      else
+                        fprintf(stderr, "reached bug index 1721\n");
+                    }
+                    if ((!FIXREVERTER[1721] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		if ((IS_UNRESERVED(*(p))) ||
@@ -1261,7 +1730,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	} else if (uri->scheme != NULL) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1722]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1722\n");
+                  else
+                    fprintf(stderr, "reached bug index 1722\n");
+                }
+                if ((!FIXREVERTER[1722] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	}
@@ -1279,7 +1763,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	        (xmlStrEqual(BAD_CAST uri->scheme, BAD_CAST "file"))) {
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1723]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1723\n");
+                      else
+                        fprintf(stderr, "reached bug index 1723\n");
+                    }
+                    if ((!FIXREVERTER[1723] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		ret[len++] = *p++;
@@ -1289,7 +1788,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	    while (*p != 0) {
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1724]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1724\n");
+                      else
+                        fprintf(stderr, "reached bug index 1724\n");
+                    }
+                    if ((!FIXREVERTER[1724] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		if ((IS_UNRESERVED(*(p))) || ((*(p) == '/')) ||
@@ -1309,7 +1823,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	if (uri->query_raw != NULL) {
 	    if (len + 1 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1725]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1725\n");
+                  else
+                    fprintf(stderr, "reached bug index 1725\n");
+                }
+                if ((!FIXREVERTER[1725] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    ret[len++] = '?';
@@ -1317,7 +1846,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	    while (*p != 0) {
 		if (len + 1 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1726]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1726\n");
+                      else
+                        fprintf(stderr, "reached bug index 1726\n");
+                    }
+                    if ((!FIXREVERTER[1726] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		ret[len++] = *p++;
@@ -1325,7 +1869,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	} else if (uri->query != NULL) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1727]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1727\n");
+                  else
+                    fprintf(stderr, "reached bug index 1727\n");
+                }
+                if ((!FIXREVERTER[1727] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    ret[len++] = '?';
@@ -1333,7 +1892,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	    while (*p != 0) {
 		if (len + 3 >= max) {
                     temp = xmlSaveUriRealloc(ret, &max);
-                    if (temp == NULL) goto mem_error;
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1728]) {
+                      if ((temp == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1728\n");
+                      else
+                        fprintf(stderr, "reached bug index 1728\n");
+                    }
+                    if ((!FIXREVERTER[1728] && (temp == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) goto mem_error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                     ret = temp;
 		}
 		if ((IS_UNRESERVED(*(p))) || (IS_RESERVED(*(p))))
@@ -1351,7 +1925,22 @@ xmlSaveUri(xmlURIPtr uri) {
     if (uri->fragment != NULL) {
 	if (len + 3 >= max) {
             temp = xmlSaveUriRealloc(ret, &max);
-            if (temp == NULL) goto mem_error;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1729]) {
+              if ((temp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1729\n");
+              else
+                fprintf(stderr, "reached bug index 1729\n");
+            }
+            if ((!FIXREVERTER[1729] && (temp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
             ret = temp;
 	}
 	ret[len++] = '#';
@@ -1359,7 +1948,22 @@ xmlSaveUri(xmlURIPtr uri) {
 	while (*p != 0) {
 	    if (len + 3 >= max) {
                 temp = xmlSaveUriRealloc(ret, &max);
-                if (temp == NULL) goto mem_error;
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1730]) {
+                  if ((temp == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1730\n");
+                  else
+                    fprintf(stderr, "reached bug index 1730\n");
+                }
+                if ((!FIXREVERTER[1730] && (temp == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
                 ret = temp;
 	    }
 	    if ((IS_UNRESERVED(*(p))) || (IS_RESERVED(*(p))))
@@ -1375,7 +1979,22 @@ xmlSaveUri(xmlURIPtr uri) {
     }
     if (len >= max) {
         temp = xmlSaveUriRealloc(ret, &max);
-        if (temp == NULL) goto mem_error;
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1731]) {
+          if ((temp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1731\n");
+          else
+            fprintf(stderr, "reached bug index 1731\n");
+        }
+        if ((!FIXREVERTER[1731] && (temp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
         ret = temp;
     }
     ret[len] = 0;
@@ -1412,7 +2031,22 @@ xmlPrintURI(FILE *stream, xmlURIPtr uri) {
  */
 static void
 xmlCleanURI(xmlURIPtr uri) {
-    if (uri == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1732]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1732\n");
+      else
+        fprintf(stderr, "reached bug index 1732\n");
+    }
+    if ((!FIXREVERTER[1732] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (uri->scheme != NULL) xmlFree(uri->scheme);
     uri->scheme = NULL;
@@ -1442,7 +2076,22 @@ xmlCleanURI(xmlURIPtr uri) {
  */
 void
 xmlFreeURI(xmlURIPtr uri) {
-    if (uri == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1733]) {
+      if ((uri == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1733\n");
+      else
+        fprintf(stderr, "reached bug index 1733\n");
+    }
+    if ((!FIXREVERTER[1733] && (uri == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (uri->scheme != NULL) xmlFree(uri->scheme);
     if (uri->server != NULL) xmlFree(uri->server);
@@ -1491,8 +2140,23 @@ xmlNormalizePath(char *path, int isFile) {
     char *cur, *out;
     int numSeg = 0;
 
-    if (path == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1734]) {
+      if ((path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1734\n");
+      else
+        fprintf(stderr, "reached bug index 1734\n");
+    }
+    if ((!FIXREVERTER[1734] && (path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     cur = path;
     out = path;
@@ -1619,15 +2283,45 @@ xmlURIUnescapeString(const char *str, int len, char *target) {
     char *ret, *out;
     const char *in;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1735]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1735\n");
+      else
+        fprintf(stderr, "reached bug index 1735\n");
+    }
+    if ((!FIXREVERTER[1735] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (len <= 0) len = strlen(str);
     if (len < 0) return(NULL);
 
     if (target == NULL) {
 	ret = (char *) xmlMallocAtomic(len + 1);
-	if (ret == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1738]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1738\n");
+	  else
+	    fprintf(stderr, "reached bug index 1738\n");
+	}
+	if ((!FIXREVERTER[1738] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else
 	ret = target;
     in = str;
@@ -1680,16 +2374,46 @@ xmlURIEscapeStr(const xmlChar *str, const xmlChar *list) {
     const xmlChar *in;
     int len, out;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1739]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1739\n");
+      else
+        fprintf(stderr, "reached bug index 1739\n");
+    }
+    if ((!FIXREVERTER[1739] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (str[0] == 0)
 	return(xmlStrdup(str));
     len = xmlStrlen(str);
 
     len += 20;
     ret = (xmlChar *) xmlMallocAtomic(len);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1740]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1740\n");
+      else
+        fprintf(stderr, "reached bug index 1740\n");
+    }
+    if ((!FIXREVERTER[1740] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     in = (const xmlChar *) str;
     out = 0;
     while(*in != 0) {
@@ -1697,10 +2421,25 @@ xmlURIEscapeStr(const xmlChar *str, const xmlChar *list) {
             if (len > INT_MAX / 2)
                 return(NULL);
             temp = xmlRealloc(ret, len * 2);
-	    if (temp == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1742]) {
+	      if ((temp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1742\n");
+	      else
+	        fprintf(stderr, "reached bug index 1742\n");
+	    }
+	    if ((!FIXREVERTER[1742] && (temp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFree(ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    ret = temp;
             len *= 2;
 	}
@@ -1906,16 +2645,46 @@ xmlResolvePath(const xmlChar *escRef, const xmlChar *base, xmlChar **out) {
     int ret = -1;
     int i;
 
-    if (out == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1745]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1745\n");
+      else
+        fprintf(stderr, "reached bug index 1745\n");
+    }
+    if ((!FIXREVERTER[1745] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(1);
+        #ifdef FRCOV
+        }
+        #endif
     *out = NULL;
 
     if ((escRef == NULL) || (escRef[0] == 0)) {
         if ((base == NULL) || (base[0] == 0))
             return(1);
         ref = xmlStrdup(base);
-        if (ref == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1746]) {
+          if ((ref == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1746\n");
+          else
+            fprintf(stderr, "reached bug index 1746\n");
+        }
+        if ((!FIXREVERTER[1746] && (ref == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto err_memory;
+            #ifdef FRCOV
+            }
+            #endif
         *out = ref;
         return(0);
     }
@@ -1928,14 +2697,44 @@ xmlResolvePath(const xmlChar *escRef, const xmlChar *base, xmlChar **out) {
     fragment = xmlStrchr(escRef, '#');
     if (fragment != NULL) {
         tmp = xmlStrndup(escRef, fragment - escRef);
-        if (tmp == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1747]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1747\n");
+          else
+            fprintf(stderr, "reached bug index 1747\n");
+        }
+        if ((!FIXREVERTER[1747] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto err_memory;
+            #ifdef FRCOV
+            }
+            #endif
         escRef = tmp;
     }
 
     ref = (xmlChar *) xmlURIUnescapeString((char *) escRef, -1, NULL);
-    if (ref == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1748]) {
+      if ((ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1748\n");
+      else
+        fprintf(stderr, "reached bug index 1748\n");
+    }
+    if ((!FIXREVERTER[1748] && (ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto err_memory;
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((base == NULL) || (base[0] == 0))
         goto done;
@@ -1957,8 +2756,23 @@ xmlResolvePath(const xmlChar *escRef, const xmlChar *base, xmlChar **out) {
         int refLen = xmlStrlen(ref);
 
         result = xmlMalloc(i + refLen + 1);
-        if (result == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1749]) {
+          if ((result == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1749\n");
+          else
+            fprintf(stderr, "reached bug index 1749\n");
+        }
+        if ((!FIXREVERTER[1749] && (result == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto err_memory;
+            #ifdef FRCOV
+            }
+            #endif
 
         memcpy(result, base, i);
         memcpy(result + i, ref, refLen + 1);
@@ -1977,8 +2791,23 @@ done:
 
     if (fragment != NULL) {
         result = xmlStrcat(result, fragment);
-        if (result == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1750]) {
+          if ((result == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1750\n");
+          else
+            fprintf(stderr, "reached bug index 1750\n");
+        }
+        if ((!FIXREVERTER[1750] && (result == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto err_memory;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     *out = result;
@@ -2091,59 +2920,224 @@ xmlBuildURISafe(const xmlChar *URI, const xmlChar *base, xmlChar **valPtr) {
      */
     ret = -1;
     res = xmlCreateURI();
-    if (res == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1757]) {
+      if ((res == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1757\n");
+      else
+        fprintf(stderr, "reached bug index 1757\n");
+    }
+    if ((!FIXREVERTER[1757] && (res == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto done;
+	#ifdef FRCOV
+	}
+	#endif
     if ((ref->scheme == NULL) && (ref->path == NULL) &&
 	((ref->authority == NULL) && (ref->server == NULL) &&
          (ref->port == PORT_EMPTY))) {
 	if (bas->scheme != NULL) {
 	    res->scheme = xmlMemStrdup(bas->scheme);
-            if (res->scheme == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1758]) {
+              if ((res -> scheme == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1758\n");
+              else
+                fprintf(stderr, "reached bug index 1758\n");
+            }
+            if ((!FIXREVERTER[1758] && (res -> scheme == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto done;
+                #ifdef FRCOV
+                }
+                #endif
         }
 	if (bas->authority != NULL) {
 	    res->authority = xmlMemStrdup(bas->authority);
-            if (res->authority == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1759]) {
+              if ((res -> authority == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1759\n");
+              else
+                fprintf(stderr, "reached bug index 1759\n");
+            }
+            if ((!FIXREVERTER[1759] && (res -> authority == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto done;
+                #ifdef FRCOV
+                }
+                #endif
         } else {
 	    if (bas->server != NULL) {
 		res->server = xmlMemStrdup(bas->server);
-                if (res->server == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1760]) {
+                  if ((res -> server == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1760\n");
+                  else
+                    fprintf(stderr, "reached bug index 1760\n");
+                }
+                if ((!FIXREVERTER[1760] && (res -> server == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto done;
+                    #ifdef FRCOV
+                    }
+                    #endif
             }
 	    if (bas->user != NULL) {
 		res->user = xmlMemStrdup(bas->user);
-                if (res->user == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1761]) {
+                  if ((res -> user == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1761\n");
+                  else
+                    fprintf(stderr, "reached bug index 1761\n");
+                }
+                if ((!FIXREVERTER[1761] && (res -> user == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto done;
+                    #ifdef FRCOV
+                    }
+                    #endif
             }
 	    res->port = bas->port;
 	}
 	if (bas->path != NULL) {
 	    res->path = xmlMemStrdup(bas->path);
-            if (res->path == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1762]) {
+              if ((res -> path == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1762\n");
+              else
+                fprintf(stderr, "reached bug index 1762\n");
+            }
+            if ((!FIXREVERTER[1762] && (res -> path == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto done;
+                #ifdef FRCOV
+                }
+                #endif
         }
 	if (ref->query_raw != NULL) {
 	    res->query_raw = xmlMemStrdup (ref->query_raw);
-            if (res->query_raw == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1763]) {
+              if ((res -> query_raw == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1763\n");
+              else
+                fprintf(stderr, "reached bug index 1763\n");
+            }
+            if ((!FIXREVERTER[1763] && (res -> query_raw == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto done;
+                #ifdef FRCOV
+                }
+                #endif
         } else if (ref->query != NULL) {
 	    res->query = xmlMemStrdup(ref->query);
-            if (res->query == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1764]) {
+              if ((res -> query == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1764\n");
+              else
+                fprintf(stderr, "reached bug index 1764\n");
+            }
+            if ((!FIXREVERTER[1764] && (res -> query == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto done;
+                #ifdef FRCOV
+                }
+                #endif
         } else if (bas->query_raw != NULL) {
 	    res->query_raw = xmlMemStrdup(bas->query_raw);
-            if (res->query_raw == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1765]) {
+              if ((res -> query_raw == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1765\n");
+              else
+                fprintf(stderr, "reached bug index 1765\n");
+            }
+            if ((!FIXREVERTER[1765] && (res -> query_raw == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto done;
+                #ifdef FRCOV
+                }
+                #endif
         } else if (bas->query != NULL) {
 	    res->query = xmlMemStrdup(bas->query);
-            if (res->query == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1766]) {
+              if ((res -> query == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1766\n");
+              else
+                fprintf(stderr, "reached bug index 1766\n");
+            }
+            if ((!FIXREVERTER[1766] && (res -> query == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto done;
+                #ifdef FRCOV
+                }
+                #endif
         }
 	if (ref->fragment != NULL) {
 	    res->fragment = xmlMemStrdup(ref->fragment);
-            if (res->fragment == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1767]) {
+              if ((res -> fragment == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1767\n");
+              else
+                fprintf(stderr, "reached bug index 1767\n");
+            }
+            if ((!FIXREVERTER[1767] && (res -> fragment == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto done;
+                #ifdef FRCOV
+                }
+                #endif
         }
 	goto step_7;
     }
@@ -2162,23 +3156,83 @@ xmlBuildURISafe(const xmlChar *URI, const xmlChar *base, xmlChar **valPtr) {
     }
     if (bas->scheme != NULL) {
 	res->scheme = xmlMemStrdup(bas->scheme);
-        if (res->scheme == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1769]) {
+          if ((res -> scheme == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1769\n");
+          else
+            fprintf(stderr, "reached bug index 1769\n");
+        }
+        if ((!FIXREVERTER[1769] && (res -> scheme == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto done;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     if (ref->query_raw != NULL) {
 	res->query_raw = xmlMemStrdup(ref->query_raw);
-        if (res->query_raw == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1770]) {
+          if ((res -> query_raw == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1770\n");
+          else
+            fprintf(stderr, "reached bug index 1770\n");
+        }
+        if ((!FIXREVERTER[1770] && (res -> query_raw == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto done;
+            #ifdef FRCOV
+            }
+            #endif
     } else if (ref->query != NULL) {
 	res->query = xmlMemStrdup(ref->query);
-        if (res->query == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1771]) {
+          if ((res -> query == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1771\n");
+          else
+            fprintf(stderr, "reached bug index 1771\n");
+        }
+        if ((!FIXREVERTER[1771] && (res -> query == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto done;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (ref->fragment != NULL) {
 	res->fragment = xmlMemStrdup(ref->fragment);
-        if (res->fragment == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1772]) {
+          if ((res -> fragment == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1772\n");
+          else
+            fprintf(stderr, "reached bug index 1772\n");
+        }
+        if ((!FIXREVERTER[1772] && (res -> fragment == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto done;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     /*
@@ -2192,42 +3246,147 @@ xmlBuildURISafe(const xmlChar *URI, const xmlChar *base, xmlChar **valPtr) {
          (ref->port != PORT_EMPTY)) {
 	if (ref->authority != NULL) {
 	    res->authority = xmlMemStrdup(ref->authority);
-            if (res->authority == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1773]) {
+              if ((res -> authority == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1773\n");
+              else
+                fprintf(stderr, "reached bug index 1773\n");
+            }
+            if ((!FIXREVERTER[1773] && (res -> authority == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto done;
+                #ifdef FRCOV
+                }
+                #endif
         } else {
             if (ref->server != NULL) {
                 res->server = xmlMemStrdup(ref->server);
-                if (res->server == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1774]) {
+                  if ((res -> server == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1774\n");
+                  else
+                    fprintf(stderr, "reached bug index 1774\n");
+                }
+                if ((!FIXREVERTER[1774] && (res -> server == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto done;
+                    #ifdef FRCOV
+                    }
+                    #endif
             }
 	    if (ref->user != NULL) {
 		res->user = xmlMemStrdup(ref->user);
-                if (res->user == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1775]) {
+                  if ((res -> user == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1775\n");
+                  else
+                    fprintf(stderr, "reached bug index 1775\n");
+                }
+                if ((!FIXREVERTER[1775] && (res -> user == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto done;
+                    #ifdef FRCOV
+                    }
+                    #endif
             }
             res->port = ref->port;
 	}
 	if (ref->path != NULL) {
 	    res->path = xmlMemStrdup(ref->path);
-            if (res->path == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1776]) {
+              if ((res -> path == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1776\n");
+              else
+                fprintf(stderr, "reached bug index 1776\n");
+            }
+            if ((!FIXREVERTER[1776] && (res -> path == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto done;
+                #ifdef FRCOV
+                }
+                #endif
         }
 	goto step_7;
     }
     if (bas->authority != NULL) {
 	res->authority = xmlMemStrdup(bas->authority);
-        if (res->authority == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1777]) {
+          if ((res -> authority == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1777\n");
+          else
+            fprintf(stderr, "reached bug index 1777\n");
+        }
+        if ((!FIXREVERTER[1777] && (res -> authority == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto done;
+            #ifdef FRCOV
+            }
+            #endif
     } else if ((bas->server != NULL) || (bas->port != PORT_EMPTY)) {
 	if (bas->server != NULL) {
 	    res->server = xmlMemStrdup(bas->server);
-            if (res->server == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1778]) {
+              if ((res -> server == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1778\n");
+              else
+                fprintf(stderr, "reached bug index 1778\n");
+            }
+            if ((!FIXREVERTER[1778] && (res -> server == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto done;
+                #ifdef FRCOV
+                }
+                #endif
         }
 	if (bas->user != NULL) {
 	    res->user = xmlMemStrdup(bas->user);
-            if (res->user == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1779]) {
+              if ((res -> user == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1779\n");
+              else
+                fprintf(stderr, "reached bug index 1779\n");
+            }
+            if ((!FIXREVERTER[1779] && (res -> user == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto done;
+                #ifdef FRCOV
+                }
+                #endif
         }
 	res->port = bas->port;
     }
@@ -2238,8 +3397,23 @@ xmlBuildURISafe(const xmlChar *URI, const xmlChar *base, xmlChar **valPtr) {
      */
     if ((ref->path != NULL) && (ref->path[0] == '/')) {
 	res->path = xmlMemStrdup(ref->path);
-        if (res->path == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1780]) {
+          if ((res -> path == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1780\n");
+          else
+            fprintf(stderr, "reached bug index 1780\n");
+        }
+        if ((!FIXREVERTER[1780] && (res -> path == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto done;
+            #ifdef FRCOV
+            }
+            #endif
 	goto step_7;
     }
 
@@ -2258,8 +3432,23 @@ xmlBuildURISafe(const xmlChar *URI, const xmlChar *base, xmlChar **valPtr) {
     if (bas->path != NULL)
 	len += strlen(bas->path);
     res->path = (char *) xmlMallocAtomic(len);
-    if (res->path == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1781]) {
+      if ((res -> path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1781\n");
+      else
+        fprintf(stderr, "reached bug index 1781\n");
+    }
+    if ((!FIXREVERTER[1781] && (res -> path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto done;
+	#ifdef FRCOV
+	}
+	#endif
     res->path[0] = 0;
 
     /*
@@ -2664,8 +3853,23 @@ xmlCanonicPath(const xmlChar *path)
 {
     xmlChar *ret;
 
-    if (path == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1801]) {
+      if ((path == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1801\n");
+      else
+        fprintf(stderr, "reached bug index 1801\n");
+    }
+    if ((!FIXREVERTER[1801] && (path == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     /* Check if this is an "absolute uri" */
     if (xmlStrstr(path, BAD_CAST "://") != NULL) {
diff --git a/valid.c b/valid.c
index 1b711e64..81da67ac 100644
--- a/valid.c
+++ b/valid.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * valid.c : part of the code use to do the DTD handling and the validity
  *           checking
@@ -74,8 +78,23 @@ xmlDoErrValid(xmlValidCtxtPtr ctxt, xmlNodePtr node,
     xmlParserCtxtPtr pctxt = NULL;
     va_list ap;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4559]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4559\n");
+      else
+        fprintf(stderr, "reached bug index 4559\n");
+    }
+    if ((!FIXREVERTER[4559] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->flags & XML_VCTXT_USE_PCTXT)
         pctxt = ctxt->userData;
 
@@ -379,20 +398,50 @@ nodeVPush(xmlValidCtxtPtr ctxt, xmlNodePtr value)
         ctxt->nodeTab =
             (xmlNodePtr *) xmlMalloc(ctxt->nodeMax *
                                      sizeof(ctxt->nodeTab[0]));
-        if (ctxt->nodeTab == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4563]) {
+          if ((ctxt -> nodeTab == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4563\n");
+          else
+            fprintf(stderr, "reached bug index 4563\n");
+        }
+        if ((!FIXREVERTER[4563] && (ctxt -> nodeTab == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlVErrMemory(ctxt);
             ctxt->nodeMax = 0;
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     if (ctxt->nodeNr >= ctxt->nodeMax) {
         xmlNodePtr *tmp;
         tmp = (xmlNodePtr *) xmlRealloc(ctxt->nodeTab,
 			      ctxt->nodeMax * 2 * sizeof(ctxt->nodeTab[0]));
-        if (tmp == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4564]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4564\n");
+          else
+            fprintf(stderr, "reached bug index 4564\n");
+        }
+        if ((!FIXREVERTER[4564] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlVErrMemory(ctxt);
             return (0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         ctxt->nodeMax *= 2;
 	ctxt->nodeTab = tmp;
     }
@@ -405,8 +454,23 @@ nodeVPop(xmlValidCtxtPtr ctxt)
 {
     xmlNodePtr ret;
 
-    if (ctxt->nodeNr <= 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4565]) {
+      if ((ctxt -> nodeNr <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4565\n");
+      else
+        fprintf(stderr, "reached bug index 4565\n");
+    }
+    if ((!FIXREVERTER[4565] && (ctxt -> nodeNr <= 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->nodeNr--;
     if (ctxt->nodeNr > 0)
         ctxt->node = ctxt->nodeTab[ctxt->nodeNr - 1];
@@ -447,12 +511,27 @@ static int
 xmlValidBuildAContentModel(xmlElementContentPtr content,
 		           xmlValidCtxtPtr ctxt,
 		           const xmlChar *name) {
-    if (content == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4566]) {
+      if ((content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4566\n");
+      else
+        fprintf(stderr, "reached bug index 4566\n");
+    }
+    if ((!FIXREVERTER[4566] && (content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrValidNode(ctxt, NULL, XML_ERR_INTERNAL_ERROR,
 			"Found NULL content in content model of %s\n",
 			name, NULL, NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     switch (content->type) {
 	case XML_ELEMENT_CONTENT_PCDATA:
 	    xmlErrValidNode(ctxt, NULL, XML_ERR_INTERNAL_ERROR,
@@ -466,10 +545,25 @@ xmlValidBuildAContentModel(xmlElementContentPtr content,
 	    xmlChar *fullname;
 
 	    fullname = xmlBuildQName(content->name, content->prefix, fn, 50);
-	    if (fullname == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4567]) {
+	      if ((fullname == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4567\n");
+	      else
+	        fprintf(stderr, "reached bug index 4567\n");
+	    }
+	    if ((!FIXREVERTER[4567] && (fullname == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 	        xmlVErrMemory(ctxt);
 		return(0);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	    switch (content->ocur) {
 		case XML_ELEMENT_CONTENT_ONCE:
@@ -607,8 +701,23 @@ int
 xmlValidBuildContentModel(xmlValidCtxtPtr ctxt, xmlElementPtr elem) {
     int ret = 0;
 
-    if ((ctxt == NULL) || (elem == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4568]) {
+      if ((ctxt == (void *) 0 || elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4568\n");
+      else
+        fprintf(stderr, "reached bug index 4568\n");
+    }
+    if ((!FIXREVERTER[4568] && (ctxt == (void *) 0 || elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     if (elem->type != XML_ELEMENT_DECL)
 	return(0);
     if (elem->etype != XML_ELEMENT_TYPE_ELEMENT)
@@ -623,19 +732,49 @@ xmlValidBuildContentModel(xmlValidCtxtPtr ctxt, xmlElementPtr elem) {
     }
 
     ctxt->am = xmlNewAutomata();
-    if (ctxt->am == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4569]) {
+      if ((ctxt -> am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4569\n");
+      else
+        fprintf(stderr, "reached bug index 4569\n");
+    }
+    if ((!FIXREVERTER[4569] && (ctxt -> am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlVErrMemory(ctxt);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->state = xmlAutomataGetInitState(ctxt->am);
     if (xmlValidBuildAContentModel(elem->content, ctxt, elem->name) == 0)
         goto done;
     xmlAutomataSetFinalState(ctxt->am, ctxt->state);
     elem->contModel = xmlAutomataCompile(ctxt->am);
-    if (elem->contModel == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4570]) {
+      if ((elem -> contModel == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4570\n");
+      else
+        fprintf(stderr, "reached bug index 4570\n");
+    }
+    if ((!FIXREVERTER[4570] && (elem -> contModel == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlVErrMemory(ctxt);
         goto done;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlRegexpIsDeterminist(elem->contModel) != 1) {
 	char expr[5000];
 	expr[0] = 0;
@@ -718,8 +857,23 @@ xmlNewDocElementContent(xmlDocPtr doc, const xmlChar *name,
     xmlElementContentPtr ret;
     xmlDictPtr dict = NULL;
 
-    if (doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4572]) {
+      if ((doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4572\n");
+      else
+        fprintf(stderr, "reached bug index 4572\n");
+    }
+    if ((!FIXREVERTER[4572] && (doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     switch(type) {
 	case XML_ELEMENT_CONTENT_ELEMENT:
@@ -745,8 +899,23 @@ xmlNewDocElementContent(xmlDocPtr doc, const xmlChar *name,
 	    return(NULL);
     }
     ret = (xmlElementContentPtr) xmlMalloc(sizeof(xmlElementContent));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4573]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4573\n");
+      else
+        fprintf(stderr, "reached bug index 4573\n");
+    }
+    if ((!FIXREVERTER[4573] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(ret, 0, sizeof(xmlElementContent));
     ret->type = type;
     ret->ocur = XML_ELEMENT_CONTENT_ONCE;
@@ -768,11 +937,41 @@ xmlNewDocElementContent(xmlDocPtr doc, const xmlChar *name,
 	        ret->prefix = xmlDictLookup(dict, name, l);
 		ret->name = xmlDictLookup(dict, tmp, -1);
 	    }
-            if (ret->prefix == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[4574]) {
+              if ((ret -> prefix == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 4574\n");
+              else
+                fprintf(stderr, "reached bug index 4574\n");
+            }
+            if ((!FIXREVERTER[4574] && (ret -> prefix == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto error;
+                #ifdef FRCOV
+                }
+                #endif
 	}
-        if (ret->name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4575]) {
+          if ((ret -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4575\n");
+          else
+            fprintf(stderr, "reached bug index 4575\n");
+        }
+        if ((!FIXREVERTER[4575] && (ret -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     return(ret);
 
@@ -810,14 +1009,59 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
     xmlElementContentPtr ret = NULL, prev = NULL, tmp;
     xmlDictPtr dict = NULL;
 
-    if (cur == NULL) return(NULL);
-
-    if (doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4576]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4576\n");
+      else
+        fprintf(stderr, "reached bug index 4576\n");
+    }
+    if ((!FIXREVERTER[4576] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4577]) {
+      if ((doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4577\n");
+      else
+        fprintf(stderr, "reached bug index 4577\n");
+    }
+    if ((!FIXREVERTER[4577] && (doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlElementContentPtr) xmlMalloc(sizeof(xmlElementContent));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4578]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4578\n");
+      else
+        fprintf(stderr, "reached bug index 4578\n");
+    }
+    if ((!FIXREVERTER[4578] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(ret, 0, sizeof(xmlElementContent));
     ret->type = cur->type;
     ret->ocur = cur->ocur;
@@ -826,8 +1070,23 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
 	    ret->name = xmlDictLookup(dict, cur->name, -1);
 	else
 	    ret->name = xmlStrdup(cur->name);
-        if (ret->name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4579]) {
+          if ((ret -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4579\n");
+          else
+            fprintf(stderr, "reached bug index 4579\n");
+        }
+        if ((!FIXREVERTER[4579] && (ret -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     if (cur->prefix != NULL) {
@@ -835,13 +1094,43 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
 	    ret->prefix = xmlDictLookup(dict, cur->prefix, -1);
 	else
 	    ret->prefix = xmlStrdup(cur->prefix);
-        if (ret->prefix == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4580]) {
+          if ((ret -> prefix == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4580\n");
+          else
+            fprintf(stderr, "reached bug index 4580\n");
+        }
+        if ((!FIXREVERTER[4580] && (ret -> prefix == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (cur->c1 != NULL) {
         ret->c1 = xmlCopyDocElementContent(doc, cur->c1);
-        if (ret->c1 == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4581]) {
+          if ((ret -> c1 == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4581\n");
+          else
+            fprintf(stderr, "reached bug index 4581\n");
+        }
+        if ((!FIXREVERTER[4581] && (ret -> c1 == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
 	ret->c1->parent = ret;
     }
     if (cur->c2 != NULL) {
@@ -849,8 +1138,23 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
 	cur = cur->c2;
 	while (cur != NULL) {
 	    tmp = (xmlElementContentPtr) xmlMalloc(sizeof(xmlElementContent));
-	    if (tmp == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4582]) {
+	      if ((tmp == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4582\n");
+	      else
+	        fprintf(stderr, "reached bug index 4582\n");
+	    }
+	    if ((!FIXREVERTER[4582] && (tmp == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
                 goto error;
+                #ifdef FRCOV
+                }
+                #endif
 	    memset(tmp, 0, sizeof(xmlElementContent));
 	    tmp->type = cur->type;
 	    tmp->ocur = cur->ocur;
@@ -861,8 +1165,23 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
 		    tmp->name = xmlDictLookup(dict, cur->name, -1);
 		else
 		    tmp->name = xmlStrdup(cur->name);
-                if (tmp->name == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[4583]) {
+                  if ((tmp -> name == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 4583\n");
+                  else
+                    fprintf(stderr, "reached bug index 4583\n");
+                }
+                if ((!FIXREVERTER[4583] && (tmp -> name == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto error;
+                    #ifdef FRCOV
+                    }
+                    #endif
 	    }
 
 	    if (cur->prefix != NULL) {
@@ -870,13 +1189,43 @@ xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
 		    tmp->prefix = xmlDictLookup(dict, cur->prefix, -1);
 		else
 		    tmp->prefix = xmlStrdup(cur->prefix);
-                if (tmp->prefix == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[4584]) {
+                  if ((tmp -> prefix == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 4584\n");
+                  else
+                    fprintf(stderr, "reached bug index 4584\n");
+                }
+                if ((!FIXREVERTER[4584] && (tmp -> prefix == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto error;
+                    #ifdef FRCOV
+                    }
+                    #endif
 	    }
 	    if (cur->c1 != NULL) {
 	        tmp->c1 = xmlCopyDocElementContent(doc,cur->c1);
-	        if (tmp->c1 == NULL)
+	        
+	        #ifdef FRCOV
+	        {if (FIXREVERTER[4585]) {
+	          if ((tmp -> c1 == (void *) 0 ) && !(0))
+	            fprintf(stderr, "triggered bug index 4585\n");
+	          else
+	            fprintf(stderr, "reached bug index 4585\n");
+	        }
+	        if ((!FIXREVERTER[4585] && (tmp -> c1 == (void *) 0 ))
+	        #else
+	        if (0
+	        #endif
+	        )
                     goto error;
+                    #ifdef FRCOV
+                    }
+                    #endif
 		tmp->c1->parent = tmp;
             }
 	    prev = tmp;
@@ -916,10 +1265,40 @@ xmlFreeDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
     xmlDictPtr dict = NULL;
     size_t depth = 0;
 
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4586]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4586\n");
+      else
+        fprintf(stderr, "reached bug index 4586\n");
+    }
+    if ((!FIXREVERTER[4586] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
-    if (doc != NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4587]) {
+      if ((doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4587\n");
+      else
+        fprintf(stderr, "reached bug index 4587\n");
+    }
+    if ((!FIXREVERTER[4587] && (doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     while (1) {
         xmlElementContentPtr parent;
@@ -951,10 +1330,25 @@ xmlFreeDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
 	    if (cur->prefix != NULL) xmlFree((xmlChar *) cur->prefix);
 	}
         parent = cur->parent;
-        if ((depth == 0) || (parent == NULL)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4588]) {
+          if ((parent == (void *) 0 ) && !(depth == 0 ))
+            fprintf(stderr, "triggered bug index 4588\n");
+          else
+            fprintf(stderr, "reached bug index 4588\n");
+        }
+        if ((FIXREVERTER[4588] && (depth == 0 )) || (!FIXREVERTER[4588] && (depth == 0 || parent == (void *) 0 ))
+        #else
+        if (depth == 0 
+        #endif
+        ) {
             xmlFree(cur);
             break;
         }
+        #ifdef FRCOV
+        }
+        #endif
         if (cur == parent->c1)
             parent->c1 = NULL;
         else
@@ -1012,13 +1406,43 @@ void
 xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int englob) {
     int len;
 
-    if (content == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4589]) {
+      if ((content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4589\n");
+      else
+        fprintf(stderr, "reached bug index 4589\n");
+    }
+    if ((!FIXREVERTER[4589] && (content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     len = strlen(buf);
-    if (size - len < 50) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4590]) {
+      if ((size - len < 50 ) && !(0))
+        fprintf(stderr, "triggered bug index 4590\n");
+      else
+        fprintf(stderr, "reached bug index 4590\n");
+    }
+    if ((!FIXREVERTER[4590] && (size - len < 50 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if ((size - len > 4) && (buf[len - 1] != '.'))
 	    strcat(buf, " ...");
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (englob) strcat(buf, "(");
     switch (content->type) {
         case XML_ELEMENT_CONTENT_PCDATA:
@@ -1029,10 +1453,25 @@ xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int
 
 	    if (content->prefix != NULL)
                 qnameLen += xmlStrlen(content->prefix) + 1;
-	    if (size - len < qnameLen + 10) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4591]) {
+	      if ((size - len < qnameLen + 10 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4591\n");
+	      else
+	        fprintf(stderr, "reached bug index 4591\n");
+	    }
+	    if ((!FIXREVERTER[4591] && (size - len < qnameLen + 10 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		strcat(buf, " ...");
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (content->prefix != NULL) {
 		strcat(buf, (char *) content->prefix);
 		strcat(buf, ":");
@@ -1048,11 +1487,26 @@ xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int
 	    else
 		xmlSnprintfElementContent(buf, size, content->c1, 0);
 	    len = strlen(buf);
-	    if (size - len < 50) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4592]) {
+	      if ((size - len < 50 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4592\n");
+	      else
+	        fprintf(stderr, "reached bug index 4592\n");
+	    }
+	    if ((!FIXREVERTER[4592] && (size - len < 50 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if ((size - len > 4) && (buf[len - 1] != '.'))
 		    strcat(buf, " ...");
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
             strcat(buf, " , ");
 	    if (((content->c2->type == XML_ELEMENT_CONTENT_OR) ||
 		 (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE)) &&
@@ -1068,11 +1522,26 @@ xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int
 	    else
 		xmlSnprintfElementContent(buf, size, content->c1, 0);
 	    len = strlen(buf);
-	    if (size - len < 50) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4593]) {
+	      if ((size - len < 50 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4593\n");
+	      else
+	        fprintf(stderr, "reached bug index 4593\n");
+	    }
+	    if ((!FIXREVERTER[4593] && (size - len < 50 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if ((size - len > 4) && (buf[len - 1] != '.'))
 		    strcat(buf, " ...");
 		return;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
             strcat(buf, " | ");
 	    if (((content->c2->type == XML_ELEMENT_CONTENT_SEQ) ||
 		 (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE)) &&
@@ -1114,7 +1583,22 @@ xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int
  */
 static void
 xmlFreeElement(xmlElementPtr elem) {
-    if (elem == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4595]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4595\n");
+      else
+        fprintf(stderr, "reached bug index 4595\n");
+    }
+    if ((!FIXREVERTER[4595] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     xmlUnlinkNode((xmlNodePtr) elem);
     xmlFreeDocElementContent(elem->doc, elem->content);
     if (elem->name != NULL)
@@ -1152,12 +1636,42 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
     const xmlChar *localName;
     xmlChar *prefix = NULL;
 
-    if (dtd == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4596]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4596\n");
+      else
+        fprintf(stderr, "reached bug index 4596\n");
+    }
+    if ((!FIXREVERTER[4596] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
-    if (name == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4597]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4597\n");
+      else
+        fprintf(stderr, "reached bug index 4597\n");
+    }
+    if ((!FIXREVERTER[4597] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     switch (type) {
         case XML_ELEMENT_TYPE_EMPTY:
@@ -1177,20 +1691,50 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
 	    }
 	    break;
 	case XML_ELEMENT_TYPE_MIXED:
-	    if (content == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4598]) {
+	      if ((content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4598\n");
+	      else
+	        fprintf(stderr, "reached bug index 4598\n");
+	    }
+	    if ((!FIXREVERTER[4598] && (content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrValid(ctxt, XML_DTD_CONTENT_ERROR,
 		        "xmlAddElementDecl: content == NULL for MIXED\n",
 			NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    break;
 	case XML_ELEMENT_TYPE_ELEMENT:
-	    if (content == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4599]) {
+	      if ((content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4599\n");
+	      else
+	        fprintf(stderr, "reached bug index 4599\n");
+	    }
+	    if ((!FIXREVERTER[4599] && (content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlErrValid(ctxt, XML_DTD_CONTENT_ERROR,
 		        "xmlAddElementDecl: content == NULL for ELEMENT\n",
 			NULL);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    break;
 	default:
 	    xmlErrValid(ctxt, XML_ERR_ARGUMENT,
@@ -1202,8 +1746,23 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
      * check if name is a QName
      */
     localName = xmlSplitQName4(name, &prefix);
-    if (localName == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4600]) {
+      if ((localName == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4600\n");
+      else
+        fprintf(stderr, "reached bug index 4600\n");
+    }
+    if ((!FIXREVERTER[4600] && (localName == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Create the Element table if needed.
@@ -1212,11 +1771,41 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
     if (table == NULL) {
 	xmlDictPtr dict = NULL;
 
-	if (dtd->doc != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4601]) {
+	  if ((dtd -> doc != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4601\n");
+	  else
+	    fprintf(stderr, "reached bug index 4601\n");
+	}
+	if ((!FIXREVERTER[4601] && (dtd -> doc != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    dict = dtd->doc->dict;
+	    #ifdef FRCOV
+	    }
+	    #endif
         table = xmlHashCreateDict(0, dict);
-        if (table == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4602]) {
+          if ((table == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4602\n");
+          else
+            fprintf(stderr, "reached bug index 4602\n");
+        }
+        if ((!FIXREVERTER[4602] && (table == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
 	dtd->elements = (void *) table;
     }
 
@@ -1262,8 +1851,23 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
         int res;
 
 	ret = (xmlElementPtr) xmlMalloc(sizeof(xmlElement));
-	if (ret == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4603]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4603\n");
+	  else
+	    fprintf(stderr, "reached bug index 4603\n");
+	}
+	if ((!FIXREVERTER[4603] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
             goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
 	memset(ret, 0, sizeof(xmlElement));
 	ret->type = XML_ELEMENT_DECL;
 
@@ -1271,10 +1875,25 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
 	 * fill the structure.
 	 */
 	ret->name = xmlStrdup(localName);
-	if (ret->name == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4604]) {
+	  if ((ret -> name == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4604\n");
+	  else
+	    fprintf(stderr, "reached bug index 4604\n");
+	}
+	if ((!FIXREVERTER[4604] && (ret -> name == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFree(ret);
 	    goto mem_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ret->prefix = prefix;
         prefix = NULL;
 
@@ -1309,8 +1928,23 @@ xmlAddElementDecl(xmlValidCtxtPtr ctxt,
             content->parent = (xmlElementContentPtr) 1;
         } else if (content != NULL){
             ret->content = xmlCopyDocElementContent(dtd->doc, content);
-            if (ret->content == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[4606]) {
+              if ((ret -> content == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 4606\n");
+              else
+                fprintf(stderr, "reached bug index 4606\n");
+            }
+            if ((!FIXREVERTER[4606] && (ret -> content == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto mem_error;
+                #ifdef FRCOV
+                }
+                #endif
         }
     }
 
@@ -1368,25 +2002,85 @@ xmlCopyElement(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlElementPtr cur;
 
     cur = (xmlElementPtr) xmlMalloc(sizeof(xmlElement));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4607]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4607\n");
+      else
+        fprintf(stderr, "reached bug index 4607\n");
+    }
+    if ((!FIXREVERTER[4607] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlElement));
     cur->type = XML_ELEMENT_DECL;
     cur->etype = elem->etype;
     if (elem->name != NULL) {
 	cur->name = xmlStrdup(elem->name);
-        if (cur->name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4608]) {
+          if ((cur -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4608\n");
+          else
+            fprintf(stderr, "reached bug index 4608\n");
+        }
+        if ((!FIXREVERTER[4608] && (cur -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (elem->prefix != NULL) {
 	cur->prefix = xmlStrdup(elem->prefix);
-        if (cur->prefix == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4609]) {
+          if ((cur -> prefix == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4609\n");
+          else
+            fprintf(stderr, "reached bug index 4609\n");
+        }
+        if ((!FIXREVERTER[4609] && (cur -> prefix == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (elem->content != NULL) {
         cur->content = xmlCopyElementContent(elem->content);
-        if (cur->content == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4610]) {
+          if ((cur -> content == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4610\n");
+          else
+            fprintf(stderr, "reached bug index 4610\n");
+        }
+        if ((!FIXREVERTER[4610] && (cur -> content == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     /* TODO : rebuild the attribute list on the copy */
     cur->attributes = NULL;
@@ -1486,16 +2180,46 @@ xmlCreateEnumeration(const xmlChar *name) {
     xmlEnumerationPtr ret;
 
     ret = (xmlEnumerationPtr) xmlMalloc(sizeof(xmlEnumeration));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4613]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4613\n");
+      else
+        fprintf(stderr, "reached bug index 4613\n");
+    }
+    if ((!FIXREVERTER[4613] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     memset(ret, 0, sizeof(xmlEnumeration));
 
     if (name != NULL) {
         ret->name = xmlStrdup(name);
-        if (ret->name == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4614]) {
+          if ((ret -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4614\n");
+          else
+            fprintf(stderr, "reached bug index 4614\n");
+        }
+        if ((!FIXREVERTER[4614] && (ret -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFree(ret);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
 
     return(ret);
@@ -1537,10 +2261,25 @@ xmlCopyEnumeration(xmlEnumerationPtr cur) {
     while (cur != NULL) {
         xmlEnumerationPtr copy = xmlCreateEnumeration(cur->name);
 
-        if (copy == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4615]) {
+          if ((copy == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4615\n");
+          else
+            fprintf(stderr, "reached bug index 4615\n");
+        }
+        if ((!FIXREVERTER[4615] && (copy == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFreeEnumeration(ret);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         if (ret == NULL) {
             ret = last = copy;
@@ -1573,7 +2312,22 @@ xmlScanIDAttributeDecl(xmlValidCtxtPtr ctxt, xmlElementPtr elem, int err) {
     xmlAttributePtr cur;
     int ret = 0;
 
-    if (elem == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4616]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4616\n");
+      else
+        fprintf(stderr, "reached bug index 4616\n");
+    }
+    if ((!FIXREVERTER[4616] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = elem->attributes;
     while (cur != NULL) {
         if (cur->atype == XML_ATTRIBUTE_ID) {
@@ -1599,7 +2353,22 @@ static void
 xmlFreeAttribute(xmlAttributePtr attr) {
     xmlDictPtr dict;
 
-    if (attr == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4617]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4617\n");
+      else
+        fprintf(stderr, "reached bug index 4617\n");
+    }
+    if ((!FIXREVERTER[4617] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (attr->doc != NULL)
 	dict = attr->doc->dict;
     else
@@ -1660,20 +2429,80 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
     xmlDictPtr dict = NULL;
     int res;
 
-    if (dtd == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4618]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4618\n");
+      else
+        fprintf(stderr, "reached bug index 4618\n");
+    }
+    if ((!FIXREVERTER[4618] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeEnumeration(tree);
 	return(NULL);
     }
-    if (name == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4619]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4619\n");
+      else
+        fprintf(stderr, "reached bug index 4619\n");
+    }
+    if ((!FIXREVERTER[4619] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeEnumeration(tree);
 	return(NULL);
     }
-    if (elem == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4620]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4620\n");
+      else
+        fprintf(stderr, "reached bug index 4620\n");
+    }
+    if ((!FIXREVERTER[4620] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeEnumeration(tree);
 	return(NULL);
     }
-    if (dtd->doc != NULL)
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4621]) {
+      if ((dtd -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4621\n");
+      else
+        fprintf(stderr, "reached bug index 4621\n");
+    }
+    if ((!FIXREVERTER[4621] && (dtd -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	dict = dtd->doc->dict;
+	#ifdef FRCOV
+	}
+	#endif
 
 #ifdef LIBXML_VALID_ENABLED
     /*
@@ -1712,8 +2541,23 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
 	                "Attribute %s of %s: invalid default value\n",
 	                elem, name, defaultValue);
 	defaultValue = NULL;
-	if (ctxt != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4622]) {
+	  if ((ctxt != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 4622\n");
+	  else
+	    fprintf(stderr, "reached bug index 4622\n");
+	}
+	if ((!FIXREVERTER[4622] && (ctxt != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    ctxt->valid = 0;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 #endif /* LIBXML_VALID_ENABLED */
 
@@ -1739,12 +2583,42 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
         table = xmlHashCreateDict(0, dict);
 	dtd->attributes = (void *) table;
     }
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4623]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4623\n");
+      else
+        fprintf(stderr, "reached bug index 4623\n");
+    }
+    if ((!FIXREVERTER[4623] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlAttributePtr) xmlMalloc(sizeof(xmlAttribute));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4624]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4624\n");
+      else
+        fprintf(stderr, "reached bug index 4624\n");
+    }
+    if ((!FIXREVERTER[4624] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
     memset(ret, 0, sizeof(xmlAttribute));
     ret->type = XML_ATTRIBUTE_DECL;
 
@@ -1765,15 +2639,45 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
 	ret->name = xmlStrdup(name);
 	ret->elem = xmlStrdup(elem);
     }
-    if ((ret->name == NULL) || (ret->elem == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4625]) {
+      if ((ret -> name == (void *) 0 || ret -> elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4625\n");
+      else
+        fprintf(stderr, "reached bug index 4625\n");
+    }
+    if ((!FIXREVERTER[4625] && (ret -> name == (void *) 0 || ret -> elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
     if (ns != NULL) {
         if (dict)
             ret->prefix = xmlDictLookup(dict, ns, -1);
         else
             ret->prefix = xmlStrdup(ns);
-        if (ret->prefix == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4626]) {
+          if ((ret -> prefix == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4626\n");
+          else
+            fprintf(stderr, "reached bug index 4626\n");
+        }
+        if ((!FIXREVERTER[4626] && (ret -> prefix == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     ret->def = def;
     ret->tree = tree;
@@ -1783,13 +2687,43 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
 	    ret->defaultValue = xmlDictLookup(dict, defaultValue, -1);
 	else
 	    ret->defaultValue = xmlStrdup(defaultValue);
-        if (ret->defaultValue == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4627]) {
+          if ((ret -> defaultValue == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4627\n");
+          else
+            fprintf(stderr, "reached bug index 4627\n");
+        }
+        if ((!FIXREVERTER[4627] && (ret -> defaultValue == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     elemDef = xmlGetDtdElementDesc2(ctxt, dtd, elem);
-    if (elemDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4628]) {
+      if ((elemDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4628\n");
+      else
+        fprintf(stderr, "reached bug index 4628\n");
+    }
+    if ((!FIXREVERTER[4628] && (elemDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * Validity Check:
@@ -1822,8 +2756,23 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
         xmlErrValidNode(ctxt, (xmlNodePtr) dtd, XML_DTD_MULTIPLE_ID,
        "Element %s has too may ID attributes defined : %s\n",
                elem, name, NULL);
-        if (ctxt != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4630]) {
+          if ((ctxt != (void *) 0  ) && !(0))
+            fprintf(stderr, "triggered bug index 4630\n");
+          else
+            fprintf(stderr, "reached bug index 4630\n");
+        }
+        if ((!FIXREVERTER[4630] && (ctxt != (void *) 0  ))
+        #else
+        if (0
+        #endif
+        )
             ctxt->valid = 0;
+            #ifdef FRCOV
+            }
+            #endif
     }
 #endif /* LIBXML_VALID_ENABLED */
 
@@ -1843,8 +2792,23 @@ xmlAddAttributeDecl(xmlValidCtxtPtr ctxt,
                ((xmlStrEqual(tmp->name, BAD_CAST "xmlns")) ||
                 ((ret->prefix != NULL &&
                  (xmlStrEqual(ret->prefix, BAD_CAST "xmlns")))))) {
-            if (tmp->nexth == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[4631]) {
+              if ((tmp -> nexth == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 4631\n");
+              else
+                fprintf(stderr, "reached bug index 4631\n");
+            }
+            if ((!FIXREVERTER[4631] && (tmp -> nexth == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
             tmp = tmp->nexth;
         }
         if (tmp != NULL) {
@@ -1907,36 +2871,126 @@ xmlCopyAttribute(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlAttributePtr cur;
 
     cur = (xmlAttributePtr) xmlMalloc(sizeof(xmlAttribute));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4632]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4632\n");
+      else
+        fprintf(stderr, "reached bug index 4632\n");
+    }
+    if ((!FIXREVERTER[4632] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(xmlAttribute));
     cur->type = XML_ATTRIBUTE_DECL;
     cur->atype = attr->atype;
     cur->def = attr->def;
     if (attr->tree != NULL) {
         cur->tree = xmlCopyEnumeration(attr->tree);
-        if (cur->tree == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4633]) {
+          if ((cur -> tree == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4633\n");
+          else
+            fprintf(stderr, "reached bug index 4633\n");
+        }
+        if ((!FIXREVERTER[4633] && (cur -> tree == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (attr->elem != NULL) {
 	cur->elem = xmlStrdup(attr->elem);
-        if (cur->elem == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4634]) {
+          if ((cur -> elem == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4634\n");
+          else
+            fprintf(stderr, "reached bug index 4634\n");
+        }
+        if ((!FIXREVERTER[4634] && (cur -> elem == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (attr->name != NULL) {
 	cur->name = xmlStrdup(attr->name);
-        if (cur->name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4635]) {
+          if ((cur -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4635\n");
+          else
+            fprintf(stderr, "reached bug index 4635\n");
+        }
+        if ((!FIXREVERTER[4635] && (cur -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (attr->prefix != NULL) {
 	cur->prefix = xmlStrdup(attr->prefix);
-        if (cur->prefix == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4636]) {
+          if ((cur -> prefix == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4636\n");
+          else
+            fprintf(stderr, "reached bug index 4636\n");
+        }
+        if ((!FIXREVERTER[4636] && (cur -> prefix == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (attr->defaultValue != NULL) {
 	cur->defaultValue = xmlStrdup(attr->defaultValue);
-        if (cur->defaultValue == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4637]) {
+          if ((cur -> defaultValue == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4637\n");
+          else
+            fprintf(stderr, "reached bug index 4637\n");
+        }
+        if ((!FIXREVERTER[4637] && (cur -> defaultValue == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     return(cur);
 
@@ -2033,7 +3087,22 @@ xmlDumpAttributeTable(xmlBufferPtr buf, xmlAttributeTablePtr table) {
  */
 static void
 xmlFreeNotation(xmlNotationPtr nota) {
-    if (nota == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4640]) {
+      if ((nota == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4640\n");
+      else
+        fprintf(stderr, "reached bug index 4640\n");
+    }
+    if ((!FIXREVERTER[4640] && (nota == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (nota->name != NULL)
 	xmlFree((xmlChar *) nota->name);
     if (nota->PublicID != NULL)
@@ -2064,12 +3133,42 @@ xmlAddNotationDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd,
     xmlNotationTablePtr table;
     int res;
 
-    if (dtd == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4641]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4641\n");
+      else
+        fprintf(stderr, "reached bug index 4641\n");
+    }
+    if ((!FIXREVERTER[4641] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
-    if (name == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4642]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4642\n");
+      else
+        fprintf(stderr, "reached bug index 4642\n");
+    }
+    if ((!FIXREVERTER[4642] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((PublicID == NULL) && (SystemID == NULL)) {
 	return(NULL);
     }
@@ -2080,34 +3179,124 @@ xmlAddNotationDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd,
     table = (xmlNotationTablePtr) dtd->notations;
     if (table == NULL) {
 	xmlDictPtr dict = NULL;
-	if (dtd->doc != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4643]) {
+	  if ((dtd -> doc != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4643\n");
+	  else
+	    fprintf(stderr, "reached bug index 4643\n");
+	}
+	if ((!FIXREVERTER[4643] && (dtd -> doc != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    dict = dtd->doc->dict;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
         dtd->notations = table = xmlHashCreateDict(0, dict);
-        if (table == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4644]) {
+          if ((table == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4644\n");
+          else
+            fprintf(stderr, "reached bug index 4644\n");
+        }
+        if ((!FIXREVERTER[4644] && (table == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     ret = (xmlNotationPtr) xmlMalloc(sizeof(xmlNotation));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4645]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4645\n");
+      else
+        fprintf(stderr, "reached bug index 4645\n");
+    }
+    if ((!FIXREVERTER[4645] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
     memset(ret, 0, sizeof(xmlNotation));
 
     /*
      * fill the structure.
      */
     ret->name = xmlStrdup(name);
-    if (ret->name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4646]) {
+      if ((ret -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4646\n");
+      else
+        fprintf(stderr, "reached bug index 4646\n");
+    }
+    if ((!FIXREVERTER[4646] && (ret -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
     if (SystemID != NULL) {
         ret->SystemID = xmlStrdup(SystemID);
-        if (ret->SystemID == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4647]) {
+          if ((ret -> SystemID == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4647\n");
+          else
+            fprintf(stderr, "reached bug index 4647\n");
+        }
+        if ((!FIXREVERTER[4647] && (ret -> SystemID == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (PublicID != NULL) {
         ret->PublicID = xmlStrdup(PublicID);
-        if (ret->PublicID == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4648]) {
+          if ((ret -> PublicID == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4648\n");
+          else
+            fprintf(stderr, "reached bug index 4648\n");
+        }
+        if ((!FIXREVERTER[4648] && (ret -> PublicID == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     /*
@@ -2165,23 +3354,83 @@ xmlCopyNotation(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlNotationPtr cur;
 
     cur = (xmlNotationPtr) xmlMalloc(sizeof(xmlNotation));
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4650]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4650\n");
+      else
+        fprintf(stderr, "reached bug index 4650\n");
+    }
+    if ((!FIXREVERTER[4650] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(cur, 0, sizeof(*cur));
     if (nota->name != NULL) {
 	cur->name = xmlStrdup(nota->name);
-        if (cur->name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4651]) {
+          if ((cur -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4651\n");
+          else
+            fprintf(stderr, "reached bug index 4651\n");
+        }
+        if ((!FIXREVERTER[4651] && (cur -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (nota->PublicID != NULL) {
 	cur->PublicID = xmlStrdup(nota->PublicID);
-        if (cur->PublicID == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4652]) {
+          if ((cur -> PublicID == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4652\n");
+          else
+            fprintf(stderr, "reached bug index 4652\n");
+        }
+        if ((!FIXREVERTER[4652] && (cur -> PublicID == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     if (nota->SystemID != NULL) {
 	cur->SystemID = xmlStrdup(nota->SystemID);
-        if (cur->SystemID == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4653]) {
+          if ((cur -> SystemID == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4653\n");
+          else
+            fprintf(stderr, "reached bug index 4653\n");
+        }
+        if ((!FIXREVERTER[4653] && (cur -> SystemID == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     return(cur);
 
@@ -2271,8 +3520,23 @@ static int
 xmlIsStreaming(xmlValidCtxtPtr ctxt) {
     xmlParserCtxtPtr pctxt;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4656]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4656\n");
+      else
+        fprintf(stderr, "reached bug index 4656\n");
+    }
+    if ((!FIXREVERTER[4656] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->flags & XML_VCTXT_USE_PCTXT) == 0)
         return(0);
     pctxt = ctxt->userData;
@@ -2289,10 +3553,40 @@ static void
 xmlFreeID(xmlIDPtr id) {
     xmlDictPtr dict = NULL;
 
-    if (id == NULL) return;
-
-    if (id->doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4657]) {
+      if ((id == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4657\n");
+      else
+        fprintf(stderr, "reached bug index 4657\n");
+    }
+    if ((!FIXREVERTER[4657] && (id == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4658]) {
+      if ((id -> doc != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4658\n");
+      else
+        fprintf(stderr, "reached bug index 4658\n");
+    }
+    if ((!FIXREVERTER[4658] && (id -> doc != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         dict = id->doc->dict;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (id->value != NULL)
 	DICT_FREE(id->value)
@@ -2329,12 +3623,42 @@ xmlAddIDInternal(xmlAttrPtr attr, const xmlChar *value, xmlIDPtr *idPtr) {
         *idPtr = NULL;
     if ((value == NULL) || (value[0] == 0))
 	return(0);
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4659]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4659\n");
+      else
+        fprintf(stderr, "reached bug index 4659\n");
+    }
+    if ((!FIXREVERTER[4659] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     doc = attr->doc;
-    if (doc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4660]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4660\n");
+      else
+        fprintf(stderr, "reached bug index 4660\n");
+    }
+    if ((!FIXREVERTER[4660] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (attr->id != NULL)
         xmlRemoveID(doc, attr);
@@ -2345,8 +3669,23 @@ xmlAddIDInternal(xmlAttrPtr attr, const xmlChar *value, xmlIDPtr *idPtr) {
     table = (xmlIDTablePtr) doc->ids;
     if (table == NULL)  {
         doc->ids = table = xmlHashCreateDict(0, doc->dict);
-        if (table == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4661]) {
+          if ((table == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4661\n");
+          else
+            fprintf(stderr, "reached bug index 4661\n");
+        }
+        if ((!FIXREVERTER[4661] && (table == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(-1);
+            #ifdef FRCOV
+            }
+            #endif
     } else {
         id = xmlHashLookup(table, value);
         if (id != NULL) {
@@ -2360,8 +3699,23 @@ xmlAddIDInternal(xmlAttrPtr attr, const xmlChar *value, xmlIDPtr *idPtr) {
     }
 
     id = (xmlIDPtr) xmlMalloc(sizeof(xmlID));
-    if (id == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4662]) {
+      if ((id == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4662\n");
+      else
+        fprintf(stderr, "reached bug index 4662\n");
+    }
+    if ((!FIXREVERTER[4662] && (id == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     memset(id, 0, sizeof(*id));
 
     /*
@@ -2369,10 +3723,25 @@ xmlAddIDInternal(xmlAttrPtr attr, const xmlChar *value, xmlIDPtr *idPtr) {
      */
     id->doc = doc;
     id->value = xmlStrdup(value);
-    if (id->value == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4663]) {
+      if ((id -> value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4663\n");
+      else
+        fprintf(stderr, "reached bug index 4663\n");
+    }
+    if ((!FIXREVERTER[4663] && (id -> value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFreeID(id);
         return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (xmlHashAddEntry(table, value, id) < 0) {
 	xmlFreeID(id);
@@ -2480,8 +3849,23 @@ xmlFreeIDTable(xmlIDTablePtr table) {
  */
 int
 xmlIsID(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {
-    if ((attr == NULL) || (attr->name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4664]) {
+      if ((attr == (void *) 0 || attr -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4664\n");
+      else
+        fprintf(stderr, "reached bug index 4664\n");
+    }
+    if ((!FIXREVERTER[4664] && (attr == (void *) 0 || attr -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((doc != NULL) && (doc->type == XML_HTML_DOCUMENT_NODE)) {
         if (xmlStrEqual(BAD_CAST "id", attr->name))
@@ -2516,8 +3900,23 @@ xmlIsID(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {
 	fullelemname = (elem->ns != NULL && elem->ns->prefix != NULL) ?
 	    xmlBuildQName(elem->name, elem->ns->prefix, felem, 50) :
 	    (xmlChar *)elem->name;
-        if (fullelemname == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4665]) {
+          if ((fullelemname == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4665\n");
+          else
+            fprintf(stderr, "reached bug index 4665\n");
+        }
+        if ((!FIXREVERTER[4665] && (fullelemname == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(-1);
+            #ifdef FRCOV
+            }
+            #endif
 
         aprefix = (attr->ns != NULL) ? attr->ns->prefix : NULL;
 
@@ -2552,12 +3951,57 @@ int
 xmlRemoveID(xmlDocPtr doc, xmlAttrPtr attr) {
     xmlIDTablePtr table;
 
-    if (doc == NULL) return(-1);
-    if ((attr == NULL) || (attr->id == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4666]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4666\n");
+      else
+        fprintf(stderr, "reached bug index 4666\n");
+    }
+    if ((!FIXREVERTER[4666] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4667]) {
+      if ((attr == (void *) 0 || attr -> id == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4667\n");
+      else
+        fprintf(stderr, "reached bug index 4667\n");
+    }
+    if ((!FIXREVERTER[4667] && (attr == (void *) 0 || attr -> id == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 
     table = (xmlIDTablePtr) doc->ids;
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4668]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4668\n");
+      else
+        fprintf(stderr, "reached bug index 4668\n");
+    }
+    if ((!FIXREVERTER[4668] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (xmlHashRemoveEntry(table, attr->id->value, xmlFreeIDTableEntry) < 0)
         return(-1);
@@ -2579,28 +4023,103 @@ xmlGetID(xmlDocPtr doc, const xmlChar *ID) {
     xmlIDTablePtr table;
     xmlIDPtr id;
 
-    if (doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4669]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4669\n");
+      else
+        fprintf(stderr, "reached bug index 4669\n");
+    }
+    if ((!FIXREVERTER[4669] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
-    if (ID == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4670]) {
+      if ((ID == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4670\n");
+      else
+        fprintf(stderr, "reached bug index 4670\n");
+    }
+    if ((!FIXREVERTER[4670] && (ID == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     table = (xmlIDTablePtr) doc->ids;
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4671]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4671\n");
+      else
+        fprintf(stderr, "reached bug index 4671\n");
+    }
+    if ((!FIXREVERTER[4671] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     id = xmlHashLookup(table, ID);
-    if (id == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4672]) {
+      if ((id == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4672\n");
+      else
+        fprintf(stderr, "reached bug index 4672\n");
+    }
+    if ((!FIXREVERTER[4672] && (id == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (id->attr == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4673]) {
+      if ((id -> attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4673\n");
+      else
+        fprintf(stderr, "reached bug index 4673\n");
+    }
+    if ((!FIXREVERTER[4673] && (id -> attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * We are operating on a stream, return a well known reference
 	 * since the attribute node doesn't exist anymore
 	 */
 	return((xmlAttrPtr) doc);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(id->attr);
 }
 
@@ -2634,7 +4153,22 @@ typedef xmlValidateMemo *xmlValidateMemoPtr;
 static void
 xmlFreeRef(xmlLinkPtr lk) {
     xmlRefPtr ref = (xmlRefPtr)xmlLinkGetData(lk);
-    if (ref == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4674]) {
+      if ((ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4674\n");
+      else
+        fprintf(stderr, "reached bug index 4674\n");
+    }
+    if ((!FIXREVERTER[4674] && (ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (ref->value != NULL)
         xmlFree((xmlChar *)ref->value);
     if (ref->name != NULL)
@@ -2651,7 +4185,22 @@ xmlFreeRef(xmlLinkPtr lk) {
 static void
 xmlFreeRefTableEntry(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlListPtr list_ref = (xmlListPtr) payload;
-    if (list_ref == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4675]) {
+      if ((list_ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4675\n");
+      else
+        fprintf(stderr, "reached bug index 4675\n");
+    }
+    if ((!FIXREVERTER[4675] && (list_ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     xmlListDelete(list_ref);
 }
 
@@ -2710,15 +4259,60 @@ xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
     xmlRefTablePtr table;
     xmlListPtr ref_list;
 
-    if (doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4676]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4676\n");
+      else
+        fprintf(stderr, "reached bug index 4676\n");
+    }
+    if ((!FIXREVERTER[4676] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
-    if (value == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4677]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4677\n");
+      else
+        fprintf(stderr, "reached bug index 4677\n");
+    }
+    if ((!FIXREVERTER[4677] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
-    if (attr == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4678]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4678\n");
+      else
+        fprintf(stderr, "reached bug index 4678\n");
+    }
+    if ((!FIXREVERTER[4678] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Create the Ref table if needed.
@@ -2726,28 +4320,88 @@ xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
     table = (xmlRefTablePtr) doc->refs;
     if (table == NULL) {
         doc->refs = table = xmlHashCreateDict(0, doc->dict);
-        if (table == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4679]) {
+          if ((table == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4679\n");
+          else
+            fprintf(stderr, "reached bug index 4679\n");
+        }
+        if ((!FIXREVERTER[4679] && (table == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto failed;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     ret = (xmlRefPtr) xmlMalloc(sizeof(xmlRef));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4680]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4680\n");
+      else
+        fprintf(stderr, "reached bug index 4680\n");
+    }
+    if ((!FIXREVERTER[4680] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto failed;
+        #ifdef FRCOV
+        }
+        #endif
     memset(ret, 0, sizeof(*ret));
 
     /*
      * fill the structure.
      */
     ret->value = xmlStrdup(value);
-    if (ret->value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4681]) {
+      if ((ret -> value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4681\n");
+      else
+        fprintf(stderr, "reached bug index 4681\n");
+    }
+    if ((!FIXREVERTER[4681] && (ret -> value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto failed;
+        #ifdef FRCOV
+        }
+        #endif
     if (xmlIsStreaming(ctxt)) {
 	/*
 	 * Operating in streaming mode, attr is gonna disappear
 	 */
 	ret->name = xmlStrdup(attr->name);
-        if (ret->name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4682]) {
+          if ((ret -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4682\n");
+          else
+            fprintf(stderr, "reached bug index 4682\n");
+        }
+        if ((!FIXREVERTER[4682] && (ret -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto failed;
+            #ifdef FRCOV
+            }
+            #endif
 	ret->attr = NULL;
     } else {
 	ret->name = NULL;
@@ -2818,11 +4472,41 @@ xmlFreeRefTable(xmlRefTablePtr table) {
  */
 int
 xmlIsRef(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4684]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4684\n");
+      else
+        fprintf(stderr, "reached bug index 4684\n");
+    }
+    if ((!FIXREVERTER[4684] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
+        #ifdef FRCOV
+        }
+        #endif
     if (doc == NULL) {
         doc = attr->doc;
-	if (doc == NULL) return(0);
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4685]) {
+	  if ((doc == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4685\n");
+	  else
+	    fprintf(stderr, "reached bug index 4685\n");
+	}
+	if ((!FIXREVERTER[4685] && (doc == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) return(0);
+	#ifdef FRCOV
+	}
+	#endif
     }
 
     if ((doc->intSubset == NULL) && (doc->extSubset == NULL)) {
@@ -2834,7 +4518,22 @@ xmlIsRef(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {
         xmlAttributePtr attrDecl;
         const xmlChar *aprefix;
 
-        if (elem == NULL) return(0);
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4686]) {
+          if ((elem == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4686\n");
+          else
+            fprintf(stderr, "reached bug index 4686\n");
+        }
+        if ((!FIXREVERTER[4686] && (elem == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) return(0);
+        #ifdef FRCOV
+        }
+        #endif
         aprefix = (attr->ns != NULL) ? attr->ns->prefix : NULL;
         attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, elem->name, attr->name,
                                       aprefix);
@@ -2998,7 +4697,22 @@ xmlGetDtdElementDesc2(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *name)
     const xmlChar *localName;
     xmlChar *prefix = NULL;
 
-    if (dtd == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4698]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4698\n");
+      else
+        fprintf(stderr, "reached bug index 4698\n");
+    }
+    if ((!FIXREVERTER[4698] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Create the Element table if needed.
@@ -3006,23 +4720,83 @@ xmlGetDtdElementDesc2(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *name)
     if (dtd->elements == NULL) {
 	xmlDictPtr dict = NULL;
 
-	if (dtd->doc != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4699]) {
+	  if ((dtd -> doc != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4699\n");
+	  else
+	    fprintf(stderr, "reached bug index 4699\n");
+	}
+	if ((!FIXREVERTER[4699] && (dtd -> doc != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    dict = dtd->doc->dict;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	dtd->elements = xmlHashCreateDict(0, dict);
-	if (dtd->elements == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4700]) {
+	  if ((dtd -> elements == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4700\n");
+	  else
+	    fprintf(stderr, "reached bug index 4700\n");
+	}
+	if ((!FIXREVERTER[4700] && (dtd -> elements == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
             goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     table = (xmlElementTablePtr) dtd->elements;
 
     localName = xmlSplitQName4(name, &prefix);
-    if (localName == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4701]) {
+      if ((localName == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4701\n");
+      else
+        fprintf(stderr, "reached bug index 4701\n");
+    }
+    if ((!FIXREVERTER[4701] && (localName == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
     cur = xmlHashLookup2(table, localName, prefix);
     if (cur == NULL) {
 	cur = (xmlElementPtr) xmlMalloc(sizeof(xmlElement));
-	if (cur == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4702]) {
+	  if ((cur == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4702\n");
+	  else
+	    fprintf(stderr, "reached bug index 4702\n");
+	}
+	if ((!FIXREVERTER[4702] && (cur == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
             goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
 	memset(cur, 0, sizeof(xmlElement));
 	cur->type = XML_ELEMENT_DECL;
         cur->doc = dtd->doc;
@@ -3031,8 +4805,23 @@ xmlGetDtdElementDesc2(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *name)
 	 * fill the structure.
 	 */
 	cur->name = xmlStrdup(localName);
-        if (cur->name == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4703]) {
+          if ((cur -> name == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4703\n");
+          else
+            fprintf(stderr, "reached bug index 4703\n");
+        }
+        if ((!FIXREVERTER[4703] && (cur -> name == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto mem_error;
+            #ifdef FRCOV
+            }
+            #endif
 	cur->prefix = prefix;
         prefix = NULL;
 	cur->etype = XML_ELEMENT_TYPE_UNDEFINED;
@@ -3068,8 +4857,38 @@ xmlGetDtdQElementDesc(xmlDtdPtr dtd, const xmlChar *name,
 	              const xmlChar *prefix) {
     xmlElementTablePtr table;
 
-    if (dtd == NULL) return(NULL);
-    if (dtd->elements == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4704]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4704\n");
+      else
+        fprintf(stderr, "reached bug index 4704\n");
+    }
+    if ((!FIXREVERTER[4704] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4705]) {
+      if ((dtd -> elements == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4705\n");
+      else
+        fprintf(stderr, "reached bug index 4705\n");
+    }
+    if ((!FIXREVERTER[4705] && (dtd -> elements == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     table = (xmlElementTablePtr) dtd->elements;
 
     return(xmlHashLookup2(table, name, prefix));
@@ -3094,17 +4913,61 @@ xmlGetDtdAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name) {
     const xmlChar *localname;
     xmlChar *prefix = NULL;
 
-    if ((dtd == NULL) || (dtd->attributes == NULL) ||
-        (elem == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4706]) {
+      if ((dtd == (void *) 0 || dtd -> attributes == (void *) 0 || elem == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4706\n");
+      else
+        fprintf(stderr, "reached bug index 4706\n");
+    }
+    if ((!FIXREVERTER[4706] && (dtd == (void *) 0 || dtd -> attributes == (void *) 0 || elem == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     table = (xmlAttributeTablePtr) dtd->attributes;
-    if (table == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4707]) {
+      if ((table == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4707\n");
+      else
+        fprintf(stderr, "reached bug index 4707\n");
+    }
+    if ((!FIXREVERTER[4707] && (table == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     localname = xmlSplitQName4(name, &prefix);
-    if (localname == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4708]) {
+      if ((localname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4708\n");
+      else
+        fprintf(stderr, "reached bug index 4708\n");
+    }
+    if ((!FIXREVERTER[4708] && (localname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     cur = xmlHashLookup3(table, localname, prefix, elem);
     if (prefix != NULL)
         xmlFree(prefix);
@@ -3129,8 +4992,38 @@ xmlGetDtdQAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name,
 	          const xmlChar *prefix) {
     xmlAttributeTablePtr table;
 
-    if (dtd == NULL) return(NULL);
-    if (dtd->attributes == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4709]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4709\n");
+      else
+        fprintf(stderr, "reached bug index 4709\n");
+    }
+    if ((!FIXREVERTER[4709] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4710]) {
+      if ((dtd -> attributes == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4710\n");
+      else
+        fprintf(stderr, "reached bug index 4710\n");
+    }
+    if ((!FIXREVERTER[4710] && (dtd -> attributes == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     table = (xmlAttributeTablePtr) dtd->attributes;
 
     return(xmlHashLookup3(table, name, prefix, elem));
@@ -3150,8 +5043,38 @@ xmlNotationPtr
 xmlGetDtdNotationDesc(xmlDtdPtr dtd, const xmlChar *name) {
     xmlNotationTablePtr table;
 
-    if (dtd == NULL) return(NULL);
-    if (dtd->notations == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4711]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4711\n");
+      else
+        fprintf(stderr, "reached bug index 4711\n");
+    }
+    if ((!FIXREVERTER[4711] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4712]) {
+      if ((dtd -> notations == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4712\n");
+      else
+        fprintf(stderr, "reached bug index 4712\n");
+    }
+    if ((!FIXREVERTER[4712] && (dtd -> notations == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     table = (xmlNotationTablePtr) dtd->notations;
 
     return(xmlHashLookup(table, name));
@@ -3176,8 +5099,22 @@ int
 xmlValidateNotationUse(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
                        const xmlChar *notationName) {
     xmlNotationPtr notaDecl;
-    if ((doc == NULL) || (doc->intSubset == NULL) ||
-        (notationName == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4713]) {
+      if ((doc == (void *) 0 || doc -> intSubset == (void *) 0 || notationName == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4713\n");
+      else
+        fprintf(stderr, "reached bug index 4713\n");
+    }
+    if ((!FIXREVERTER[4713] && (doc == (void *) 0 || doc -> intSubset == (void *) 0 || notationName == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     notaDecl = xmlGetDtdNotationDesc(doc->intSubset, notationName);
     if ((notaDecl == NULL) && (doc->extSubset != NULL))
@@ -3244,8 +5181,23 @@ xmlValidNormalizeString(xmlChar *str) {
     xmlChar *dst;
     const xmlChar *src;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4716]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4716\n");
+      else
+        fprintf(stderr, "reached bug index 4716\n");
+    }
+    if ((!FIXREVERTER[4716] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     src = str;
     dst = str;
 
@@ -3345,7 +5297,22 @@ xmlValidateNameValueInternal(xmlDocPtr doc, const xmlChar *value) {
     const xmlChar *cur;
     int val, len;
 
-    if (value == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4717]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4717\n");
+      else
+        fprintf(stderr, "reached bug index 4717\n");
+    }
+    if ((!FIXREVERTER[4717] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = value;
     val = xmlStringCurrentChar(NULL, cur, &len);
     cur += len;
@@ -3393,7 +5360,22 @@ xmlValidateNamesValueInternal(xmlDocPtr doc, const xmlChar *value) {
     const xmlChar *cur;
     int val, len;
 
-    if (value == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4719]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4719\n");
+      else
+        fprintf(stderr, "reached bug index 4719\n");
+    }
+    if ((!FIXREVERTER[4719] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = value;
     val = xmlStringCurrentChar(NULL, cur, &len);
     cur += len;
@@ -3463,7 +5445,22 @@ xmlValidateNmtokenValueInternal(xmlDocPtr doc, const xmlChar *value) {
     const xmlChar *cur;
     int val, len;
 
-    if (value == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4721]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4721\n");
+      else
+        fprintf(stderr, "reached bug index 4721\n");
+    }
+    if ((!FIXREVERTER[4721] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = value;
     val = xmlStringCurrentChar(NULL, cur, &len);
     cur += len;
@@ -3516,7 +5513,22 @@ xmlValidateNmtokensValueInternal(xmlDocPtr doc, const xmlChar *value) {
     const xmlChar *cur;
     int val, len;
 
-    if (value == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4723]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4723\n");
+      else
+        fprintf(stderr, "reached bug index 4723\n");
+    }
+    if ((!FIXREVERTER[4723] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     cur = value;
     val = xmlStringCurrentChar(NULL, cur, &len);
     cur += len;
@@ -3736,10 +5748,25 @@ xmlValidateAttributeValue2(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	    xmlEntityPtr ent;
 
 	    dup = xmlStrdup(value);
-	    if (dup == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4726]) {
+	      if ((dup == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4726\n");
+	      else
+	        fprintf(stderr, "reached bug index 4726\n");
+	    }
+	    if ((!FIXREVERTER[4726] && (dup == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 xmlVErrMemory(ctxt);
 		return(0);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    cur = dup;
 	    while (*cur != 0) {
 		nam = cur;
@@ -3823,25 +5850,130 @@ xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     xmlChar *prefix = NULL;
     int extsubset = 0;
 
-    if (doc == NULL) return(NULL);
-    if (elem == NULL) return(NULL);
-    if (name == NULL) return(NULL);
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4727]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4727\n");
+      else
+        fprintf(stderr, "reached bug index 4727\n");
+    }
+    if ((!FIXREVERTER[4727] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4728]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4728\n");
+      else
+        fprintf(stderr, "reached bug index 4728\n");
+    }
+    if ((!FIXREVERTER[4728] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4729]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4729\n");
+      else
+        fprintf(stderr, "reached bug index 4729\n");
+    }
+    if ((!FIXREVERTER[4729] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4730]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4730\n");
+      else
+        fprintf(stderr, "reached bug index 4730\n");
+    }
+    if ((!FIXREVERTER[4730] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     localName = xmlSplitQName4(name, &prefix);
-    if (localName == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4731]) {
+      if ((localName == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4731\n");
+      else
+        fprintf(stderr, "reached bug index 4731\n");
+    }
+    if ((!FIXREVERTER[4731] && (localName == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto mem_error;
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((elem->ns != NULL) && (elem->ns->prefix != NULL)) {
 	xmlChar buf[50];
 	xmlChar *elemname;
 
 	elemname = xmlBuildQName(elem->name, elem->ns->prefix, buf, 50);
-	if (elemname == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4732]) {
+	  if ((elemname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4732\n");
+	  else
+	    fprintf(stderr, "reached bug index 4732\n");
+	}
+	if ((!FIXREVERTER[4732] && (elemname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto mem_error;
-        if (doc->intSubset != NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4733]) {
+          if ((doc -> intSubset != (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4733\n");
+          else
+            fprintf(stderr, "reached bug index 4733\n");
+        }
+        if ((!FIXREVERTER[4733] && (doc -> intSubset != (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             attrDecl = xmlHashLookup3(doc->intSubset->attributes, localName,
                                       prefix, elemname);
+                                      #ifdef FRCOV
+                                      }
+                                      #endif
 	if ((attrDecl == NULL) && (doc->extSubset != NULL)) {
 	    attrDecl = xmlHashLookup3(doc->extSubset->attributes, localName,
                                       prefix, elemname);
@@ -3861,14 +5993,44 @@ xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	    extsubset = 1;
     }
 
-    if (attrDecl == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4736]) {
+      if ((attrDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4736\n");
+      else
+        fprintf(stderr, "reached bug index 4736\n");
+    }
+    if ((!FIXREVERTER[4736] && (attrDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto done;
+	#ifdef FRCOV
+	}
+	#endif
     if (attrDecl->atype == XML_ATTRIBUTE_CDATA)
 	goto done;
 
     ret = xmlStrdup(value);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4737]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4737\n");
+      else
+        fprintf(stderr, "reached bug index 4737\n");
+    }
+    if ((!FIXREVERTER[4737] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto mem_error;
+	#ifdef FRCOV
+	}
+	#endif
     xmlValidNormalizeString(ret);
     if ((doc->standalone) && (extsubset == 1) && (!xmlStrEqual(value, ret))) {
 	xmlErrValidNode(ctxt, elem, XML_DTD_NOT_STANDALONE,
@@ -3980,7 +6142,22 @@ xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     int ret = 1;
     int val;
     CHECK_DTD;
-    if(attr == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4745]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4745\n");
+      else
+        fprintf(stderr, "reached bug index 4745\n");
+    }
+    if ((!FIXREVERTER[4745] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
 
     /* Attribute Default Legal */
     /* Enumeration */
@@ -4013,15 +6190,45 @@ xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
         int nbId;
 
         elemLocalName = xmlSplitQName4(attr->elem, &elemPrefix);
-        if (elemLocalName == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4746]) {
+          if ((elemLocalName == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4746\n");
+          else
+            fprintf(stderr, "reached bug index 4746\n");
+        }
+        if ((!FIXREVERTER[4746] && (elemLocalName == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlVErrMemory(ctxt);
             return(0);
         }
+        #ifdef FRCOV
+        }
+        #endif
 
 	/* the trick is that we parse DtD as their own internal subset */
-        if (doc->intSubset != NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4747]) {
+          if ((doc -> intSubset != (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4747\n");
+          else
+            fprintf(stderr, "reached bug index 4747\n");
+        }
+        if ((!FIXREVERTER[4747] && (doc -> intSubset != (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             elem = xmlHashLookup2(doc->intSubset->elements,
                                   elemLocalName, elemPrefix);
+                                  #ifdef FRCOV
+                                  }
+                                  #endif
 	if (elem != NULL) {
 	    nbId = xmlScanIDAttributeDecl(ctxt, elem, 0);
 	} else {
@@ -4068,7 +6275,22 @@ xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     }
 
     /* Validity Constraint: Enumeration */
-    if ((attr->defaultValue != NULL) && (attr->tree != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4748]) {
+      fprintf(stderr, "reached bug index 4748\n");
+    }
+    if ((FIXREVERTER[4748] && (attr -> defaultValue != (void *) 0 )) || (!FIXREVERTER[4748] && (attr -> defaultValue != (void *) 0 && attr -> tree != (void *) 0 ))
+    #else
+    if (attr -> defaultValue != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(attr -> tree != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 4748\n");
+      #endif
+    
         xmlEnumerationPtr tree = attr->tree;
 	while (tree != NULL) {
 	    if (xmlStrEqual(tree->name, attr->defaultValue)) break;
@@ -4081,6 +6303,9 @@ xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	    ret = 0;
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return(ret);
 }
@@ -4113,7 +6338,22 @@ xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
     CHECK_DTD;
 
-    if (elem == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4749]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4749\n");
+      else
+        fprintf(stderr, "reached bug index 4749\n");
+    }
+    if ((!FIXREVERTER[4749] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
 
 #if 0
 #ifdef LIBXML_REGEXP_ENABLED
@@ -4130,7 +6370,22 @@ xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	cur = elem->content;
 	while (cur != NULL) {
 	    if (cur->type != XML_ELEMENT_CONTENT_OR) break;
-	    if (cur->c1 == NULL) break;
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4750]) {
+	      if ((cur -> c1 == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4750\n");
+	      else
+	        fprintf(stderr, "reached bug index 4750\n");
+	    }
+	    if ((!FIXREVERTER[4750] && (cur -> c1 == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) break;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (cur->c1->type == XML_ELEMENT_CONTENT_ELEMENT) {
 		name = cur->c1->name;
 		next = cur->c2;
@@ -4151,7 +6406,22 @@ xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 			}
 			break;
 		    }
-		    if (next->c1 == NULL) break;
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4751]) {
+		      if ((next -> c1 == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4751\n");
+		      else
+		        fprintf(stderr, "reached bug index 4751\n");
+		    }
+		    if ((!FIXREVERTER[4751] && (next -> c1 == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) break;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    if (next->c1->type != XML_ELEMENT_CONTENT_ELEMENT) break;
 		    if ((xmlStrEqual(next->c1->name, name)) &&
 		        (xmlStrEqual(next->c1->prefix, cur->c1->prefix))) {
@@ -4174,10 +6444,25 @@ xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     }
 
     localName = xmlSplitQName4(elem->name, &prefix);
-    if (localName == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4752]) {
+      if ((localName == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4752\n");
+      else
+        fprintf(stderr, "reached bug index 4752\n");
+    }
+    if ((!FIXREVERTER[4752] && (localName == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlVErrMemory(ctxt);
         return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /* VC: Unique Element Type Declaration */
     if (doc->intSubset != NULL) {
@@ -4254,8 +6539,38 @@ xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     int ret = 1;
 
     CHECK_DTD;
-    if ((elem == NULL) || (elem->name == NULL)) return(0);
-    if ((attr == NULL) || (attr->name == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4753]) {
+      if ((elem == (void *) 0 || elem -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4753\n");
+      else
+        fprintf(stderr, "reached bug index 4753\n");
+    }
+    if ((!FIXREVERTER[4753] && (elem == (void *) 0 || elem -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4754]) {
+      if ((attr == (void *) 0 || attr -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4754\n");
+      else
+        fprintf(stderr, "reached bug index 4754\n");
+    }
+    if ((!FIXREVERTER[4754] && (attr == (void *) 0 || attr -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     aprefix = (attr->ns != NULL) ? attr->ns->prefix : NULL;
 
@@ -4264,10 +6579,25 @@ xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	xmlChar *fullname;
 
 	fullname = xmlBuildQName(elem->name, elem->ns->prefix, fn, 50);
-	if (fullname == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4755]) {
+	  if ((fullname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4755\n");
+	  else
+	    fprintf(stderr, "reached bug index 4755\n");
+	}
+	if ((!FIXREVERTER[4755] && (fullname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             xmlVErrMemory(ctxt);
 	    return(0);
         }
+        #ifdef FRCOV
+        }
+        #endif
         attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, fullname,
                                       attr->name, aprefix);
         if ((attrDecl == NULL) && (doc->extSubset != NULL))
@@ -4286,12 +6616,27 @@ xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
 
     /* Validity Constraint: Attribute Value Type */
-    if (attrDecl == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4756]) {
+      if ((attrDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4756\n");
+      else
+        fprintf(stderr, "reached bug index 4756\n");
+    }
+    if ((!FIXREVERTER[4756] && (attrDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_ATTRIBUTE,
 	       "No declaration for attribute %s of element %s\n",
 	       attr->name, elem->name, NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (attr->atype == XML_ATTRIBUTE_ID)
         xmlRemoveID(doc, attr);
     attr->atype = attrDecl->atype;
@@ -4333,8 +6678,23 @@ xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
         /* First check that the given NOTATION was declared */
 	nota = xmlGetDtdNotationDesc(doc->intSubset, value);
-	if (nota == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4757]) {
+	  if ((nota == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4757\n");
+	  else
+	    fprintf(stderr, "reached bug index 4757\n");
+	}
+	if ((!FIXREVERTER[4757] && (nota == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    nota = xmlGetDtdNotationDesc(doc->extSubset, value);
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	if (nota == NULL) {
 	    xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_NOTATION,
@@ -4424,18 +6784,63 @@ xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {
     int ret = 1;
 
     CHECK_DTD;
-    if ((elem == NULL) || (elem->name == NULL)) return(0);
-    if ((ns == NULL) || (ns->href == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4758]) {
+      if ((elem == (void *) 0 || elem -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4758\n");
+      else
+        fprintf(stderr, "reached bug index 4758\n");
+    }
+    if ((!FIXREVERTER[4758] && (elem == (void *) 0 || elem -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4759]) {
+      if ((ns == (void *) 0 || ns -> href == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4759\n");
+      else
+        fprintf(stderr, "reached bug index 4759\n");
+    }
+    if ((!FIXREVERTER[4759] && (ns == (void *) 0 || ns -> href == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     if (prefix != NULL) {
 	xmlChar fn[50];
 	xmlChar *fullname;
 
 	fullname = xmlBuildQName(elem->name, prefix, fn, 50);
-	if (fullname == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4760]) {
+	  if ((fullname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4760\n");
+	  else
+	    fprintf(stderr, "reached bug index 4760\n");
+	}
+	if ((!FIXREVERTER[4760] && (fullname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlVErrMemory(ctxt);
 	    return(0);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (ns->prefix != NULL) {
 	    attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, fullname,
 		                          ns->prefix, BAD_CAST "xmlns");
@@ -4470,7 +6875,19 @@ xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {
 
 
     /* Validity Constraint: Attribute Value Type */
-    if (attrDecl == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4761]) {
+      if ((attrDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4761\n");
+      else
+        fprintf(stderr, "reached bug index 4761\n");
+    }
+    if ((!FIXREVERTER[4761] && (attrDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (ns->prefix != NULL) {
 	    xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_ATTRIBUTE,
 		   "No declaration for attribute xmlns:%s of element %s\n",
@@ -4482,6 +6899,9 @@ xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {
 	}
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     val = xmlValidateAttributeValueInternal(doc, attrDecl->atype, value);
     if (val == 0) {
@@ -4539,8 +6959,23 @@ xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {
 
         /* First check that the given NOTATION was declared */
 	nota = xmlGetDtdNotationDesc(doc->intSubset, value);
-	if (nota == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4762]) {
+	  if ((nota == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4762\n");
+	  else
+	    fprintf(stderr, "reached bug index 4762\n");
+	}
+	if ((!FIXREVERTER[4762] && (nota == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    nota = xmlGetDtdNotationDesc(doc->extSubset, value);
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	if (nota == NULL) {
 	    if (ns->prefix != NULL) {
@@ -5001,16 +7436,46 @@ xmlSnprintfElements(char *buf, int size, xmlNodePtr node, int glob) {
     xmlNodePtr cur;
     int len;
 
-    if (node == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4763]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4763\n");
+      else
+        fprintf(stderr, "reached bug index 4763\n");
+    }
+    if ((!FIXREVERTER[4763] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (glob) strcat(buf, "(");
     cur = node;
     while (cur != NULL) {
 	len = strlen(buf);
-	if (size - len < 50) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4764]) {
+	  if ((size - len < 50 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4764\n");
+	  else
+	    fprintf(stderr, "reached bug index 4764\n");
+	}
+	if ((!FIXREVERTER[4764] && (size - len < 50 ))
+	#else
+	if (0
+	#endif
+	) {
 	    if ((size - len > 4) && (buf[len - 1] != '.'))
 		strcat(buf, " ...");
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
         switch (cur->type) {
             case XML_ELEMENT_NODE:
 		if ((cur->ns != NULL) && (cur->ns->prefix != NULL)) {
@@ -5093,8 +7558,23 @@ xmlValidateElementContent(xmlValidCtxtPtr ctxt, xmlNodePtr child,
     xmlElementContentPtr cont;
     const xmlChar *name;
 
-    if ((elemDecl == NULL) || (parent == NULL) || (ctxt == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4765]) {
+      if ((elemDecl == (void *) 0 || parent == (void *) 0 || ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4765\n");
+      else
+        fprintf(stderr, "reached bug index 4765\n");
+    }
+    if ((!FIXREVERTER[4765] && (elemDecl == (void *) 0 || parent == (void *) 0 || ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     cont = elemDecl->content;
     name = elemDecl->name;
 
@@ -5114,10 +7594,25 @@ xmlValidateElementContent(xmlValidCtxtPtr ctxt, xmlNodePtr child,
 	ctxt->nodeNr = 0;
 	ctxt->nodeTab = NULL;
 	exec = xmlRegNewExecCtxt(elemDecl->contModel, NULL, NULL);
-	if (exec == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4767]) {
+	  if ((exec == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4767\n");
+	  else
+	    fprintf(stderr, "reached bug index 4767\n");
+	}
+	if ((!FIXREVERTER[4767] && (exec == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             xmlVErrMemory(ctxt);
             return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
         cur = child;
         while (cur != NULL) {
             switch (cur->type) {
@@ -5149,11 +7644,26 @@ xmlValidateElementContent(xmlValidCtxtPtr ctxt, xmlNodePtr child,
 
                         fullname = xmlBuildQName(cur->name,
                                                  cur->ns->prefix, fn, 50);
-                        if (fullname == NULL) {
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[4768]) {
+                          if ((fullname == (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 4768\n");
+                          else
+                            fprintf(stderr, "reached bug index 4768\n");
+                        }
+                        if ((!FIXREVERTER[4768] && (fullname == (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        ) {
                             xmlVErrMemory(ctxt);
                             ret = -1;
                             goto fail;
                         }
+                        #ifdef FRCOV
+                        }
+                        #endif
                         ret = xmlRegExecPushString(exec, fullname, NULL);
                         if ((fullname != fn) && (fullname != cur->name))
                             xmlFree(fullname);
@@ -5172,8 +7682,23 @@ xmlValidateElementContent(xmlValidCtxtPtr ctxt, xmlNodePtr child,
             cur = cur->next;
             while (cur == NULL) {
                 cur = nodeVPop(ctxt);
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[4769]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 4769\n");
+                  else
+                    fprintf(stderr, "reached bug index 4769\n");
+                }
+                if ((!FIXREVERTER[4769] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     break;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 cur = cur->next;
             }
         }
@@ -5420,8 +7945,23 @@ xmlValidateOneCdataElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 	cur = cur->next;
 	while (cur == NULL) {
 	    cur = nodeVPop(ctxt);
-	    if (cur == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4770]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4770\n");
+	      else
+	        fprintf(stderr, "reached bug index 4770\n");
+	    }
+	    if ((!FIXREVERTER[4770] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    cur = cur->next;
 	}
     }
@@ -5521,9 +8061,23 @@ xmlValidGetElemDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
     xmlElementPtr elemDecl = NULL;
     const xmlChar *prefix = NULL;
 
-    if ((ctxt == NULL) || (doc == NULL) ||
-        (elem == NULL) || (elem->name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4771]) {
+      if ((ctxt == (void *) 0 || doc == (void *) 0 || elem == (void *) 0 || elem -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4771\n");
+      else
+        fprintf(stderr, "reached bug index 4771\n");
+    }
+    if ((!FIXREVERTER[4771] && (ctxt == (void *) 0 || doc == (void *) 0 || elem == (void *) 0 || elem -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (extsubset != NULL)
 	*extsubset = 0;
 
@@ -5834,7 +8388,22 @@ xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
     CHECK_DTD;
 
-    if (elem == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4779]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4779\n");
+      else
+        fprintf(stderr, "reached bug index 4779\n");
+    }
+    if ((!FIXREVERTER[4779] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     switch (elem->type) {
         case XML_TEXT_NODE:
         case XML_CDATA_SECTION_NODE:
@@ -5856,8 +8425,23 @@ xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
      * Fetch the declaration
      */
     elemDecl = xmlValidGetElemDecl(ctxt, doc, elem, &extsubset);
-    if (elemDecl == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4780]) {
+      if ((elemDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4780\n");
+      else
+        fprintf(stderr, "reached bug index 4780\n");
+    }
+    if ((!FIXREVERTER[4780] && (elemDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * If vstateNr is not zero that means continuous validation is
@@ -5906,10 +8490,25 @@ xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
 
 			fullname = xmlBuildQName(child->name, child->ns->prefix,
 				                 fn, 50);
-			if (fullname == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[4781]) {
+			  if ((fullname == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 4781\n");
+			  else
+			    fprintf(stderr, "reached bug index 4781\n");
+			}
+			if ((!FIXREVERTER[4781] && (fullname == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
                             xmlVErrMemory(ctxt);
 			    return(0);
                         }
+                        #ifdef FRCOV
+                        }
+                        #endif
 			cont = elemDecl->content;
 			while (cont != NULL) {
 			    if (cont->type == XML_ELEMENT_CONTENT_ELEMENT) {
@@ -5965,7 +8564,22 @@ child_ok:
 	    }
 	    break;
         case XML_ELEMENT_TYPE_ELEMENT:
-	    if ((doc->standalone == 1) && (extsubset == 1)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4782]) {
+	      fprintf(stderr, "reached bug index 4782\n");
+	    }
+	    if ((FIXREVERTER[4782] && (doc -> standalone == 1 )) || (!FIXREVERTER[4782] && (doc -> standalone == 1 && extsubset == 1 ))
+	    #else
+	    if (doc -> standalone == 1 
+	    #endif
+	    ) {
+	      
+	    #ifdef FRCOV
+	      if (!(extsubset == 1 ))
+	        fprintf(stderr, "triggered bug index 4782\n");
+	      #endif
+	    
 		/*
 		 * VC: Standalone Document Declaration
 		 *     - element types with element content, if white space
@@ -5991,11 +8605,29 @@ child_ok:
 		    child =child->next;
 		}
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    child = elem->children;
 	    cont = elemDecl->content;
 	    tmp = xmlValidateElementContent(ctxt, child, elemDecl, 1, elem);
-	    if (tmp <= 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[4783]) {
+	      if ((tmp <= 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 4783\n");
+	      else
+	        fprintf(stderr, "reached bug index 4783\n");
+	    }
+	    if ((!FIXREVERTER[4783] && (tmp <= 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		ret = 0;
+		#ifdef FRCOV
+		}
+		#endif
 	    break;
     }
     } /* not continuous */
@@ -6012,8 +8644,23 @@ child_ok:
 
 		ns = elem->nsDef;
 		while (ns != NULL) {
-		    if (ns->prefix == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4784]) {
+		      if ((ns -> prefix == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4784\n");
+		      else
+		        fprintf(stderr, "reached bug index 4784\n");
+		    }
+		    if ((!FIXREVERTER[4784] && (ns -> prefix == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto found;
+			#ifdef FRCOV
+			}
+			#endif
 		    ns = ns->next;
 		}
 	    } else if (xmlStrEqual(attr->prefix, BAD_CAST "xmlns")) {
@@ -6034,8 +8681,23 @@ child_ok:
 			if (attr->prefix != NULL) {
 			    xmlNsPtr nameSpace = attrib->ns;
 
-			    if (nameSpace == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[4785]) {
+			      if ((nameSpace == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 4785\n");
+			      else
+			        fprintf(stderr, "reached bug index 4785\n");
+			    }
+			    if ((!FIXREVERTER[4785] && (nameSpace == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				nameSpace = elem->ns;
+				#ifdef FRCOV
+				}
+				#endif
 			    /*
 			     * qualified names handling is problematic, having a
 			     * different prefix should be possible but DTDs don't
@@ -6096,7 +8758,19 @@ child_ok:
 
 		ns = elem->nsDef;
 		while (ns != NULL) {
-		    if (ns->prefix == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4788]) {
+		      if ((ns -> prefix == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 4788\n");
+		      else
+		        fprintf(stderr, "reached bug index 4788\n");
+		    }
+		    if ((!FIXREVERTER[4788] && (ns -> prefix == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			if (!xmlStrEqual(attr->defaultValue, ns->href)) {
 			    xmlErrValidNode(ctxt, elem,
 			           XML_DTD_ELEM_DEFAULT_NAMESPACE,
@@ -6106,6 +8780,9 @@ child_ok:
 			}
 			goto found;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    ns = ns->next;
 		}
 	    } else if (xmlStrEqual(attr->prefix, BAD_CAST "xmlns")) {
@@ -6153,14 +8830,44 @@ xmlValidateRoot(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {
     xmlNodePtr root;
     int ret;
 
-    if (doc == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4789]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4789\n");
+      else
+        fprintf(stderr, "reached bug index 4789\n");
+    }
+    if ((!FIXREVERTER[4789] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     root = xmlDocGetRootElement(doc);
-    if ((root == NULL) || (root->name == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4790]) {
+      if ((root == (void *) 0 || root -> name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4790\n");
+      else
+        fprintf(stderr, "reached bug index 4790\n");
+    }
+    if ((!FIXREVERTER[4790] && (root == (void *) 0 || root -> name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlErrValid(ctxt, XML_DTD_NO_ROOT,
 	            "no root element\n", NULL);
         return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * When doing post validation against a separate DTD, those may
@@ -6177,10 +8884,25 @@ xmlValidateRoot(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {
 		xmlChar *fullname;
 
 		fullname = xmlBuildQName(root->name, root->ns->prefix, fn, 50);
-		if (fullname == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4791]) {
+		  if ((fullname == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 4791\n");
+		  else
+		    fprintf(stderr, "reached bug index 4791\n");
+		}
+		if ((!FIXREVERTER[4791] && (fullname == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlVErrMemory(ctxt);
 		    return(0);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = xmlStrEqual(doc->intSubset->name, fullname);
 		if ((fullname != fn) && (fullname != root->name))
 		    xmlFree(fullname);
@@ -6287,8 +9009,23 @@ xmlValidateRef(xmlRefPtr ref, xmlValidCtxtPtr ctxt,
     xmlAttrPtr id;
     xmlAttrPtr attr;
 
-    if (ref == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4794]) {
+      if ((ref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4794\n");
+      else
+        fprintf(stderr, "reached bug index 4794\n");
+    }
+    if ((!FIXREVERTER[4794] && (ref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((ref->attr == NULL) && (ref->name == NULL))
 	return;
     attr = ref->attr;
@@ -6296,10 +9033,25 @@ xmlValidateRef(xmlRefPtr ref, xmlValidCtxtPtr ctxt,
 	xmlChar *dup, *str = NULL, *cur, save;
 
 	dup = xmlStrdup(name);
-	if (dup == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4795]) {
+	  if ((dup == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4795\n");
+	  else
+	    fprintf(stderr, "reached bug index 4795\n");
+	}
+	if ((!FIXREVERTER[4795] && (dup == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             xmlVErrMemory(ctxt);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	cur = dup;
 	while (*cur != 0) {
 	    str = cur;
@@ -6331,11 +9083,26 @@ xmlValidateRef(xmlRefPtr ref, xmlValidCtxtPtr ctxt,
 	xmlChar *dup, *str = NULL, *cur, save;
 
 	dup = xmlStrdup(name);
-	if (dup == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4796]) {
+	  if ((dup == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4796\n");
+	  else
+	    fprintf(stderr, "reached bug index 4796\n");
+	}
+	if ((!FIXREVERTER[4796] && (dup == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlVErrMemory(ctxt);
 	    ctxt->valid = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	cur = dup;
 	while (*cur != 0) {
 	    str = cur;
@@ -6386,8 +9153,23 @@ xmlValidateCheckRefCallback(void *payload, void *data, const xmlChar *name) {
     xmlValidCtxtPtr ctxt = (xmlValidCtxtPtr) data;
     xmlValidateMemo memo;
 
-    if (ref_list == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4797]) {
+      if ((ref_list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4797\n");
+      else
+        fprintf(stderr, "reached bug index 4797\n");
+    }
+    if ((!FIXREVERTER[4797] && (ref_list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     memo.ctxt = ctxt;
     memo.name = name;
 
@@ -6418,13 +9200,43 @@ xmlValidateDocumentFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {
     xmlParserCtxtPtr pctxt = NULL;
     xmlParserInputPtr oldInput = NULL;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4798]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4798\n");
+      else
+        fprintf(stderr, "reached bug index 4798\n");
+    }
+    if ((!FIXREVERTER[4798] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
-    if (doc == NULL) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4799]) {
+      if ((doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4799\n");
+      else
+        fprintf(stderr, "reached bug index 4799\n");
+    }
+    if ((!FIXREVERTER[4799] && (doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlErrValid(ctxt, XML_DTD_NO_DOC,
 		"xmlValidateDocumentFinal: doc == NULL\n", NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Check all the NOTATION/NOTATIONS attributes
@@ -6522,8 +9334,23 @@ xmlValidateNotationCallback(void *payload, void *data,
 	                    const xmlChar *name ATTRIBUTE_UNUSED) {
     xmlEntityPtr cur = (xmlEntityPtr) payload;
     xmlValidCtxtPtr ctxt = (xmlValidCtxtPtr) data;
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4802]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4802\n");
+      else
+        fprintf(stderr, "reached bug index 4802\n");
+    }
+    if ((!FIXREVERTER[4802] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (cur->etype == XML_EXTERNAL_GENERAL_UNPARSED_ENTITY) {
 	xmlChar *notation = cur->content;
 
@@ -6547,8 +9374,23 @@ xmlValidateAttributeCallback(void *payload, void *data,
     xmlDocPtr doc;
     xmlElementPtr elem = NULL;
 
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4803]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4803\n");
+      else
+        fprintf(stderr, "reached bug index 4803\n");
+    }
+    if ((!FIXREVERTER[4803] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     switch (cur->atype) {
 	case XML_ATTRIBUTE_CDATA:
 	case XML_ATTRIBUTE_ID:
@@ -6565,16 +9407,50 @@ xmlValidateAttributeCallback(void *payload, void *data,
 
 		ret = xmlValidateAttributeValue2(ctxt, ctxt->doc, cur->name,
 			                         cur->atype, cur->defaultValue);
-		if ((ret == 0) && (ctxt->valid == 1))
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[4804]) {
+		  fprintf(stderr, "reached bug index 4804\n");
+		}
+		if ((FIXREVERTER[4804] && (ret == 0 )) || (!FIXREVERTER[4804] && (ret == 0 && ctxt -> valid == 1  ))
+		#else
+		if (ret == 0 
+		#endif
+		)
+		    
+		    #ifdef FRCOV
+		    {if (!(ctxt -> valid == 1  ))
+		      fprintf(stderr, "triggered bug index 4804\n");
+		    #endif
 		    ctxt->valid = 0;
+		    #ifdef FRCOV
+		    }}
+		    #endif
 	    }
 	    if (cur->tree != NULL) {
 		xmlEnumerationPtr tree = cur->tree;
 		while (tree != NULL) {
 		    ret = xmlValidateAttributeValue2(ctxt, ctxt->doc,
 				    cur->name, cur->atype, tree->name);
-		    if ((ret == 0) && (ctxt->valid == 1))
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[4805]) {
+		      fprintf(stderr, "reached bug index 4805\n");
+		    }
+		    if ((FIXREVERTER[4805] && (ret == 0 )) || (!FIXREVERTER[4805] && (ret == 0 && ctxt -> valid == 1  ))
+		    #else
+		    if (ret == 0 
+		    #endif
+		    )
+			
+			#ifdef FRCOV
+			{if (!(ctxt -> valid == 1  ))
+			  fprintf(stderr, "triggered bug index 4805\n");
+			#endif
 			ctxt->valid = 0;
+			#ifdef FRCOV
+			}}
+			#endif
 		    tree = tree->next;
 		}
 	    }
@@ -6584,22 +9460,69 @@ xmlValidateAttributeCallback(void *payload, void *data,
         xmlChar *elemPrefix;
 
 	doc = cur->doc;
-	if (cur->elem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4806]) {
+	  if ((cur -> elem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4806\n");
+	  else
+	    fprintf(stderr, "reached bug index 4806\n");
+	}
+	if ((!FIXREVERTER[4806] && (cur -> elem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,
 		   "xmlValidateAttributeCallback(%s): internal error\n",
 		   (const char *) cur->name);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
         elemLocalName = xmlSplitQName4(cur->elem, &elemPrefix);
-        if (elemLocalName == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[4807]) {
+          if ((elemLocalName == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 4807\n");
+          else
+            fprintf(stderr, "reached bug index 4807\n");
+        }
+        if ((!FIXREVERTER[4807] && (elemLocalName == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlVErrMemory(ctxt);
             return;
         }
+        #ifdef FRCOV
+        }
+        #endif
 
-	if ((doc != NULL) && (doc->intSubset != NULL))
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4808]) {
+	  fprintf(stderr, "reached bug index 4808\n");
+	}
+	if ((FIXREVERTER[4808] && (doc != (void *) 0 )) || (!FIXREVERTER[4808] && (doc != (void *) 0 && doc -> intSubset != (void *) 0 ))
+	#else
+	if (doc != (void *) 0 
+	#endif
+	)
+	    
+	    #ifdef FRCOV
+	    {if (!(doc -> intSubset != (void *) 0 ))
+	      fprintf(stderr, "triggered bug index 4808\n");
+	    #endif
 	    elem = xmlHashLookup2(doc->intSubset->elements,
                                   elemLocalName, elemPrefix);
+                                  #ifdef FRCOV
+                                  }}
+                                  #endif
 	if ((elem == NULL) && (doc != NULL) && (doc->extSubset != NULL))
 	    elem = xmlHashLookup2(doc->extSubset->elements,
                                   elemLocalName, elemPrefix);
@@ -6610,12 +9533,27 @@ xmlValidateAttributeCallback(void *payload, void *data,
 
         xmlFree(elemPrefix);
 
-	if (elem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[4809]) {
+	  if ((elem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 4809\n");
+	  else
+	    fprintf(stderr, "reached bug index 4809\n");
+	}
+	if ((!FIXREVERTER[4809] && (elem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlErrValidNode(ctxt, NULL, XML_DTD_UNKNOWN_ELEM,
 		   "attribute %s: could not find decl for element %s\n",
 		   cur->name, cur->elem, NULL);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (elem->etype == XML_ELEMENT_TYPE_EMPTY) {
 	    xmlErrValidNode(ctxt, NULL, XML_DTD_EMPTY_NOTATION,
 		   "NOTATION attribute %s declared for EMPTY element %s\n",
@@ -6650,29 +9588,116 @@ xmlValidateDtdFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {
     xmlAttributeTablePtr table;
     xmlEntitiesTablePtr entities;
 
-    if ((doc == NULL) || (ctxt == NULL)) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4810]) {
+      if ((doc == (void *) 0 || ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 4810\n");
+      else
+        fprintf(stderr, "reached bug index 4810\n");
+    }
+    if ((!FIXREVERTER[4810] && (doc == (void *) 0 || ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if ((doc->intSubset == NULL) && (doc->extSubset == NULL))
 	return(0);
     ctxt->doc = doc;
     ctxt->valid = 1;
     dtd = doc->intSubset;
-    if ((dtd != NULL) && (dtd->attributes != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4811]) {
+      fprintf(stderr, "reached bug index 4811\n");
+    }
+    if ((FIXREVERTER[4811] && (dtd != (void *) 0 )) || (!FIXREVERTER[4811] && (dtd != (void *) 0 && dtd -> attributes != (void *) 0 ))
+    #else
+    if (dtd != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(dtd -> attributes != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 4811\n");
+      #endif
+    
 	table = (xmlAttributeTablePtr) dtd->attributes;
 	xmlHashScan(table, xmlValidateAttributeCallback, ctxt);
     }
-    if ((dtd != NULL) && (dtd->entities != NULL)) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4812]) {
+      fprintf(stderr, "reached bug index 4812\n");
+    }
+    if ((FIXREVERTER[4812] && (dtd != (void *) 0 )) || (!FIXREVERTER[4812] && (dtd != (void *) 0 && dtd -> entities != (void *) 0 ))
+    #else
+    if (dtd != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(dtd -> entities != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 4812\n");
+      #endif
+    
 	entities = (xmlEntitiesTablePtr) dtd->entities;
 	xmlHashScan(entities, xmlValidateNotationCallback, ctxt);
     }
+    #ifdef FRCOV
+    }
+    #endif
     dtd = doc->extSubset;
-    if ((dtd != NULL) && (dtd->attributes != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4813]) {
+      fprintf(stderr, "reached bug index 4813\n");
+    }
+    if ((FIXREVERTER[4813] && (dtd != (void *) 0 )) || (!FIXREVERTER[4813] && (dtd != (void *) 0 && dtd -> attributes != (void *) 0 ))
+    #else
+    if (dtd != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(dtd -> attributes != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 4813\n");
+      #endif
+    
 	table = (xmlAttributeTablePtr) dtd->attributes;
 	xmlHashScan(table, xmlValidateAttributeCallback, ctxt);
     }
-    if ((dtd != NULL) && (dtd->entities != NULL)) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[4814]) {
+      fprintf(stderr, "reached bug index 4814\n");
+    }
+    if ((FIXREVERTER[4814] && (dtd != (void *) 0 )) || (!FIXREVERTER[4814] && (dtd != (void *) 0 && dtd -> entities != (void *) 0 ))
+    #else
+    if (dtd != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(dtd -> entities != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 4814\n");
+      #endif
+    
 	entities = (xmlEntitiesTablePtr) dtd->entities;
 	xmlHashScan(entities, xmlValidateNotationCallback, ctxt);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(ctxt->valid);
 }
 
diff --git a/xmlIO.c b/xmlIO.c
index d4275cbf..4cdc43e7 100644
--- a/xmlIO.c
+++ b/xmlIO.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xmlIO.c : implementation of the I/O interfaces used by the parser
  *
@@ -1341,15 +1345,45 @@ xmlAllocParserInputBuffer(xmlCharEncoding enc) {
     xmlParserInputBufferPtr ret;
 
     ret = (xmlParserInputBufferPtr) xmlMalloc(sizeof(xmlParserInputBuffer));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1032]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1032\n");
+      else
+        fprintf(stderr, "reached bug index 1032\n");
+    }
+    if ((!FIXREVERTER[1032] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlParserInputBuffer));
     ret->buffer = xmlBufCreateSize(2 * xmlDefaultBufferSize);
-    if (ret->buffer == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1033]) {
+      if ((ret -> buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1033\n");
+      else
+        fprintf(stderr, "reached bug index 1033\n");
+    }
+    if ((!FIXREVERTER[1033] && (ret -> buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     xmlBufSetAllocationScheme(ret->buffer, XML_BUFFER_ALLOC_DOUBLEIT);
     if (enc != XML_CHAR_ENCODING_NONE) {
         if (xmlLookupCharEncodingHandler(enc, &ret->encoder) != 0) {
@@ -1432,15 +1466,45 @@ xmlAllocOutputBufferInternal(xmlCharEncodingHandlerPtr encoder) {
     xmlOutputBufferPtr ret;
 
     ret = (xmlOutputBufferPtr) xmlMalloc(sizeof(xmlOutputBuffer));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1037]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1037\n");
+      else
+        fprintf(stderr, "reached bug index 1037\n");
+    }
+    if ((!FIXREVERTER[1037] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlOutputBuffer));
     ret->buffer = xmlBufCreate();
-    if (ret->buffer == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1038]) {
+      if ((ret -> buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1038\n");
+      else
+        fprintf(stderr, "reached bug index 1038\n");
+    }
+    if ((!FIXREVERTER[1038] && (ret -> buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
 
     /*
@@ -1451,11 +1515,26 @@ xmlAllocOutputBufferInternal(xmlCharEncodingHandlerPtr encoder) {
     ret->encoder = encoder;
     if (encoder != NULL) {
         ret->conv = xmlBufCreateSize(4000);
-	if (ret->conv == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1039]) {
+	  if ((ret -> conv == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1039\n");
+	  else
+	    fprintf(stderr, "reached bug index 1039\n");
+	}
+	if ((!FIXREVERTER[1039] && (ret -> conv == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
             xmlBufFree(ret->buffer);
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	/*
 	 * This call is designed to initiate the encoder state
@@ -1481,7 +1560,22 @@ xmlAllocOutputBufferInternal(xmlCharEncodingHandlerPtr encoder) {
  */
 void
 xmlFreeParserInputBuffer(xmlParserInputBufferPtr in) {
-    if (in == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1040]) {
+      if ((in == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1040\n");
+      else
+        fprintf(stderr, "reached bug index 1040\n");
+    }
+    if ((!FIXREVERTER[1040] && (in == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     if (in->raw) {
         xmlBufFree(in->raw);
@@ -1517,8 +1611,23 @@ xmlOutputBufferClose(xmlOutputBufferPtr out)
 {
     int ret;
 
-    if (out == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1041]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1041\n");
+      else
+        fprintf(stderr, "reached bug index 1041\n");
+    }
+    if ((!FIXREVERTER[1041] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (out->writecallback != NULL)
         xmlOutputBufferFlush(out);
@@ -1526,12 +1635,30 @@ xmlOutputBufferClose(xmlOutputBufferPtr out)
     if (out->closecallback != NULL) {
         int code = out->closecallback(out->context);
 
-        if ((code != XML_ERR_OK) && (out->error == XML_ERR_OK)) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1042]) {
+          fprintf(stderr, "reached bug index 1042\n");
+        }
+        if ((FIXREVERTER[1042] && (code != XML_ERR_OK )) || (!FIXREVERTER[1042] && (code != XML_ERR_OK && out -> error == XML_ERR_OK ))
+        #else
+        if (code != XML_ERR_OK 
+        #endif
+        ) {
+          
+        #ifdef FRCOV
+          if (!(out -> error == XML_ERR_OK ))
+            fprintf(stderr, "triggered bug index 1042\n");
+          #endif
+        
             if (code < 0)
                 out->error = XML_IO_UNKNOWN;
             else
                 out->error = code;
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
 
     if (out->error != XML_ERR_OK)
@@ -1837,7 +1964,22 @@ xmlOutputBufferCreateBuffer(xmlBufferPtr buffer,
                             xmlCharEncodingHandlerPtr encoder) {
     xmlOutputBufferPtr ret;
 
-    if (buffer == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1053]) {
+      if ((buffer == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1053\n");
+      else
+        fprintf(stderr, "reached bug index 1053\n");
+    }
+    if ((!FIXREVERTER[1053] && (buffer == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = xmlOutputBufferCreateIO(xmlBufferWrite, NULL, (void *) buffer,
                                   encoder);
@@ -1958,11 +2100,41 @@ xmlNewInputBufferMemory(const void *mem, size_t size, int flags,
     char *copy = NULL;
 
     if ((flags & XML_INPUT_BUF_STATIC) == 0) {
-        if (size + 1 == 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1057]) {
+          if ((size + 1 == 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1057\n");
+          else
+            fprintf(stderr, "reached bug index 1057\n");
+        }
+        if ((!FIXREVERTER[1057] && (size + 1 == 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(NULL);
+            #ifdef FRCOV
+            }
+            #endif
         copy = xmlMalloc(size + 1);
-        if (copy == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1058]) {
+          if ((copy == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1058\n");
+          else
+            fprintf(stderr, "reached bug index 1058\n");
+        }
+        if ((!FIXREVERTER[1058] && (copy == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(NULL);
+            #ifdef FRCOV
+            }
+            #endif
         memcpy(copy, mem, size);
         copy[size] = 0;
 
@@ -1970,17 +2142,47 @@ xmlNewInputBufferMemory(const void *mem, size_t size, int flags,
     }
 
     ret = xmlAllocParserInputBuffer(enc);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1059]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1059\n");
+      else
+        fprintf(stderr, "reached bug index 1059\n");
+    }
+    if ((!FIXREVERTER[1059] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(copy);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ctxt = xmlMalloc(sizeof(*ctxt));
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1060]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1060\n");
+      else
+        fprintf(stderr, "reached bug index 1060\n");
+    }
+    if ((!FIXREVERTER[1060] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFreeParserInputBuffer(ret);
         xmlFree(copy);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ctxt->mem = copy;
     ctxt->cur = mem;
@@ -2091,14 +2293,44 @@ xmlNewInputBufferString(const char *str, int flags) {
                                        XML_CHAR_ENCODING_NONE));
 
     ret = xmlAllocParserInputBuffer(XML_CHAR_ENCODING_NONE);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1063]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1063\n");
+      else
+        fprintf(stderr, "reached bug index 1063\n");
+    }
+    if ((!FIXREVERTER[1063] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ctxt = xmlMalloc(sizeof(*ctxt));
-    if (ctxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1064]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1064\n");
+      else
+        fprintf(stderr, "reached bug index 1064\n");
+    }
+    if ((!FIXREVERTER[1064] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFreeParserInputBuffer(ret);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     ctxt->str = str;
 
@@ -2189,7 +2421,22 @@ xmlOutputBufferCreateIO(xmlOutputWriteCallback   iowrite,
 	 xmlCharEncodingHandlerPtr encoder) {
     xmlOutputBufferPtr ret;
 
-    if (iowrite == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1067]) {
+      if ((iowrite == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1067\n");
+      else
+        fprintf(stderr, "reached bug index 1067\n");
+    }
+    if ((!FIXREVERTER[1067] && (iowrite == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     ret = xmlAllocOutputBufferInternal(encoder);
     if (ret != NULL) {
@@ -2262,7 +2509,22 @@ xmlParserInputBufferPush(xmlParserInputBufferPtr in,
     int nbchars = 0;
     int ret;
 
-    if (len < 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1068]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1068\n");
+      else
+        fprintf(stderr, "reached bug index 1068\n");
+    }
+    if ((!FIXREVERTER[1068] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if ((in == NULL) || (in->error)) return(-1);
     if (in->encoder != NULL) {
         /*
@@ -2270,10 +2532,25 @@ xmlParserInputBufferPush(xmlParserInputBufferPtr in,
 	 */
         if (in->raw == NULL) {
 	    in->raw = xmlBufCreate();
-            if (in->raw == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1069]) {
+              if ((in -> raw == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1069\n");
+              else
+                fprintf(stderr, "reached bug index 1069\n");
+            }
+            if ((!FIXREVERTER[1069] && (in -> raw == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 in->error = XML_ERR_NO_MEMORY;
                 return(-1);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	}
 	ret = xmlBufAdd(in->raw, (const xmlChar *) buf, len);
 	if (ret != 0) {
@@ -2285,8 +2562,23 @@ xmlParserInputBufferPush(xmlParserInputBufferPtr in,
 	 * convert as much as possible to the parser reading buffer.
 	 */
 	nbchars = xmlCharEncInput(in);
-	if (nbchars < 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1071]) {
+	  if ((nbchars < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1071\n");
+	  else
+	    fprintf(stderr, "reached bug index 1071\n");
+	}
+	if ((!FIXREVERTER[1071] && (nbchars < 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else {
 	nbchars = len;
         ret = xmlBufAdd(in->buffer, (xmlChar *) buf, nbchars);
@@ -2336,8 +2628,23 @@ xmlParserInputBufferGrow(xmlParserInputBufferPtr in, int len) {
         len = MINLEN;
 
     if (in->encoder == NULL) {
-        if (in->readcallback == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1074]) {
+          if ((in -> readcallback == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1074\n");
+          else
+            fprintf(stderr, "reached bug index 1074\n");
+        }
+        if ((!FIXREVERTER[1074] && (in -> readcallback == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(0);
+            #ifdef FRCOV
+            }
+            #endif
         buf = in->buffer;
     } else {
         if (in->raw == NULL) {
@@ -2356,15 +2663,45 @@ xmlParserInputBufferGrow(xmlParserInputBufferPtr in, int len) {
         }
 
 	res = in->readcallback(in->context, (char *)xmlBufEnd(buf), len);
-	if (res <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1075]) {
+	  if ((res <= 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 1075\n");
+	  else
+	    fprintf(stderr, "reached bug index 1075\n");
+	}
+	if ((!FIXREVERTER[1075] && (res <= 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    in->readcallback = endOfInput;
-        if (res < 0) {
+	    #ifdef FRCOV
+	    }
+	    #endif
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1076]) {
+          if ((res < 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1076\n");
+          else
+            fprintf(stderr, "reached bug index 1076\n");
+        }
+        if ((!FIXREVERTER[1076] && (res < 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             if (res == -1)
                 in->error = XML_IO_UNKNOWN;
             else
                 in->error = -res;
             return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
 
         if (xmlBufAddLen(buf, res) < 0) {
             in->error = XML_ERR_NO_MEMORY;
@@ -2384,8 +2721,23 @@ xmlParserInputBufferGrow(xmlParserInputBufferPtr in, int len) {
 
     if (in->encoder != NULL) {
 	res = xmlCharEncInput(in);
-	if (res < 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1077]) {
+	  if ((res < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1077\n");
+	  else
+	    fprintf(stderr, "reached bug index 1077\n");
+	}
+	if ((!FIXREVERTER[1077] && (res < 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     return(res);
 }
@@ -2430,13 +2782,43 @@ xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf) {
     int chunk;       /* number of byte current processed from buf */
 
     if ((out == NULL) || (out->error)) return(-1);
-    if (len < 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1078]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1078\n");
+      else
+        fprintf(stderr, "reached bug index 1078\n");
+    }
+    if ((!FIXREVERTER[1078] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (out->error) return(-1);
 
     do {
 	chunk = len;
-	if (chunk > 4 * MINLEN)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1079]) {
+	  if ((chunk > 4 * 4000 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1079\n");
+	  else
+	    fprintf(stderr, "reached bug index 1079\n");
+	}
+	if ((!FIXREVERTER[1079] && (chunk > 4 * 4000 ))
+	#else
+	if (0
+	#endif
+	)
 	    chunk = 4 * MINLEN;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	/*
 	 * first handle encoding stuff.
@@ -2447,16 +2829,46 @@ xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf) {
 	     */
 	    if (out->conv == NULL) {
 		out->conv = xmlBufCreate();
-                if (out->conv == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1080]) {
+                  if ((out -> conv == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1080\n");
+                  else
+                    fprintf(stderr, "reached bug index 1080\n");
+                }
+                if ((!FIXREVERTER[1080] && (out -> conv == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     out->error = XML_ERR_NO_MEMORY;
                     return(-1);
                 }
+                #ifdef FRCOV
+                }
+                #endif
 	    }
 	    ret = xmlBufAdd(out->buffer, (const xmlChar *) buf, chunk);
-	    if (ret != 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1081]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1081\n");
+	      else
+	        fprintf(stderr, "reached bug index 1081\n");
+	    }
+	    if ((!FIXREVERTER[1081] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 out->error = XML_ERR_NO_MEMORY;
 	        return(-1);
             }
+            #ifdef FRCOV
+            }
+            #endif
 
 	    if ((xmlBufUse(out->buffer) < MINLEN) && (chunk == len))
 		goto done;
@@ -2465,18 +2877,48 @@ xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf) {
 	     * convert as much as possible to the parser reading buffer.
 	     */
 	    ret = xmlCharEncOutput(out, 0);
-	    if (ret < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1082]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1082\n");
+	      else
+	        fprintf(stderr, "reached bug index 1082\n");
+	    }
+	    if ((!FIXREVERTER[1082] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
+		#ifdef FRCOV
+		}
+		#endif
             if (out->writecallback)
 	        nbchars = xmlBufUse(out->conv);
             else
                 nbchars = ret >= 0 ? ret : 0;
 	} else {
 	    ret = xmlBufAdd(out->buffer, (const xmlChar *) buf, chunk);
-	    if (ret != 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1083]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1083\n");
+	      else
+	        fprintf(stderr, "reached bug index 1083\n");
+	    }
+	    if ((!FIXREVERTER[1083] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
                 out->error = XML_ERR_NO_MEMORY;
 	        return(-1);
             }
+            #ifdef FRCOV
+            }
+            #endif
             if (out->writecallback)
 	        nbchars = xmlBufUse(out->buffer);
             else
@@ -2545,7 +2987,21 @@ xmlEscapeContent(unsigned char* out, int *outlen,
 
     inend = in + (*inlen);
 
-    while ((in < inend) && (out < outend)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1084])
+      fprintf(stderr, "reached bug index 1084\n");
+    while ((FIXREVERTER[1084] && (in < inend )) || (!FIXREVERTER[1084] && (in < inend && out < outend ))
+    #else
+    while (in < inend 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(out < outend ))
+        fprintf(stderr, "triggered bug index 1084\n");
+      #endif
+    
 	if (*in == '<') {
 	    if (outend - out < 4) break;
 	    *out++ = '&';
@@ -2577,6 +3033,9 @@ xmlEscapeContent(unsigned char* out, int *outlen,
 	}
 	++in;
     }
+    #ifdef FRCOV
+    }
+    #endif
     *outlen = out - outstart;
     *inlen = in - base;
     return(0);
@@ -2612,9 +3071,39 @@ xmlOutputBufferWriteEscape(xmlOutputBufferPtr out, const xmlChar *str,
         (out->buffer == NULL))
         return(-1);
     len = strlen((const char *)str);
-    if (len < 0) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1085]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1085\n");
+      else
+        fprintf(stderr, "reached bug index 1085\n");
+    }
+    if ((!FIXREVERTER[1085] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     if (out->error) return(-1);
-    if (escaping == NULL) escaping = xmlEscapeContent;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1086]) {
+      if ((escaping == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1086\n");
+      else
+        fprintf(stderr, "reached bug index 1086\n");
+    }
+    if ((!FIXREVERTER[1086] && (escaping == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) escaping = xmlEscapeContent;
+    #ifdef FRCOV
+    }
+    #endif
 
     do {
         oldwritten = written;
@@ -2629,7 +3118,19 @@ xmlOutputBufferWriteEscape(xmlOutputBufferPtr out, const xmlChar *str,
 	 * make sure we have enough room to save first, if this is
 	 * not the case force a flush, but make sure we stay in the loop
 	 */
-	if (chunk < 40) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1087]) {
+	  if ((chunk < 40 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1087\n");
+	  else
+	    fprintf(stderr, "reached bug index 1087\n");
+	}
+	if ((!FIXREVERTER[1087] && (chunk < 40 ))
+	#else
+	if (0
+	#endif
+	) {
 	    if (xmlBufGrow(out->buffer, 100) < 0) {
                 out->error = XML_ERR_NO_MEMORY;
 	        return(-1);
@@ -2637,6 +3138,9 @@ xmlOutputBufferWriteEscape(xmlOutputBufferPtr out, const xmlChar *str,
             oldwritten = -1;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	/*
 	 * first handle encoding stuff.
@@ -2647,17 +3151,47 @@ xmlOutputBufferWriteEscape(xmlOutputBufferPtr out, const xmlChar *str,
 	     */
 	    if (out->conv == NULL) {
 		out->conv = xmlBufCreate();
-                if (out->conv == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[1088]) {
+                  if ((out -> conv == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 1088\n");
+                  else
+                    fprintf(stderr, "reached bug index 1088\n");
+                }
+                if ((!FIXREVERTER[1088] && (out -> conv == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     out->error = XML_ERR_NO_MEMORY;
                     return(-1);
                 }
+                #ifdef FRCOV
+                }
+                #endif
 	    }
 	    ret = escaping(xmlBufEnd(out->buffer) ,
 	                   &chunk, str, &cons);
-            if (ret < 0) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1089]) {
+              if ((ret < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1089\n");
+              else
+                fprintf(stderr, "reached bug index 1089\n");
+            }
+            if ((!FIXREVERTER[1089] && (ret < 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 out->error = XML_ERR_NO_MEMORY;
                 return(-1);
             }
+            #ifdef FRCOV
+            }
+            #endif
             xmlBufAddLen(out->buffer, chunk);
 
 	    if ((xmlBufUse(out->buffer) < MINLEN) && (cons == len))
@@ -2667,18 +3201,48 @@ xmlOutputBufferWriteEscape(xmlOutputBufferPtr out, const xmlChar *str,
 	     * convert as much as possible to the output buffer.
 	     */
 	    ret = xmlCharEncOutput(out, 0);
-	    if (ret < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1090]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1090\n");
+	      else
+	        fprintf(stderr, "reached bug index 1090\n");
+	    }
+	    if ((!FIXREVERTER[1090] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
+		#ifdef FRCOV
+		}
+		#endif
             if (out->writecallback)
 	        nbchars = xmlBufUse(out->conv);
             else
                 nbchars = ret >= 0 ? ret : 0;
 	} else {
 	    ret = escaping(xmlBufEnd(out->buffer), &chunk, str, &cons);
-            if (ret < 0) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[1091]) {
+              if ((ret < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 1091\n");
+              else
+                fprintf(stderr, "reached bug index 1091\n");
+            }
+            if ((!FIXREVERTER[1091] && (ret < 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 out->error = XML_ERR_NO_MEMORY;
                 return(-1);
             }
+            #ifdef FRCOV
+            }
+            #endif
             xmlBufAddLen(out->buffer, chunk);
             if (out->writecallback)
 	        nbchars = xmlBufUse(out->buffer);
@@ -2747,12 +3311,42 @@ xmlOutputBufferWriteString(xmlOutputBufferPtr out, const char *str) {
     int len;
 
     if ((out == NULL) || (out->error)) return(-1);
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1092]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1092\n");
+      else
+        fprintf(stderr, "reached bug index 1092\n");
+    }
+    if ((!FIXREVERTER[1092] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     len = strlen(str);
 
-    if (len > 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1093]) {
+      if ((len > 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1093\n");
+      else
+        fprintf(stderr, "reached bug index 1093\n");
+    }
+    if ((!FIXREVERTER[1093] && (len > 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(xmlOutputBufferWrite(out, len, str));
+	#ifdef FRCOV
+	}
+	#endif
     return(len);
 }
 
@@ -2822,7 +3416,22 @@ xmlOutputBufferFlush(xmlOutputBufferPtr out) {
     /*
      * first handle encoding stuff.
      */
-    if ((out->conv != NULL) && (out->encoder != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1095]) {
+      fprintf(stderr, "reached bug index 1095\n");
+    }
+    if ((FIXREVERTER[1095] && (out -> conv != (void *) 0 )) || (!FIXREVERTER[1095] && (out -> conv != (void *) 0 && out -> encoder != (void *) 0 ))
+    #else
+    if (out -> conv != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(out -> encoder != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1095\n");
+      #endif
+    
 	/*
 	 * convert as much as possible to the parser output buffer.
 	 */
@@ -2832,6 +3441,9 @@ xmlOutputBufferFlush(xmlOutputBufferPtr out) {
 		return(-1);
 	} while (nbchars);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * second flush the stuff to the I/O channel
diff --git a/xmlcatalog.c b/xmlcatalog.c
index 588802b4..e0821667 100644
--- a/xmlcatalog.c
+++ b/xmlcatalog.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[4815];
+#endif
 /*
  * xmlcatalog.c : a small utility program to handle XML catalogs
  *
diff --git a/xmllint.c b/xmllint.c
index 3a7a8a00..9b8a3111 100644
--- a/xmllint.c
+++ b/xmllint.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+short FIXREVERTER[4815];
+#endif
 /*
  * xmllint.c : a small tester program for XML input.
  *
diff --git a/xmlreader.c b/xmlreader.c
index 2de91bf9..bab3abc6 100644
--- a/xmlreader.c
+++ b/xmlreader.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xmlreader.c: implements the xmlTextReader streaming node API
  *
@@ -194,8 +198,23 @@ static xmlChar *
 readerStrdup(xmlTextReaderPtr reader, const xmlChar *string) {
     xmlChar *copy;
 
-    if (string == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1802]) {
+      if ((string == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1802\n");
+      else
+        fprintf(stderr, "reached bug index 1802\n");
+    }
+    if ((!FIXREVERTER[1802] && (string == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     copy = xmlStrdup(string);
     if (copy == NULL)
@@ -627,13 +646,31 @@ xmlTextReaderStartElement(void *ctx, const xmlChar *fullname,
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlTextReaderPtr reader = ctxt->_private;
 
-    if ((reader != NULL) && (reader->startElement != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1812]) {
+      fprintf(stderr, "reached bug index 1812\n");
+    }
+    if ((FIXREVERTER[1812] && (reader != (void *) 0 )) || (!FIXREVERTER[1812] && (reader != (void *) 0 && reader -> startElement != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> startElement != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1812\n");
+      #endif
+    
 	reader->startElement(ctx, fullname, atts);
 	if ((ctxt->node != NULL) && (ctxt->input != NULL) &&
 	    (ctxt->input->cur != NULL) && (ctxt->input->cur[0] == '/') &&
 	    (ctxt->input->cur[1] == '>'))
 	    ctxt->node->extra = NODE_IS_EMPTY;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (reader != NULL)
 	reader->state = XML_TEXTREADER_ELEMENT;
 }
@@ -650,9 +687,27 @@ xmlTextReaderEndElement(void *ctx, const xmlChar *fullname) {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlTextReaderPtr reader = ctxt->_private;
 
-    if ((reader != NULL) && (reader->endElement != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1813]) {
+      fprintf(stderr, "reached bug index 1813\n");
+    }
+    if ((FIXREVERTER[1813] && (reader != (void *) 0 )) || (!FIXREVERTER[1813] && (reader != (void *) 0 && reader -> endElement != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> endElement != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1813\n");
+      #endif
+    
 	reader->endElement(ctx, fullname);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 /**
@@ -684,7 +739,22 @@ xmlTextReaderStartElementNs(void *ctx,
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlTextReaderPtr reader = ctxt->_private;
 
-    if ((reader != NULL) && (reader->startElementNs != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1814]) {
+      fprintf(stderr, "reached bug index 1814\n");
+    }
+    if ((FIXREVERTER[1814] && (reader != (void *) 0 )) || (!FIXREVERTER[1814] && (reader != (void *) 0 && reader -> startElementNs != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> startElementNs != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1814\n");
+      #endif
+    
 	reader->startElementNs(ctx, localname, prefix, URI, nb_namespaces,
 	                       namespaces, nb_attributes, nb_defaulted,
 			       attributes);
@@ -693,6 +763,9 @@ xmlTextReaderStartElementNs(void *ctx,
 	    (ctxt->input->cur[1] == '>'))
 	    ctxt->node->extra = NODE_IS_EMPTY;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (reader != NULL)
 	reader->state = XML_TEXTREADER_ELEMENT;
 }
@@ -715,9 +788,27 @@ xmlTextReaderEndElementNs(void *ctx,
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlTextReaderPtr reader = ctxt->_private;
 
-    if ((reader != NULL) && (reader->endElementNs != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1815]) {
+      fprintf(stderr, "reached bug index 1815\n");
+    }
+    if ((FIXREVERTER[1815] && (reader != (void *) 0 )) || (!FIXREVERTER[1815] && (reader != (void *) 0 && reader -> endElementNs != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> endElementNs != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1815\n");
+      #endif
+    
 	reader->endElementNs(ctx, localname, prefix, URI);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 
@@ -735,9 +826,27 @@ xmlTextReaderCharacters(void *ctx, const xmlChar *ch, int len)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlTextReaderPtr reader = ctxt->_private;
 
-    if ((reader != NULL) && (reader->characters != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1816]) {
+      fprintf(stderr, "reached bug index 1816\n");
+    }
+    if ((FIXREVERTER[1816] && (reader != (void *) 0 )) || (!FIXREVERTER[1816] && (reader != (void *) 0 && reader -> characters != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> characters != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1816\n");
+      #endif
+    
 	reader->characters(ctx, ch, len);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 /**
@@ -754,9 +863,27 @@ xmlTextReaderCDataBlock(void *ctx, const xmlChar *ch, int len)
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlTextReaderPtr reader = ctxt->_private;
 
-    if ((reader != NULL) && (reader->cdataBlock != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1817]) {
+      fprintf(stderr, "reached bug index 1817\n");
+    }
+    if ((FIXREVERTER[1817] && (reader != (void *) 0 )) || (!FIXREVERTER[1817] && (reader != (void *) 0 && reader -> cdataBlock != (void *) 0 ))
+    #else
+    if (reader != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(reader -> cdataBlock != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 1817\n");
+      #endif
+    
 	reader->cdataBlock(ctx, ch, len);
     }
+    #ifdef FRCOV
+    }
+    #endif
 }
 
 /**
@@ -2547,18 +2674,63 @@ xmlTextReaderLookupNamespace(xmlTextReaderPtr reader, const xmlChar *prefix) {
     xmlNsPtr ns;
     int result;
 
-    if (reader == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1875]) {
+      if ((reader == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1875\n");
+      else
+        fprintf(stderr, "reached bug index 1875\n");
+    }
+    if ((!FIXREVERTER[1875] && (reader == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (reader->node == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1876]) {
+      if ((reader -> node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1876\n");
+      else
+        fprintf(stderr, "reached bug index 1876\n");
+    }
+    if ((!FIXREVERTER[1876] && (reader -> node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     result = xmlSearchNsSafe(reader->node, prefix, &ns);
     if (result < 0) {
         xmlTextReaderErrMemory(reader);
         return(NULL);
     }
-    if (ns == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1878]) {
+      if ((ns == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1878\n");
+      else
+        fprintf(stderr, "reached bug index 1878\n");
+    }
+    if ((!FIXREVERTER[1878] && (ns == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(readerStrdup(reader, ns->href));
 }
 
diff --git a/xmlregexp.c b/xmlregexp.c
index 31e3d1a6..159849bb 100644
--- a/xmlregexp.c
+++ b/xmlregexp.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * regexp.c: generic and extensible Regular Expression engine
  *
@@ -360,8 +364,23 @@ static int xmlRegCheckCharacterRange(xmlRegAtomType type, int codepoint,
 static void
 xmlRegexpErrMemory(xmlRegParserCtxtPtr ctxt)
 {
-    if (ctxt != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1103]) {
+      if ((ctxt != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1103\n");
+      else
+        fprintf(stderr, "reached bug index 1103\n");
+    }
+    if ((!FIXREVERTER[1103] && (ctxt != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         ctxt->error = XML_ERR_NO_MEMORY;
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlRaiseMemoryError(NULL, NULL, NULL, XML_FROM_REGEXP, NULL);
 }
@@ -440,10 +459,25 @@ xmlRegEpxFromParse(xmlRegParserCtxtPtr ctxt) {
     xmlRegexpPtr ret;
 
     ret = (xmlRegexpPtr) xmlMalloc(sizeof(xmlRegexp));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1104]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1104\n");
+      else
+        fprintf(stderr, "reached bug index 1104\n");
+    }
+    if ((!FIXREVERTER[1104] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlRegexp));
     ret->string = ctxt->string;
     ret->nbStates = ctxt->nbStates;
@@ -485,11 +519,26 @@ xmlRegEpxFromParse(xmlRegParserCtxtPtr ctxt) {
 	 */
 
 	stateRemap = xmlMalloc(ret->nbStates * sizeof(int));
-	if (stateRemap == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1105]) {
+	  if ((stateRemap == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1105\n");
+	  else
+	    fprintf(stderr, "reached bug index 1105\n");
+	}
+	if ((!FIXREVERTER[1105] && (stateRemap == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	for (i = 0;i < ret->nbStates;i++) {
 	    if (ret->states[i] != NULL) {
 		stateRemap[i] = nbstates;
@@ -579,16 +628,46 @@ xmlRegEpxFromParse(xmlRegParserCtxtPtr ctxt) {
 
 	    for (j = 0;j < state->nbTrans;j++) {
 		trans = &(state->trans[j]);
-		if ((trans->to < 0) || (trans->atom == NULL))
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1106]) {
+		  if ((trans -> to < 0 || trans -> atom == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1106\n");
+		  else
+		    fprintf(stderr, "reached bug index 1106\n");
+		}
+		if ((!FIXREVERTER[1106] && (trans -> to < 0 || trans -> atom == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    continue;
+		    #ifdef FRCOV
+		    }
+		    #endif
                 atomno = stringRemap[trans->atom->no];
 		if ((trans->atom->data != NULL) && (transdata == NULL)) {
 		    transdata = (void **) xmlRegCalloc2(nbstates, nbatoms,
 			                                sizeof(void *));
-		    if (transdata == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1107]) {
+		      if ((transdata == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1107\n");
+		      else
+		        fprintf(stderr, "reached bug index 1107\n");
+		    }
+		    if ((!FIXREVERTER[1107] && (transdata == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlRegexpErrMemory(ctxt);
 			break;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		}
 		targetno = stateRemap[trans->to];
 		/*
@@ -674,15 +753,45 @@ xmlRegNewParserCtxt(const xmlChar *string) {
     xmlRegParserCtxtPtr ret;
 
     ret = (xmlRegParserCtxtPtr) xmlMalloc(sizeof(xmlRegParserCtxt));
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1108]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1108\n");
+      else
+        fprintf(stderr, "reached bug index 1108\n");
+    }
+    if ((!FIXREVERTER[1108] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(ret, 0, sizeof(xmlRegParserCtxt));
     if (string != NULL) {
 	ret->string = xmlStrdup(string);
-        if (ret->string == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1109]) {
+          if ((ret -> string == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1109\n");
+          else
+            fprintf(stderr, "reached bug index 1109\n");
+        }
+        if ((!FIXREVERTER[1109] && (ret -> string == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFree(ret);
             return(NULL);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     ret->cur = ret->string;
     ret->neg = 0;
@@ -710,10 +819,25 @@ xmlRegNewRange(xmlRegParserCtxtPtr ctxt,
     xmlRegRangePtr ret;
 
     ret = (xmlRegRangePtr) xmlMalloc(sizeof(xmlRegRange));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1110]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1110\n");
+      else
+        fprintf(stderr, "reached bug index 1110\n");
+    }
+    if ((!FIXREVERTER[1110] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->neg = neg;
     ret->type = type;
     ret->start = start;
@@ -729,8 +853,23 @@ xmlRegNewRange(xmlRegParserCtxtPtr ctxt,
  */
 static void
 xmlRegFreeRange(xmlRegRangePtr range) {
-    if (range == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1111]) {
+      if ((range == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1111\n");
+      else
+        fprintf(stderr, "reached bug index 1111\n");
+    }
+    if ((!FIXREVERTER[1111] && (range == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (range->blockName != NULL)
 	xmlFree(range->blockName);
@@ -749,20 +888,65 @@ static xmlRegRangePtr
 xmlRegCopyRange(xmlRegParserCtxtPtr ctxt, xmlRegRangePtr range) {
     xmlRegRangePtr ret;
 
-    if (range == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1112]) {
+      if ((range == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1112\n");
+      else
+        fprintf(stderr, "reached bug index 1112\n");
+    }
+    if ((!FIXREVERTER[1112] && (range == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = xmlRegNewRange(ctxt, range->neg, range->type, range->start,
                          range->end);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1113]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1113\n");
+      else
+        fprintf(stderr, "reached bug index 1113\n");
+    }
+    if ((!FIXREVERTER[1113] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (range->blockName != NULL) {
 	ret->blockName = xmlStrdup(range->blockName);
-	if (ret->blockName == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1114]) {
+	  if ((ret -> blockName == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1114\n");
+	  else
+	    fprintf(stderr, "reached bug index 1114\n");
+	}
+	if ((!FIXREVERTER[1114] && (ret -> blockName == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    xmlRegFreeRange(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     return(ret);
 }
@@ -781,10 +965,25 @@ xmlRegNewAtom(xmlRegParserCtxtPtr ctxt, xmlRegAtomType type) {
     xmlRegAtomPtr ret;
 
     ret = (xmlRegAtomPtr) xmlMalloc(sizeof(xmlRegAtom));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1115]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1115\n");
+      else
+        fprintf(stderr, "reached bug index 1115\n");
+    }
+    if ((!FIXREVERTER[1115] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlRegAtom));
     ret->type = type;
     ret->quant = XML_REGEXP_QUANT_ONCE;
@@ -803,8 +1002,23 @@ static void
 xmlRegFreeAtom(xmlRegAtomPtr atom) {
     int i;
 
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1116]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1116\n");
+      else
+        fprintf(stderr, "reached bug index 1116\n");
+    }
+    if ((!FIXREVERTER[1116] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     for (i = 0;i < atom->nbRanges;i++)
 	xmlRegFreeRange(atom->ranges[i]);
@@ -833,10 +1047,25 @@ xmlRegCopyAtom(xmlRegParserCtxtPtr ctxt, xmlRegAtomPtr atom) {
     xmlRegAtomPtr ret;
 
     ret = (xmlRegAtomPtr) xmlMalloc(sizeof(xmlRegAtom));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1117]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1117\n");
+      else
+        fprintf(stderr, "reached bug index 1117\n");
+    }
+    if ((!FIXREVERTER[1117] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlRegAtom));
     ret->type = atom->type;
     ret->quant = atom->quant;
@@ -847,10 +1076,25 @@ xmlRegCopyAtom(xmlRegParserCtxtPtr ctxt, xmlRegAtomPtr atom) {
 
         ret->ranges = (xmlRegRangePtr *) xmlMalloc(sizeof(xmlRegRangePtr) *
 	                                           atom->nbRanges);
-	if (ret->ranges == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1118]) {
+	  if ((ret -> ranges == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1118\n");
+	  else
+	    fprintf(stderr, "reached bug index 1118\n");
+	}
+	if ((!FIXREVERTER[1118] && (ret -> ranges == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    goto error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	for (i = 0;i < atom->nbRanges;i++) {
 	    ret->ranges[i] = xmlRegCopyRange(ctxt, atom->ranges[i]);
 	    if (ret->ranges[i] == NULL)
@@ -870,10 +1114,25 @@ xmlRegNewState(xmlRegParserCtxtPtr ctxt) {
     xmlRegStatePtr ret;
 
     ret = (xmlRegStatePtr) xmlMalloc(sizeof(xmlRegState));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1119]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1119\n");
+      else
+        fprintf(stderr, "reached bug index 1119\n");
+    }
+    if ((!FIXREVERTER[1119] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlRegexpErrMemory(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlRegState));
     ret->type = XML_REGEXP_TRANS_STATE;
     ret->mark = XML_REGEXP_MARK_NORMAL;
@@ -888,8 +1147,23 @@ xmlRegNewState(xmlRegParserCtxtPtr ctxt) {
  */
 static void
 xmlRegFreeState(xmlRegStatePtr state) {
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1120]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1120\n");
+      else
+        fprintf(stderr, "reached bug index 1120\n");
+    }
+    if ((!FIXREVERTER[1120] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (state->trans != NULL)
 	xmlFree(state->trans);
@@ -907,8 +1181,23 @@ xmlRegFreeState(xmlRegStatePtr state) {
 static void
 xmlRegFreeParserCtxt(xmlRegParserCtxtPtr ctxt) {
     int i;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1121]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1121\n");
+      else
+        fprintf(stderr, "reached bug index 1121\n");
+    }
+    if ((!FIXREVERTER[1121] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (ctxt->string != NULL)
 	xmlFree(ctxt->string);
@@ -1182,26 +1471,71 @@ xmlRegAtomAddRange(xmlRegParserCtxtPtr ctxt, xmlRegAtomPtr atom,
 	atom->maxRanges = 4;
 	atom->ranges = (xmlRegRangePtr *) xmlMalloc(atom->maxRanges *
 		                             sizeof(xmlRegRangePtr));
-	if (atom->ranges == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1127]) {
+	  if ((atom -> ranges == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1127\n");
+	  else
+	    fprintf(stderr, "reached bug index 1127\n");
+	}
+	if ((!FIXREVERTER[1127] && (atom -> ranges == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    atom->maxRanges = 0;
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (atom->nbRanges >= atom->maxRanges) {
 	xmlRegRangePtr *tmp;
 	atom->maxRanges *= 2;
 	tmp = (xmlRegRangePtr *) xmlRealloc(atom->ranges, atom->maxRanges *
 		                             sizeof(xmlRegRangePtr));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1128]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1128\n");
+	  else
+	    fprintf(stderr, "reached bug index 1128\n");
+	}
+	if ((!FIXREVERTER[1128] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    atom->maxRanges /= 2;
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	atom->ranges = tmp;
     }
     range = xmlRegNewRange(ctxt, neg, type, start, end);
-    if (range == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1129]) {
+      if ((range == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1129\n");
+      else
+        fprintf(stderr, "reached bug index 1129\n");
+    }
+    if ((!FIXREVERTER[1129] && (range == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     range->blockName = blockName;
     atom->ranges[atom->nbRanges++] = range;
 
@@ -1214,21 +1548,51 @@ xmlRegGetCounter(xmlRegParserCtxtPtr ctxt) {
 	ctxt->maxCounters = 4;
 	ctxt->counters = (xmlRegCounter *) xmlMalloc(ctxt->maxCounters *
 		                             sizeof(xmlRegCounter));
-	if (ctxt->counters == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1130]) {
+	  if ((ctxt -> counters == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1130\n");
+	  else
+	    fprintf(stderr, "reached bug index 1130\n");
+	}
+	if ((!FIXREVERTER[1130] && (ctxt -> counters == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    ctxt->maxCounters = 0;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (ctxt->nbCounters >= ctxt->maxCounters) {
 	xmlRegCounter *tmp;
 	ctxt->maxCounters *= 2;
 	tmp = (xmlRegCounter *) xmlRealloc(ctxt->counters, ctxt->maxCounters *
 		                           sizeof(xmlRegCounter));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1131]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1131\n");
+	  else
+	    fprintf(stderr, "reached bug index 1131\n");
+	}
+	if ((!FIXREVERTER[1131] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    ctxt->maxCounters /= 2;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->counters = tmp;
     }
     ctxt->counters[ctxt->nbCounters].min = -1;
@@ -1247,10 +1611,25 @@ xmlRegAtomPush(xmlRegParserCtxtPtr ctxt, xmlRegAtomPtr atom) {
 	xmlRegAtomPtr *tmp;
 
 	tmp = xmlRealloc(ctxt->atoms, newSize * sizeof(xmlRegAtomPtr));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1132]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1132\n");
+	  else
+	    fprintf(stderr, "reached bug index 1132\n");
+	}
+	if ((!FIXREVERTER[1132] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->atoms = tmp;
         ctxt->maxAtoms = newSize;
     }
@@ -1266,21 +1645,51 @@ xmlRegStateAddTransTo(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr target,
 	target->maxTransTo = 8;
 	target->transTo = (int *) xmlMalloc(target->maxTransTo *
 		                             sizeof(int));
-	if (target->transTo == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1133]) {
+	  if ((target -> transTo == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1133\n");
+	  else
+	    fprintf(stderr, "reached bug index 1133\n");
+	}
+	if ((!FIXREVERTER[1133] && (target -> transTo == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    target->maxTransTo = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (target->nbTransTo >= target->maxTransTo) {
 	int *tmp;
 	target->maxTransTo *= 2;
 	tmp = (int *) xmlRealloc(target->transTo, target->maxTransTo *
 		                             sizeof(int));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1134]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1134\n");
+	  else
+	    fprintf(stderr, "reached bug index 1134\n");
+	}
+	if ((!FIXREVERTER[1134] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    target->maxTransTo /= 2;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	target->transTo = tmp;
     }
     target->transTo[target->nbTransTo] = from;
@@ -1322,21 +1731,51 @@ xmlRegStateAddTrans(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
 	state->maxTrans = 8;
 	state->trans = (xmlRegTrans *) xmlMalloc(state->maxTrans *
 		                             sizeof(xmlRegTrans));
-	if (state->trans == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1135]) {
+	  if ((state -> trans == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1135\n");
+	  else
+	    fprintf(stderr, "reached bug index 1135\n");
+	}
+	if ((!FIXREVERTER[1135] && (state -> trans == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    state->maxTrans = 0;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (state->nbTrans >= state->maxTrans) {
 	xmlRegTrans *tmp;
 	state->maxTrans *= 2;
 	tmp = (xmlRegTrans *) xmlRealloc(state->trans, state->maxTrans *
 		                             sizeof(xmlRegTrans));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1136]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1136\n");
+	  else
+	    fprintf(stderr, "reached bug index 1136\n");
+	}
+	if ((!FIXREVERTER[1136] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    state->maxTrans /= 2;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	state->trans = tmp;
     }
 
@@ -1358,17 +1797,47 @@ xmlRegStatePush(xmlRegParserCtxtPtr ctxt) {
 	xmlRegStatePtr *tmp;
 
 	tmp = xmlRealloc(ctxt->states, newSize * sizeof(tmp[0]));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1137]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1137\n");
+	  else
+	    fprintf(stderr, "reached bug index 1137\n");
+	}
+	if ((!FIXREVERTER[1137] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegexpErrMemory(ctxt);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->states = tmp;
 	ctxt->maxStates = newSize;
     }
 
     state = xmlRegNewState(ctxt);
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1138]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1138\n");
+      else
+        fprintf(stderr, "reached bug index 1138\n");
+    }
+    if ((!FIXREVERTER[1138] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     state->no = ctxt->nbStates;
     ctxt->states[ctxt->nbStates++] = state;
@@ -1390,8 +1859,23 @@ xmlFAGenerateAllTransition(xmlRegParserCtxtPtr ctxt,
 			   int lax) {
     if (to == NULL) {
 	to = xmlRegStatePush(ctxt);
-        if (to == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1139]) {
+          if ((to == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1139\n");
+          else
+            fprintf(stderr, "reached bug index 1139\n");
+        }
+        if ((!FIXREVERTER[1139] && (to == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(-1);
+            #ifdef FRCOV
+            }
+            #endif
 	ctxt->state = to;
     }
     if (lax)
@@ -1413,8 +1897,23 @@ xmlFAGenerateEpsilonTransition(xmlRegParserCtxtPtr ctxt,
 			       xmlRegStatePtr from, xmlRegStatePtr to) {
     if (to == NULL) {
 	to = xmlRegStatePush(ctxt);
-        if (to == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1140]) {
+          if ((to == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1140\n");
+          else
+            fprintf(stderr, "reached bug index 1140\n");
+        }
+        if ((!FIXREVERTER[1140] && (to == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(-1);
+            #ifdef FRCOV
+            }
+            #endif
 	ctxt->state = to;
     }
     xmlRegStateAddTrans(ctxt, from, NULL, to, -1, -1);
@@ -1434,8 +1933,23 @@ xmlFAGenerateCountedEpsilonTransition(xmlRegParserCtxtPtr ctxt,
 	    xmlRegStatePtr from, xmlRegStatePtr to, int counter) {
     if (to == NULL) {
 	to = xmlRegStatePush(ctxt);
-        if (to == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1141]) {
+          if ((to == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1141\n");
+          else
+            fprintf(stderr, "reached bug index 1141\n");
+        }
+        if ((!FIXREVERTER[1141] && (to == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(-1);
+            #ifdef FRCOV
+            }
+            #endif
 	ctxt->state = to;
     }
     xmlRegStateAddTrans(ctxt, from, NULL, to, counter, -1);
@@ -1455,8 +1969,23 @@ xmlFAGenerateCountedTransition(xmlRegParserCtxtPtr ctxt,
 	    xmlRegStatePtr from, xmlRegStatePtr to, int counter) {
     if (to == NULL) {
 	to = xmlRegStatePush(ctxt);
-        if (to == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1142]) {
+          if ((to == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1142\n");
+          else
+            fprintf(stderr, "reached bug index 1142\n");
+        }
+        if ((!FIXREVERTER[1142] && (to == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(-1);
+            #ifdef FRCOV
+            }
+            #endif
 	ctxt->state = to;
     }
     xmlRegStateAddTrans(ctxt, from, NULL, to, -1, counter);
@@ -1539,8 +2068,23 @@ xmlFAGenerateTransitions(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr from,
 		    newstate = to;
 		} else {
 		    newstate = xmlRegStatePush(ctxt);
-                    if (newstate == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1143]) {
+                      if ((newstate == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1143\n");
+                      else
+                        fprintf(stderr, "reached bug index 1143\n");
+                    }
+                    if ((!FIXREVERTER[1143] && (newstate == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         return(-1);
+                        #ifdef FRCOV
+                        }
+                        #endif
 		}
 
 		/*
@@ -1561,8 +2105,23 @@ xmlFAGenerateTransitions(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr from,
 		        case, I suppose this got optimized out before when
 			building the automata */
 		    copy = xmlRegCopyAtom(ctxt, atom);
-		    if (copy == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1144]) {
+		      if ((copy == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1144\n");
+		      else
+		        fprintf(stderr, "reached bug index 1144\n");
+		    }
+		    if ((!FIXREVERTER[1144] && (copy == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 		        return(-1);
+		        #ifdef FRCOV
+		        }
+		        #endif
 		    copy->quant = XML_REGEXP_QUANT_ONCE;
 		    copy->min = 0;
 		    copy->max = 0;
@@ -1574,8 +2133,23 @@ xmlFAGenerateTransitions(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr from,
                     }
 		    inter = ctxt->state;
 		    counter = xmlRegGetCounter(ctxt);
-                    if (counter < 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1145]) {
+                      if ((counter < 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1145\n");
+                      else
+                        fprintf(stderr, "reached bug index 1145\n");
+                    }
+                    if ((!FIXREVERTER[1145] && (counter < 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         return(-1);
+                        #ifdef FRCOV
+                        }
+                        #endif
 		    ctxt->counters[counter].min = atom->min - 1;
 		    ctxt->counters[counter].max = atom->max - 1;
 		    /* count the number of times we see it again */
@@ -1594,8 +2168,23 @@ xmlFAGenerateTransitions(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr from,
 		     * epsilon transition.
 		     */
 		    counter = xmlRegGetCounter(ctxt);
-                    if (counter < 0)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1146]) {
+                      if ((counter < 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1146\n");
+                      else
+                        fprintf(stderr, "reached bug index 1146\n");
+                    }
+                    if ((!FIXREVERTER[1146] && (counter < 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         return(-1);
+                        #ifdef FRCOV
+                        }
+                        #endif
 		    ctxt->counters[counter].min = atom->min - 1;
 		    ctxt->counters[counter].max = atom->max - 1;
 		    /* allow a way out based on the count */
@@ -1629,8 +2218,23 @@ xmlFAGenerateTransitions(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr from,
 	 */
 	if (to == NULL) {
 	    to = xmlRegStatePush(ctxt);
-	    if (to == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1147]) {
+	      if ((to == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1147\n");
+	      else
+	        fprintf(stderr, "reached bug index 1147\n");
+	    }
+	    if ((!FIXREVERTER[1147] && (to == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	xmlFAGenerateEpsilonTransition(ctxt, from, to);
 	ctxt->state = to;
@@ -1639,8 +2243,23 @@ xmlFAGenerateTransitions(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr from,
     }
     if (to == NULL) {
 	to = xmlRegStatePush(ctxt);
-	if (to == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1148]) {
+	  if ((to == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1148\n");
+	  else
+	    fprintf(stderr, "reached bug index 1148\n");
+	}
+	if ((!FIXREVERTER[1148] && (to == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     end = to;
     if ((atom->quant == XML_REGEXP_QUANT_MULT) ||
@@ -1653,8 +2272,23 @@ xmlFAGenerateTransitions(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr from,
         xmlRegStatePtr tmp;
 
 	tmp = xmlRegStatePush(ctxt);
-        if (tmp == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1149]) {
+          if ((tmp == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1149\n");
+          else
+            fprintf(stderr, "reached bug index 1149\n");
+        }
+        if ((!FIXREVERTER[1149] && (tmp == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	xmlFAGenerateEpsilonTransition(ctxt, tmp, to);
 	to = tmp;
     }
@@ -1709,11 +2343,41 @@ xmlFAReduceEpsilonTransitions(xmlRegParserCtxtPtr ctxt, int fromnr,
     xmlRegStatePtr to;
 
     from = ctxt->states[fromnr];
-    if (from == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1150]) {
+      if ((from == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1150\n");
+      else
+        fprintf(stderr, "reached bug index 1150\n");
+    }
+    if ((!FIXREVERTER[1150] && (from == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     to = ctxt->states[tonr];
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1151]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1151\n");
+      else
+        fprintf(stderr, "reached bug index 1151\n");
+    }
+    if ((!FIXREVERTER[1151] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((to->mark == XML_REGEXP_MARK_START) ||
 	(to->mark == XML_REGEXP_MARK_VISITED))
 	return;
@@ -1726,8 +2390,23 @@ xmlFAReduceEpsilonTransitions(xmlRegParserCtxtPtr ctxt, int fromnr,
         xmlRegTransPtr t1 = &to->trans[transnr];
         int tcounter;
 
-        if (t1->to < 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1152]) {
+          if ((t1 -> to < 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1152\n");
+          else
+            fprintf(stderr, "reached bug index 1152\n");
+        }
+        if ((!FIXREVERTER[1152] && (t1 -> to < 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
         if (t1->counter >= 0) {
             /* assert(counter < 0); */
             tcounter = t1->counter;
@@ -1769,8 +2448,23 @@ xmlFAFinishReduceEpsilonTransitions(xmlRegParserCtxtPtr ctxt, int tonr) {
     xmlRegStatePtr to;
 
     to = ctxt->states[tonr];
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1153]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1153\n");
+      else
+        fprintf(stderr, "reached bug index 1153\n");
+    }
+    if ((!FIXREVERTER[1153] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((to->mark == XML_REGEXP_MARK_START) ||
 	(to->mark == XML_REGEXP_MARK_NORMAL))
 	return;
@@ -1811,10 +2505,40 @@ xmlFAEliminateSimpleEpsilonTransitions(xmlRegParserCtxtPtr ctxt) {
 
     for (statenr = 0;statenr < ctxt->nbStates;statenr++) {
 	state = ctxt->states[statenr];
-	if (state == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1154]) {
+	  if ((state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1154\n");
+	  else
+	    fprintf(stderr, "reached bug index 1154\n");
+	}
+	if ((!FIXREVERTER[1154] && (state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
-	if (state->nbTrans != 1)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1155]) {
+	  if ((state -> nbTrans != 1 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1155\n");
+	  else
+	    fprintf(stderr, "reached bug index 1155\n");
+	}
+	if ((!FIXREVERTER[1155] && (state -> nbTrans != 1 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
        if (state->type == XML_REGEXP_UNREACH_STATE ||
            state->type == XML_REGEXP_FINAL_STATE)
 	    continue;
@@ -1863,7 +2587,22 @@ xmlFAEliminateEpsilonTransitions(xmlRegParserCtxtPtr ctxt) {
     xmlRegStatePtr state;
     int has_epsilon;
 
-    if (ctxt->states == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1156]) {
+      if ((ctxt -> states == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1156\n");
+      else
+        fprintf(stderr, "reached bug index 1156\n");
+    }
+    if ((!FIXREVERTER[1156] && (ctxt -> states == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Eliminate simple epsilon transition and the associated unreachable
@@ -1890,8 +2629,23 @@ xmlFAEliminateEpsilonTransitions(xmlRegParserCtxtPtr ctxt) {
      */
     for (statenr = ctxt->nbStates - 1;statenr >= 0;statenr--) {
 	state = ctxt->states[statenr];
-	if (state == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1157]) {
+	  if ((state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1157\n");
+	  else
+	    fprintf(stderr, "reached bug index 1157\n");
+	}
+	if ((!FIXREVERTER[1157] && (state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((state->nbTrans == 0) &&
 	    (state->type != XML_REGEXP_FINAL_STATE)) {
 	    state->type = XML_REGEXP_SINK_STATE;
@@ -1921,8 +2675,23 @@ xmlFAEliminateEpsilonTransitions(xmlRegParserCtxtPtr ctxt) {
     if (has_epsilon) {
 	for (statenr = 0;statenr < ctxt->nbStates;statenr++) {
 	    state = ctxt->states[statenr];
-	    if (state == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1158]) {
+	      if ((state == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1158\n");
+	      else
+	        fprintf(stderr, "reached bug index 1158\n");
+	    }
+	    if ((!FIXREVERTER[1158] && (state == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    for (transnr = 0;transnr < state->nbTrans;transnr++) {
 		xmlRegTransPtr trans = &(state->trans[transnr]);
 		if ((trans->atom == NULL) &&
@@ -2372,8 +3141,23 @@ xmlFAEqualAtoms(xmlRegAtomPtr atom1, xmlRegAtomPtr atom2, int deep) {
 
     if (atom1 == atom2)
 	return(1);
-    if ((atom1 == NULL) || (atom2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1160]) {
+      if ((atom1 == (void *) 0 || atom2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1160\n");
+      else
+        fprintf(stderr, "reached bug index 1160\n");
+    }
+    if ((!FIXREVERTER[1160] && (atom1 == (void *) 0 || atom2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (atom1->type != atom2->type)
         return(0);
@@ -2417,8 +3201,23 @@ xmlFACompareAtoms(xmlRegAtomPtr atom1, xmlRegAtomPtr atom2, int deep) {
 
     if (atom1 == atom2)
 	return(1);
-    if ((atom1 == NULL) || (atom2 == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1161]) {
+      if ((atom1 == (void *) 0 || atom2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1161\n");
+      else
+        fprintf(stderr, "reached bug index 1161\n");
+    }
+    if ((!FIXREVERTER[1161] && (atom1 == (void *) 0 || atom2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if ((atom1->type == XML_REGEXP_ANYCHAR) ||
         (atom2->type == XML_REGEXP_ANYCHAR))
@@ -2516,8 +3315,23 @@ xmlFARecurseDeterminism(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
     xmlRegTransPtr t1;
     int deep = 1;
 
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1167]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1167\n");
+      else
+        fprintf(stderr, "reached bug index 1167\n");
+    }
+    if ((!FIXREVERTER[1167] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(ret);
+	#ifdef FRCOV
+	}
+	#endif
     if (state->markd == XML_REGEXP_MARK_VISITED)
 	return(ret);
 
@@ -2534,8 +3348,23 @@ xmlFARecurseDeterminism(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state,
 	/*
 	 * check transitions conflicting with the one looked at
 	 */
-        if ((t1->to < 0) || (t1->to == fromnr))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1168]) {
+          if ((t1 -> to < 0 || t1 -> to == fromnr ) && !(0))
+            fprintf(stderr, "triggered bug index 1168\n");
+          else
+            fprintf(stderr, "reached bug index 1168\n");
+        }
+        if ((!FIXREVERTER[1168] && (t1 -> to < 0 || t1 -> to == fromnr ))
+        #else
+        if (0
+        #endif
+        )
             continue;
+            #ifdef FRCOV
+            }
+            #endif
 	if (t1->atom == NULL) {
 	    state->markd = XML_REGEXP_MARK_VISITED;
 	    res = xmlFARecurseDeterminism(ctxt, ctxt->states[t1->to],
@@ -2568,8 +3397,23 @@ static void
 xmlFAFinishRecurseDeterminism(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr state) {
     int transnr, nbTrans;
 
-    if (state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1169]) {
+      if ((state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1169\n");
+      else
+        fprintf(stderr, "reached bug index 1169\n");
+    }
+    if ((!FIXREVERTER[1169] && (state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (state->markd != XML_REGEXP_MARK_VISITED)
 	return;
     state->markd = 0;
@@ -2610,26 +3454,101 @@ xmlFAComputesDeterminism(xmlRegParserCtxtPtr ctxt) {
      */
     for (statenr = 0;statenr < ctxt->nbStates;statenr++) {
 	state = ctxt->states[statenr];
-	if (state == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1170]) {
+	  if ((state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1170\n");
+	  else
+	    fprintf(stderr, "reached bug index 1170\n");
+	}
+	if ((!FIXREVERTER[1170] && (state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
-	if (state->nbTrans < 2)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1171]) {
+	  if ((state -> nbTrans < 2 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1171\n");
+	  else
+	    fprintf(stderr, "reached bug index 1171\n");
+	}
+	if ((!FIXREVERTER[1171] && (state -> nbTrans < 2 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	for (transnr = 0;transnr < state->nbTrans;transnr++) {
 	    t1 = &(state->trans[transnr]);
 	    /*
 	     * Determinism checks in case of counted or all transitions
 	     * will have to be handled separately
 	     */
-	    if (t1->atom == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1172]) {
+	      if ((t1 -> atom == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1172\n");
+	      else
+	        fprintf(stderr, "reached bug index 1172\n");
+	    }
+	    if ((!FIXREVERTER[1172] && (t1 -> atom == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		/* t1->nd = 1; */
 		continue;
 	    }
-	    if (t1->to < 0) /* eliminated */
+	    #ifdef FRCOV
+	    }
+	    #endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1173]) {
+	      if ((t1 -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1173\n");
+	      else
+	        fprintf(stderr, "reached bug index 1173\n");
+	    }
+	    if ((!FIXREVERTER[1173] && (t1 -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) /* eliminated */
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    for (i = 0;i < transnr;i++) {
 		t2 = &(state->trans[i]);
-		if (t2->to < 0) /* eliminated */
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1174]) {
+		  if ((t2 -> to < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1174\n");
+		  else
+		    fprintf(stderr, "reached bug index 1174\n");
+		}
+		if ((!FIXREVERTER[1174] && (t2 -> to < 0 ))
+		#else
+		if (0
+		#endif
+		) /* eliminated */
 		    continue;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		if (t2->atom != NULL) {
 		    if (t1->to == t2->to) {
                         /*
@@ -2652,10 +3571,40 @@ xmlFAComputesDeterminism(xmlRegParserCtxtPtr ctxt) {
      */
     for (statenr = 0;statenr < ctxt->nbStates;statenr++) {
 	state = ctxt->states[statenr];
-	if (state == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1175]) {
+	  if ((state == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1175\n");
+	  else
+	    fprintf(stderr, "reached bug index 1175\n");
+	}
+	if ((!FIXREVERTER[1175] && (state == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
-	if (state->nbTrans < 2)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1176]) {
+	  if ((state -> nbTrans < 2 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1176\n");
+	  else
+	    fprintf(stderr, "reached bug index 1176\n");
+	}
+	if ((!FIXREVERTER[1176] && (state -> nbTrans < 2 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	last = NULL;
 	for (transnr = 0;transnr < state->nbTrans;transnr++) {
 	    t1 = &(state->trans[transnr]);
@@ -2663,15 +3612,60 @@ xmlFAComputesDeterminism(xmlRegParserCtxtPtr ctxt) {
 	     * Determinism checks in case of counted or all transitions
 	     * will have to be handled separately
 	     */
-	    if (t1->atom == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1177]) {
+	      if ((t1 -> atom == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1177\n");
+	      else
+	        fprintf(stderr, "reached bug index 1177\n");
+	    }
+	    if ((!FIXREVERTER[1177] && (t1 -> atom == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		continue;
 	    }
-	    if (t1->to < 0) /* eliminated */
+	    #ifdef FRCOV
+	    }
+	    #endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1178]) {
+	      if ((t1 -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1178\n");
+	      else
+	        fprintf(stderr, "reached bug index 1178\n");
+	    }
+	    if ((!FIXREVERTER[1178] && (t1 -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) /* eliminated */
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    for (i = 0;i < transnr;i++) {
 		t2 = &(state->trans[i]);
-		if (t2->to < 0) /* eliminated */
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1179]) {
+		  if ((t2 -> to < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1179\n");
+		  else
+		    fprintf(stderr, "reached bug index 1179\n");
+		}
+		if ((!FIXREVERTER[1179] && (t2 -> to < 0 ))
+		#else
+		if (0
+		#endif
+		) /* eliminated */
 		    continue;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		if (t2->atom != NULL) {
                     /*
                      * But here we don't use deep because we want to
@@ -3032,10 +4026,25 @@ xmlRegCheckCharacter(xmlRegAtomPtr atom, int codepoint) {
 static void
 xmlFARegExecSave(xmlRegExecCtxtPtr exec) {
 #ifdef MAX_PUSH
-    if (exec->nbPush > MAX_PUSH) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1184]) {
+      if ((exec -> nbPush > 10000000 ) && !(0))
+        fprintf(stderr, "triggered bug index 1184\n");
+      else
+        fprintf(stderr, "reached bug index 1184\n");
+    }
+    if ((!FIXREVERTER[1184] && (exec -> nbPush > 10000000 ))
+    #else
+    if (0
+    #endif
+    ) {
         exec->status = XML_REGEXP_INTERNAL_LIMIT;
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     exec->nbPush++;
 #endif
 
@@ -3043,11 +4052,26 @@ xmlFARegExecSave(xmlRegExecCtxtPtr exec) {
 	exec->maxRollbacks = 4;
 	exec->rollbacks = (xmlRegExecRollback *) xmlMalloc(exec->maxRollbacks *
 		                             sizeof(xmlRegExecRollback));
-	if (exec->rollbacks == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1185]) {
+	  if ((exec -> rollbacks == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1185\n");
+	  else
+	    fprintf(stderr, "reached bug index 1185\n");
+	}
+	if ((!FIXREVERTER[1185] && (exec -> rollbacks == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    exec->maxRollbacks = 0;
             exec->status = XML_REGEXP_OUT_OF_MEMORY;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(exec->rollbacks, 0,
 	       exec->maxRollbacks * sizeof(xmlRegExecRollback));
     } else if (exec->nbRollbacks >= exec->maxRollbacks) {
@@ -3057,11 +4081,26 @@ xmlFARegExecSave(xmlRegExecCtxtPtr exec) {
 	exec->maxRollbacks *= 2;
 	tmp = (xmlRegExecRollback *) xmlRealloc(exec->rollbacks,
 			exec->maxRollbacks * sizeof(xmlRegExecRollback));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1186]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1186\n");
+	  else
+	    fprintf(stderr, "reached bug index 1186\n");
+	}
+	if ((!FIXREVERTER[1186] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    exec->maxRollbacks /= 2;
             exec->status = XML_REGEXP_OUT_OF_MEMORY;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	exec->rollbacks = tmp;
 	tmp = &exec->rollbacks[len];
 	memset(tmp, 0, (exec->maxRollbacks - len) * sizeof(xmlRegExecRollback));
@@ -3086,12 +4125,42 @@ xmlFARegExecSave(xmlRegExecCtxtPtr exec) {
 
 static void
 xmlFARegExecRollBack(xmlRegExecCtxtPtr exec) {
-    if (exec->status != XML_REGEXP_OK)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1187]) {
+      if ((exec -> status != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1187\n");
+      else
+        fprintf(stderr, "reached bug index 1187\n");
+    }
+    if ((!FIXREVERTER[1187] && (exec -> status != 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
-    if (exec->nbRollbacks <= 0) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1188]) {
+      if ((exec -> nbRollbacks <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1188\n");
+      else
+        fprintf(stderr, "reached bug index 1188\n");
+    }
+    if ((!FIXREVERTER[1188] && (exec -> nbRollbacks <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	exec->status = XML_REGEXP_NOT_FOUND;
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     exec->nbRollbacks--;
     exec->state = exec->rollbacks[exec->nbRollbacks].state;
     exec->index = exec->rollbacks[exec->nbRollbacks].index;
@@ -3137,9 +4206,24 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
     exec->inputStackMax = 0;
     if (comp->nbCounters > 0) {
 	exec->counts = (int *) xmlMalloc(comp->nbCounters * sizeof(int));
-	if (exec->counts == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1189]) {
+	  if ((exec -> counts == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1189\n");
+	  else
+	    fprintf(stderr, "reached bug index 1189\n");
+	}
+	if ((!FIXREVERTER[1189] && (exec -> counts == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    return(XML_REGEXP_OUT_OF_MEMORY);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         memset(exec->counts, 0, comp->nbCounters * sizeof(int));
     } else
 	exec->counts = NULL;
@@ -3177,8 +4261,23 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 	exec->transcount = 0;
 	for (;exec->transno < exec->state->nbTrans;exec->transno++) {
 	    trans = &exec->state->trans[exec->transno];
-	    if (trans->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1190]) {
+	      if ((trans -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1190\n");
+	      else
+	        fprintf(stderr, "reached bug index 1190\n");
+	    }
+	    if ((!FIXREVERTER[1190] && (trans -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    atom = trans->atom;
 	    ret = 0;
 	    deter = 1;
@@ -3186,10 +4285,25 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 		int count;
 		xmlRegCounterPtr counter;
 
-		if (exec->counts == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1191]) {
+		  if ((exec -> counts == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1191\n");
+		  else
+		    fprintf(stderr, "reached bug index 1191\n");
+		}
+		if ((!FIXREVERTER[1191] && (exec -> counts == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    exec->status = XML_REGEXP_INTERNAL_ERROR;
 		    goto error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		/*
 		 * A counted transition.
 		 */
@@ -3237,8 +4351,23 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
                     /* Save before incrementing */
 		    if (exec->state->nbTrans > exec->transno + 1) {
 			xmlFARegExecSave(exec);
-                        if (exec->status != XML_REGEXP_OK)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[1193]) {
+                          if ((exec -> status != 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 1193\n");
+                          else
+                            fprintf(stderr, "reached bug index 1193\n");
+                        }
+                        if ((!FIXREVERTER[1193] && (exec -> status != 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             goto error;
+                            #ifdef FRCOV
+                            }
+                            #endif
 		    }
 		    if (trans->counter >= 0) {
 			exec->counts[trans->counter]++;
@@ -3248,9 +4377,24 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 			/*
 			 * Try to progress as much as possible on the input
 			 */
-			if (exec->transcount == atom->max) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1194]) {
+			  if ((exec -> transcount == atom -> max ) && !(0))
+			    fprintf(stderr, "triggered bug index 1194\n");
+			  else
+			    fprintf(stderr, "reached bug index 1194\n");
+			}
+			if ((!FIXREVERTER[1194] && (exec -> transcount == atom -> max ))
+			#else
+			if (0
+			#endif
+			) {
 			    break;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			exec->index += len;
 			/*
 			 * End of input: stop here
@@ -3269,8 +4413,23 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 			    exec->transno = -1; /* trick */
 			    exec->state = to;
 			    xmlFARegExecSave(exec);
-                            if (exec->status != XML_REGEXP_OK)
+                            
+                            #ifdef FRCOV
+                            {if (FIXREVERTER[1195]) {
+                              if ((exec -> status != 0 ) && !(0))
+                                fprintf(stderr, "triggered bug index 1195\n");
+                              else
+                                fprintf(stderr, "reached bug index 1195\n");
+                            }
+                            if ((!FIXREVERTER[1195] && (exec -> status != 0 ))
+                            #else
+                            if (0
+                            #endif
+                            )
                                 goto error;
+                                #ifdef FRCOV
+                                }
+                                #endif
 			    exec->transno = transno;
 			    exec->state = state;
 			}
@@ -3297,10 +4456,25 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 			goto rollback;
 		    }
 		    if (trans->counter >= 0) {
-			if (exec->counts == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1200]) {
+			  if ((exec -> counts == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 1200\n");
+			  else
+			    fprintf(stderr, "reached bug index 1200\n");
+			}
+			if ((!FIXREVERTER[1200] && (exec -> counts == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    exec->status = XML_REGEXP_INTERNAL_ERROR;
 			    goto error;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			exec->counts[trans->counter]--;
 		    }
 		} else if ((ret == 0) && (atom->min == 0) && (atom->max > 0)) {
@@ -3324,8 +4498,23 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 		    ((trans->count >= 0) && (deter == 0) &&
 		     (exec->state->nbTrans > exec->transno + 1))) {
 		    xmlFARegExecSave(exec);
-                    if (exec->status != XML_REGEXP_OK)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[1203]) {
+                      if ((exec -> status != 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 1203\n");
+                      else
+                        fprintf(stderr, "reached bug index 1203\n");
+                    }
+                    if ((!FIXREVERTER[1203] && (exec -> status != 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto error;
+                        #ifdef FRCOV
+                        }
+                        #endif
 		}
 		if (trans->counter >= 0) {
 		    xmlRegCounterPtr counter;
@@ -3344,10 +4533,25 @@ xmlFARegExec(xmlRegexpPtr comp, const xmlChar *content) {
 		}
 		if ((trans->count >= 0) &&
 		    (trans->count < REGEXP_ALL_COUNTER)) {
-		    if (exec->counts == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1204]) {
+		      if ((exec -> counts == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 1204\n");
+		      else
+		        fprintf(stderr, "reached bug index 1204\n");
+		    }
+		    if ((!FIXREVERTER[1204] && (exec -> counts == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 		        exec->status = XML_REGEXP_INTERNAL_ERROR;
 			goto error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    exec->counts[trans->count] = 0;
 		}
 		exec->state = comp->states[trans->to];
@@ -3383,12 +4587,42 @@ error:
 	}
 	xmlFree(exec->rollbacks);
     }
-    if (exec->state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1207]) {
+      if ((exec -> state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1207\n");
+      else
+        fprintf(stderr, "reached bug index 1207\n");
+    }
+    if ((!FIXREVERTER[1207] && (exec -> state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_REGEXP_INTERNAL_ERROR);
+        #ifdef FRCOV
+        }
+        #endif
     if (exec->counts != NULL)
 	xmlFree(exec->counts);
-    if (exec->status == XML_REGEXP_OK)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1208]) {
+      if ((exec -> status == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1208\n");
+      else
+        fprintf(stderr, "reached bug index 1208\n");
+    }
+    if ((!FIXREVERTER[1208] && (exec -> status == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(1);
+	#ifdef FRCOV
+	}
+	#endif
     if (exec->status == XML_REGEXP_NOT_FOUND)
 	return(0);
     return(exec->status);
@@ -3415,13 +4649,43 @@ xmlRegExecCtxtPtr
 xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data) {
     xmlRegExecCtxtPtr exec;
 
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1209]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1209\n");
+      else
+        fprintf(stderr, "reached bug index 1209\n");
+    }
+    if ((!FIXREVERTER[1209] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((comp->compact == NULL) && (comp->states == NULL))
         return(NULL);
     exec = (xmlRegExecCtxtPtr) xmlMalloc(sizeof(xmlRegExecCtxt));
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1210]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1210\n");
+      else
+        fprintf(stderr, "reached bug index 1210\n");
+    }
+    if ((!FIXREVERTER[1210] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     memset(exec, 0, sizeof(xmlRegExecCtxt));
     exec->inputString = NULL;
     exec->index = 0;
@@ -3431,8 +4695,23 @@ xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data) {
     exec->rollbacks = NULL;
     exec->status = XML_REGEXP_OK;
     exec->comp = comp;
-    if (comp->compact == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1211]) {
+      if ((comp -> compact == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 1211\n");
+      else
+        fprintf(stderr, "reached bug index 1211\n");
+    }
+    if ((!FIXREVERTER[1211] && (comp -> compact == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	exec->state = comp->states[0];
+	#ifdef FRCOV
+	}
+	#endif
     exec->transno = 0;
     exec->transcount = 0;
     exec->callback = callback;
@@ -3444,10 +4723,25 @@ xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data) {
 	 */
 	exec->counts = (int *) xmlMalloc(comp->nbCounters * sizeof(int)
 	                                 * 2);
-	if (exec->counts == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1212]) {
+	  if ((exec -> counts == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1212\n");
+	  else
+	    fprintf(stderr, "reached bug index 1212\n");
+	}
+	if ((!FIXREVERTER[1212] && (exec -> counts == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFree(exec);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         memset(exec->counts, 0, comp->nbCounters * sizeof(int) * 2);
 	exec->errCounts = &exec->counts[comp->nbCounters];
     } else {
@@ -3471,8 +4765,23 @@ xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data) {
  */
 void
 xmlRegFreeExecCtxt(xmlRegExecCtxtPtr exec) {
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1213]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1213\n");
+      else
+        fprintf(stderr, "reached bug index 1213\n");
+    }
+    if ((!FIXREVERTER[1213] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (exec->rollbacks != NULL) {
 	if (exec->counts != NULL) {
@@ -3508,10 +4817,25 @@ xmlRegExecSetErrString(xmlRegExecCtxtPtr exec, const xmlChar *value) {
         exec->errString = NULL;
     } else {
         exec->errString = xmlStrdup(value);
-        if (exec->errString == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1214]) {
+          if ((exec -> errString == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1214\n");
+          else
+            fprintf(stderr, "reached bug index 1214\n");
+        }
+        if ((!FIXREVERTER[1214] && (exec -> errString == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             exec->status = XML_REGEXP_OUT_OF_MEMORY;
             return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
     }
     return(0);
 }
@@ -3523,22 +4847,52 @@ xmlFARegExecSaveInputString(xmlRegExecCtxtPtr exec, const xmlChar *value,
 	exec->inputStackMax = 4;
 	exec->inputStack = (xmlRegInputTokenPtr)
 	    xmlMalloc(exec->inputStackMax * sizeof(xmlRegInputToken));
-	if (exec->inputStack == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1215]) {
+	  if ((exec -> inputStack == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1215\n");
+	  else
+	    fprintf(stderr, "reached bug index 1215\n");
+	}
+	if ((!FIXREVERTER[1215] && (exec -> inputStack == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    exec->inputStackMax = 0;
             exec->status = XML_REGEXP_OUT_OF_MEMORY;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (exec->inputStackNr + 1 >= exec->inputStackMax) {
 	xmlRegInputTokenPtr tmp;
 
 	exec->inputStackMax *= 2;
 	tmp = (xmlRegInputTokenPtr) xmlRealloc(exec->inputStack,
 			exec->inputStackMax * sizeof(xmlRegInputToken));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1216]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1216\n");
+	  else
+	    fprintf(stderr, "reached bug index 1216\n");
+	}
+	if ((!FIXREVERTER[1216] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    exec->inputStackMax /= 2;
             exec->status = XML_REGEXP_OUT_OF_MEMORY;
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	exec->inputStack = tmp;
     }
     if (value == NULL) {
@@ -3572,8 +4926,38 @@ xmlFARegExecSaveInputString(xmlRegExecCtxtPtr exec, const xmlChar *value,
 static int
 xmlRegStrEqualWildcard(const xmlChar *expStr, const xmlChar *valStr) {
     if (expStr == valStr) return(1);
-    if (expStr == NULL) return(0);
-    if (valStr == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1217]) {
+      if ((expStr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1217\n");
+      else
+        fprintf(stderr, "reached bug index 1217\n");
+    }
+    if ((!FIXREVERTER[1217] && (expStr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1218]) {
+      if ((valStr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1218\n");
+      else
+        fprintf(stderr, "reached bug index 1218\n");
+    }
+    if ((!FIXREVERTER[1218] && (valStr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
     do {
 	/*
 	* Eval if we have a wildcard for the current item.
@@ -3626,10 +5010,37 @@ xmlRegCompactPushString(xmlRegExecCtxtPtr exec,
     int state = exec->index;
     int i, target;
 
-    if ((comp == NULL) || (comp->compact == NULL) || (comp->stringMap == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1219]) {
+      if ((comp == (void *) 0 || comp -> compact == (void *) 0 || comp -> stringMap == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1219\n");
+      else
+        fprintf(stderr, "reached bug index 1219\n");
+    }
+    if ((!FIXREVERTER[1219] && (comp == (void *) 0 || comp -> compact == (void *) 0 || comp -> stringMap == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-
-    if (value == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1220]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1220\n");
+      else
+        fprintf(stderr, "reached bug index 1220\n");
+    }
+    if ((!FIXREVERTER[1220] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	 * are we at a final state ?
 	 */
@@ -3638,20 +5049,56 @@ xmlRegCompactPushString(xmlRegExecCtxtPtr exec,
 	    return(1);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Examine all outside transitions from current state
      */
     for (i = 0;i < comp->nbstrings;i++) {
 	target = comp->compact[state * (comp->nbstrings + 1) + i + 1];
-	if ((target > 0) && (target <= comp->nbstates)) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1222]) {
+	  fprintf(stderr, "reached bug index 1222\n");
+	}
+	if ((FIXREVERTER[1222] && (target > 0 )) || (!FIXREVERTER[1222] && (target > 0 && target <= comp -> nbstates ))
+	#else
+	if (target > 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(target <= comp -> nbstates ))
+	    fprintf(stderr, "triggered bug index 1222\n");
+	  #endif
+	
 	    target--; /* to avoid 0 */
 	    if (xmlRegStrEqualWildcard(comp->stringMap[i], value)) {
 		exec->index = target;
-		if ((exec->callback != NULL) && (comp->transdata != NULL)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1221]) {
+		  fprintf(stderr, "reached bug index 1221\n");
+		}
+		if ((FIXREVERTER[1221] && (exec -> callback != (void *) 0 )) || (!FIXREVERTER[1221] && (exec -> callback != (void *) 0 && comp -> transdata != (void *) 0 ))
+		#else
+		if (exec -> callback != (void *) 0 
+		#endif
+		) {
+		  
+		#ifdef FRCOV
+		  if (!(comp -> transdata != (void *) 0 ))
+		    fprintf(stderr, "triggered bug index 1221\n");
+		  #endif
+		
 		    exec->callback(exec->data, value,
 			  comp->transdata[state * comp->nbstrings + i], data);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		if (comp->compact[target * (comp->nbstrings + 1)] ==
 		    XML_REGEXP_SINK_STATE)
 		    goto error;
@@ -3662,6 +5109,9 @@ xmlRegCompactPushString(xmlRegExecCtxtPtr exec,
 		return(0);
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     /*
      * Failed to find an exit transition out from current state for the
@@ -3695,12 +5145,57 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
     int final = 0;
     int progress = 1;
 
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1223]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1223\n");
+      else
+        fprintf(stderr, "reached bug index 1223\n");
+    }
+    if ((!FIXREVERTER[1223] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (exec->comp == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1224]) {
+      if ((exec -> comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1224\n");
+      else
+        fprintf(stderr, "reached bug index 1224\n");
+    }
+    if ((!FIXREVERTER[1224] && (exec -> comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (exec->status != XML_REGEXP_OK)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1225]) {
+      if ((exec -> status != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1225\n");
+      else
+        fprintf(stderr, "reached bug index 1225\n");
+    }
+    if ((!FIXREVERTER[1225] && (exec -> status != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(exec->status);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (exec->comp->compact != NULL)
 	return(xmlRegCompactPushString(exec, exec->comp, value, data));
@@ -3715,11 +5210,29 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
      * If we have an active rollback stack push the new value there
      * and get back to where we were left
      */
-    if ((value != NULL) && (exec->inputStackNr > 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1226]) {
+      fprintf(stderr, "reached bug index 1226\n");
+    }
+    if ((FIXREVERTER[1226] && (value != (void *) 0 )) || (!FIXREVERTER[1226] && (value != (void *) 0 && exec -> inputStackNr > 0 ))
+    #else
+    if (value != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(exec -> inputStackNr > 0 ))
+        fprintf(stderr, "triggered bug index 1226\n");
+      #endif
+    
 	xmlFARegExecSaveInputString(exec, value, data);
 	value = exec->inputStack[exec->index].value;
 	data = exec->inputStack[exec->index].data;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     while ((exec->status == XML_REGEXP_OK) &&
 	   ((value != NULL) ||
@@ -3737,8 +5250,23 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 	exec->transcount = 0;
 	for (;exec->transno < exec->state->nbTrans;exec->transno++) {
 	    trans = &exec->state->trans[exec->transno];
-	    if (trans->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1227]) {
+	      if ((trans -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1227\n");
+	      else
+	        fprintf(stderr, "reached bug index 1227\n");
+	    }
+	    if ((!FIXREVERTER[1227] && (trans -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    atom = trans->atom;
 	    ret = 0;
 	    if (trans->count == REGEXP_ALL_LAX_COUNTER) {
@@ -3793,10 +5321,25 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 			continue;
                     counter = &exec->comp->counters[t->counter];
 		    count = exec->counts[t->counter];
-		    if ((count < counter->min) || (count > counter->max)) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[1228]) {
+		      if ((count < counter -> min || count > counter -> max ) && !(0))
+		        fprintf(stderr, "triggered bug index 1228\n");
+		      else
+		        fprintf(stderr, "reached bug index 1228\n");
+		    }
+		    if ((!FIXREVERTER[1228] && (count < counter -> min || count > counter -> max ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			ret = 0;
 			break;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		}
 	    } else if (trans->count >= 0) {
 		int count;
@@ -3820,7 +5363,22 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 		    if (!compound)
 		        ret = 0;
 		}
-		if ((ret == 1) && (trans->counter >= 0)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1230]) {
+		  fprintf(stderr, "reached bug index 1230\n");
+		}
+		if ((FIXREVERTER[1230] && (ret == 1 )) || (!FIXREVERTER[1230] && (ret == 1 && trans -> counter >= 0 ))
+		#else
+		if (ret == 1 
+		#endif
+		) {
+		  
+		#ifdef FRCOV
+		  if (!(trans -> counter >= 0 ))
+		    fprintf(stderr, "triggered bug index 1230\n");
+		  #endif
+		
 		    xmlRegCounterPtr counter;
 		    int count;
 
@@ -3829,8 +5387,26 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 		    if (count >= counter->max)
 			ret = 0;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 
-		if ((ret == 1) && (atom->min > 0) && (atom->max > 0)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1236]) {
+		  fprintf(stderr, "reached bug index 1236\n");
+		}
+		if ((FIXREVERTER[1236] && (ret == 1 && atom -> min > 0 )) || (!FIXREVERTER[1236] && (ret == 1 && atom -> min > 0 && atom -> max > 0 ))
+		#else
+		if (ret == 1 && atom -> min > 0 
+		#endif
+		) {
+		  
+		#ifdef FRCOV
+		  if (!(atom -> max > 0 ))
+		    fprintf(stderr, "triggered bug index 1236\n");
+		  #endif
+		
 		    xmlRegStatePtr to = exec->comp->states[trans->to];
 
 		    /*
@@ -3847,9 +5423,24 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 			/*
 			 * Try to progress as much as possible on the input
 			 */
-			if (exec->transcount == atom->max) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1231]) {
+			  if ((exec -> transcount == atom -> max ) && !(0))
+			    fprintf(stderr, "triggered bug index 1231\n");
+			  else
+			    fprintf(stderr, "reached bug index 1231\n");
+			}
+			if ((!FIXREVERTER[1231] && (exec -> transcount == atom -> max ))
+			#else
+			if (0
+			#endif
+			) {
 			    break;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			exec->index++;
 			value = exec->inputStack[exec->index].value;
 			data = exec->inputStack[exec->index].data;
@@ -3857,10 +5448,25 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 			/*
 			 * End of input: stop here
 			 */
-			if (value == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1232]) {
+			  if ((value == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 1232\n");
+			  else
+			    fprintf(stderr, "reached bug index 1232\n");
+			}
+			if ((!FIXREVERTER[1232] && (value == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    exec->index --;
 			    break;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			if (exec->transcount >= atom->min) {
 			    int transno = exec->transno;
 			    xmlRegStatePtr state = exec->state;
@@ -3893,13 +5499,33 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 			goto rollback;
 		    }
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 	    if (ret == 1) {
-		if ((exec->callback != NULL) && (atom != NULL) &&
-			(data != NULL)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1237]) {
+		  fprintf(stderr, "reached bug index 1237\n");
+		}
+		if ((FIXREVERTER[1237] && (exec -> callback != (void *) 0 && atom != (void *) 0 )) || (!FIXREVERTER[1237] && (exec -> callback != (void *) 0 && atom != (void *) 0 && data != (void *) 0 ))
+		#else
+		if (exec -> callback != (void *) 0 && atom != (void *) 0 
+		#endif
+		) {
+			  
+			#ifdef FRCOV
+			  if (!(data != (void *) 0 ))
+			    fprintf(stderr, "triggered bug index 1237\n");
+			  #endif
+			
 		    exec->callback(exec->data, atom->valuep,
 			           atom->data, data);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		if (exec->state->nbTrans > exec->transno + 1) {
 		    if (exec->inputStackNr <= 0) {
 			xmlFARegExecSaveInputString(exec, value, data);
@@ -3909,10 +5535,27 @@ xmlRegExecPushStringInternal(xmlRegExecCtxtPtr exec, const xmlChar *value,
 		if (trans->counter >= 0) {
 		    exec->counts[trans->counter]++;
 		}
-		if ((trans->count >= 0) &&
-		    (trans->count < REGEXP_ALL_COUNTER)) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1238]) {
+		  fprintf(stderr, "reached bug index 1238\n");
+		}
+		if ((FIXREVERTER[1238] && (trans -> count >= 0 )) || (!FIXREVERTER[1238] && (trans -> count >= 0 && trans -> count < 1193046 ))
+		#else
+		if (trans -> count >= 0 
+		#endif
+		) {
+		      
+		    #ifdef FRCOV
+		      if (!(trans -> count < 1193046 ))
+		        fprintf(stderr, "triggered bug index 1238\n");
+		      #endif
+		    
 		    exec->counts[trans->count] = 0;
 		}
+		#ifdef FRCOV
+		}
+		#endif
                 if ((exec->comp->states[trans->to] != NULL) &&
 		    (exec->comp->states[trans->to]->type ==
 		     XML_REGEXP_SINK_STATE)) {
@@ -3971,20 +5614,52 @@ rollback:
 	     */
 	    exec->determinist = 0;
 	    xmlFARegExecRollBack(exec);
-	    if ((exec->inputStack != NULL ) &&
-                (exec->status == XML_REGEXP_OK)) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1240]) {
+	      fprintf(stderr, "reached bug index 1240\n");
+	    }
+	    if ((FIXREVERTER[1240] && (exec -> inputStack != (void *) 0 )) || (!FIXREVERTER[1240] && (exec -> inputStack != (void *) 0 && exec -> status == 0 ))
+	    #else
+	    if (exec -> inputStack != (void *) 0 
+	    #endif
+	    ) {
+                  
+                #ifdef FRCOV
+                  if (!(exec -> status == 0 ))
+                    fprintf(stderr, "triggered bug index 1240\n");
+                  #endif
+                
 		value = exec->inputStack[exec->index].value;
 		data = exec->inputStack[exec->index].data;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	continue;
 progress:
         progress = 1;
 	continue;
     }
-    if (exec->status == XML_REGEXP_OK) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1241]) {
+      if ((exec -> status == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1241\n");
+      else
+        fprintf(stderr, "reached bug index 1241\n");
+    }
+    if ((!FIXREVERTER[1241] && (exec -> status == 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(exec->state->type == XML_REGEXP_FINAL_STATE);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(exec->status);
 }
 
@@ -4024,25 +5699,100 @@ xmlRegExecPushString2(xmlRegExecCtxtPtr exec, const xmlChar *value,
     int lenn, lenp, ret;
     xmlChar *str;
 
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1242]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1242\n");
+      else
+        fprintf(stderr, "reached bug index 1242\n");
+    }
+    if ((!FIXREVERTER[1242] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (exec->comp == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1243]) {
+      if ((exec -> comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1243\n");
+      else
+        fprintf(stderr, "reached bug index 1243\n");
+    }
+    if ((!FIXREVERTER[1243] && (exec -> comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
-    if (exec->status != XML_REGEXP_OK)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1244]) {
+      if ((exec -> status != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1244\n");
+      else
+        fprintf(stderr, "reached bug index 1244\n");
+    }
+    if ((!FIXREVERTER[1244] && (exec -> status != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(exec->status);
-
-    if (value2 == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1245]) {
+      if ((value2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1245\n");
+      else
+        fprintf(stderr, "reached bug index 1245\n");
+    }
+    if ((!FIXREVERTER[1245] && (value2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlRegExecPushString(exec, value, data));
+        #ifdef FRCOV
+        }
+        #endif
 
     lenn = strlen((char *) value2);
     lenp = strlen((char *) value);
 
     if (150 < lenn + lenp + 2) {
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1246]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1246\n");
+	  else
+	    fprintf(stderr, "reached bug index 1246\n");
+	}
+	if ((!FIXREVERTER[1246] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    exec->status = XML_REGEXP_OUT_OF_MEMORY;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
 	str = buf;
     }
@@ -4108,7 +5858,21 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 	    else
 		*terminal = 0;
 	}
-	for (i = 0;(i < comp->nbstrings) && (nb < maxval);i++) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1247])
+	  fprintf(stderr, "reached bug index 1247\n");
+	for (i = 0; (FIXREVERTER[1247] && (i < comp -> nbstrings )) || (!FIXREVERTER[1247] && (i < comp -> nbstrings && nb < maxval ))
+	#else
+	for (i = 0; i < comp -> nbstrings 
+	#endif
+	;i++) {
+	  
+	#ifdef FRCOV
+	  if (!(nb < maxval ))
+	    fprintf(stderr, "triggered bug index 1247\n");
+	  #endif
+	
 	    target = comp->compact[state * (comp->nbstrings + 1) + i + 1];
 	    if ((target > 0) && (target <= comp->nbstates) &&
 	        (comp->compact[(target - 1) * (comp->nbstrings + 1)] !=
@@ -4117,7 +5881,24 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		(*nbval)++;
 	    }
 	}
-	for (i = 0;(i < comp->nbstrings) && (nb < maxval);i++) {
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1248])
+	  fprintf(stderr, "reached bug index 1248\n");
+	for (i = 0; (FIXREVERTER[1248] && (i < comp -> nbstrings )) || (!FIXREVERTER[1248] && (i < comp -> nbstrings && nb < maxval ))
+	#else
+	for (i = 0; i < comp -> nbstrings 
+	#endif
+	;i++) {
+	  
+	#ifdef FRCOV
+	  if (!(nb < maxval ))
+	    fprintf(stderr, "triggered bug index 1248\n");
+	  #endif
+	
 	    target = comp->compact[state * (comp->nbstrings + 1) + i + 1];
 	    if ((target > 0) && (target <= comp->nbstates) &&
 	        (comp->compact[(target - 1) * (comp->nbstrings + 1)] ==
@@ -4126,6 +5907,9 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		(*nbneg)++;
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
         int transno;
 	xmlRegTransPtr trans;
@@ -4140,21 +5924,94 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 	}
 
 	if (err) {
-	    if (exec->errState == NULL) return(-1);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1249]) {
+	      if ((exec -> errState == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1249\n");
+	      else
+	        fprintf(stderr, "reached bug index 1249\n");
+	    }
+	    if ((!FIXREVERTER[1249] && (exec -> errState == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    state = exec->errState;
 	} else {
-	    if (exec->state == NULL) return(-1);
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1250]) {
+	      if ((exec -> state == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1250\n");
+	      else
+	        fprintf(stderr, "reached bug index 1250\n");
+	    }
+	    if ((!FIXREVERTER[1250] && (exec -> state == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    state = exec->state;
 	}
-	for (transno = 0;
-	     (transno < state->nbTrans) && (nb < maxval);
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1254])
+	  fprintf(stderr, "reached bug index 1254\n");
+	for (transno = 0; (FIXREVERTER[1254] && (transno < state -> nbTrans )) || (!FIXREVERTER[1254] && (transno < state -> nbTrans && nb < maxval ))
+	#else
+	for (transno = 0; transno < state -> nbTrans 
+	#endif
+	;
 	     transno++) {
+	       
+	     #ifdef FRCOV
+	       if (!(nb < maxval ))
+	         fprintf(stderr, "triggered bug index 1254\n");
+	       #endif
+	     
 	    trans = &state->trans[transno];
-	    if (trans->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1251]) {
+	      if ((trans -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1251\n");
+	      else
+	        fprintf(stderr, "reached bug index 1251\n");
+	    }
+	    if ((!FIXREVERTER[1251] && (trans -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    atom = trans->atom;
-	    if ((atom == NULL) || (atom->valuep == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1252]) {
+	      if ((atom == (void *) 0 || atom -> valuep == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1252\n");
+	      else
+	        fprintf(stderr, "reached bug index 1252\n");
+	    }
+	    if ((!FIXREVERTER[1252] && (atom == (void *) 0 || atom -> valuep == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    if (trans->count == REGEXP_ALL_LAX_COUNTER) {
 	        /* this should not be reached but ... */
 	    } else if (trans->count == REGEXP_ALL_COUNTER) {
@@ -4167,8 +6024,23 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		    count = exec->errCounts[trans->counter];
 		else
 		    count = exec->counts[trans->counter];
-		if (exec->comp != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[1253]) {
+		  if ((exec -> comp != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 1253\n");
+		  else
+		    fprintf(stderr, "reached bug index 1253\n");
+		}
+		if ((!FIXREVERTER[1253] && (exec -> comp != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    counter = &exec->comp->counters[trans->counter];
+		    #ifdef FRCOV
+		    }
+		    #endif
 		if ((counter == NULL) || (count < counter->max)) {
 		    if (atom->neg)
 			values[nb++] = (xmlChar *) atom->valuep2;
@@ -4188,15 +6060,61 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		}
 	    }
 	}
-	for (transno = 0;
-	     (transno < state->nbTrans) && (nb < maxval);
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1257])
+	  fprintf(stderr, "reached bug index 1257\n");
+	for (transno = 0; (FIXREVERTER[1257] && (transno < state -> nbTrans )) || (!FIXREVERTER[1257] && (transno < state -> nbTrans && nb < maxval ))
+	#else
+	for (transno = 0; transno < state -> nbTrans 
+	#endif
+	;
 	     transno++) {
+	       
+	     #ifdef FRCOV
+	       if (!(nb < maxval ))
+	         fprintf(stderr, "triggered bug index 1257\n");
+	       #endif
+	     
 	    trans = &state->trans[transno];
-	    if (trans->to < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1255]) {
+	      if ((trans -> to < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1255\n");
+	      else
+	        fprintf(stderr, "reached bug index 1255\n");
+	    }
+	    if ((!FIXREVERTER[1255] && (trans -> to < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    atom = trans->atom;
-	    if ((atom == NULL) || (atom->valuep == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[1256]) {
+	      if ((atom == (void *) 0 || atom -> valuep == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 1256\n");
+	      else
+	        fprintf(stderr, "reached bug index 1256\n");
+	    }
+	    if ((!FIXREVERTER[1256] && (atom == (void *) 0 || atom -> valuep == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    if (trans->count == REGEXP_ALL_LAX_COUNTER) {
 	        continue;
 	    } else if (trans->count == REGEXP_ALL_COUNTER) {
@@ -4215,6 +6133,9 @@ xmlRegExecGetValues(xmlRegExecCtxtPtr exec, int err,
 		}
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     return(0);
 }
@@ -4264,8 +6185,23 @@ xmlRegExecNextValues(xmlRegExecCtxtPtr exec, int *nbval, int *nbneg,
 int
 xmlRegExecErrInfo(xmlRegExecCtxtPtr exec, const xmlChar **string,
                   int *nbval, int *nbneg, xmlChar **values, int *terminal) {
-    if (exec == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1258]) {
+      if ((exec == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1258\n");
+      else
+        fprintf(stderr, "reached bug index 1258\n");
+    }
+    if ((!FIXREVERTER[1258] && (exec == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (string != NULL) {
         if (exec->status != XML_REGEXP_OK)
 	    *string = exec->errString;
@@ -4668,10 +6604,25 @@ xmlFAParseCharProp(xmlRegParserCtxtPtr ctxt) {
     }
     if (ctxt->atom == NULL) {
 	ctxt->atom = xmlRegNewAtom(ctxt, type);
-        if (ctxt->atom == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1259]) {
+          if ((ctxt -> atom == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1259\n");
+          else
+            fprintf(stderr, "reached bug index 1259\n");
+        }
+        if ((!FIXREVERTER[1259] && (ctxt -> atom == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlFree(blockName);
             return;
         }
+        #ifdef FRCOV
+        }
+        #endif
 	ctxt->atom->valuep = blockName;
     } else if (ctxt->atom->type == XML_REGEXP_RANGES) {
         if (xmlRegAtomAddRange(ctxt, ctxt->atom, ctxt->neg,
@@ -4705,7 +6656,22 @@ static int parse_escaped_codeunit(xmlRegParserCtxtPtr ctxt)
 static int parse_escaped_codepoint(xmlRegParserCtxtPtr ctxt)
 {
     int val = parse_escaped_codeunit(ctxt);
-    if (0xD800 <= val && val <= 0xDBFF) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1260]) {
+      fprintf(stderr, "reached bug index 1260\n");
+    }
+    if ((FIXREVERTER[1260] && (55296 <= val )) || (!FIXREVERTER[1260] && (55296 <= val && val <= 56319 ))
+    #else
+    if (55296 <= val 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(val <= 56319 ))
+        fprintf(stderr, "triggered bug index 1260\n");
+      #endif
+    
 	NEXT;
 	if (CUR == '\\') {
 	    NEXT;
@@ -4719,6 +6685,9 @@ static int parse_escaped_codepoint(xmlRegParserCtxtPtr ctxt)
 	ERROR("Invalid low surrogate pair code unit");
 	val = -1;
     }
+    #ifdef FRCOV
+    }
+    #endif
     return val;
 }
 
@@ -4818,9 +6787,24 @@ xmlFAParseCharClassEsc(xmlRegParserCtxtPtr ctxt) {
 			break;
 		    case 'u':
 			cur = parse_escaped_codepoint(ctxt);
-			if (cur < 0) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[1261]) {
+			  if ((cur < 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 1261\n");
+			  else
+			    fprintf(stderr, "reached bug index 1261\n");
+			}
+			if ((!FIXREVERTER[1261] && (cur < 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    return;
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			ctxt->atom->codepoint = cur;
 			break;
 		    default:
@@ -5066,8 +7050,23 @@ xmlFAParseCharClass(xmlRegParserCtxtPtr ctxt) {
     if (CUR == '[') {
 	NEXT;
 	ctxt->atom = xmlRegNewAtom(ctxt, XML_REGEXP_RANGES);
-	if (ctxt->atom == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1262]) {
+	  if ((ctxt -> atom == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1262\n");
+	  else
+	    fprintf(stderr, "reached bug index 1262\n");
+	}
+	if ((!FIXREVERTER[1262] && (ctxt -> atom == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	xmlFAParseCharGroup(ctxt);
 	if (CUR == ']') {
 	    NEXT;
@@ -5169,8 +7168,23 @@ xmlFAParseQuantifier(xmlRegParserCtxtPtr ctxt) {
 	} else {
 	    ERROR("Unterminated quantifier");
 	}
-	if (max == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1264]) {
+	  if ((max == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1264\n");
+	  else
+	    fprintf(stderr, "reached bug index 1264\n");
+	}
+	if ((!FIXREVERTER[1264] && (max == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    max = min;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (ctxt->atom != NULL) {
 	    ctxt->atom->quant = XML_REGEXP_QUANT_RANGE;
 	    ctxt->atom->min = min;
@@ -5194,8 +7208,23 @@ xmlFAParseAtom(xmlRegParserCtxtPtr ctxt) {
     codepoint = xmlFAIsChar(ctxt);
     if (codepoint > 0) {
 	ctxt->atom = xmlRegNewAtom(ctxt, XML_REGEXP_CHARVAL);
-	if (ctxt->atom == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1265]) {
+	  if ((ctxt -> atom == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1265\n");
+	  else
+	    fprintf(stderr, "reached bug index 1265\n");
+	}
+	if ((!FIXREVERTER[1265] && (ctxt -> atom == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
         len = 4;
         codepoint = xmlGetUTF8Char(ctxt->cur, &len);
         if (codepoint < 0) {
@@ -5239,8 +7268,23 @@ xmlFAParseAtom(xmlRegParserCtxtPtr ctxt) {
 	    ERROR("xmlFAParseAtom: expecting ')'");
 	}
 	ctxt->atom = xmlRegNewAtom(ctxt, XML_REGEXP_SUBREG);
-	if (ctxt->atom == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1266]) {
+	  if ((ctxt -> atom == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1266\n");
+	  else
+	    fprintf(stderr, "reached bug index 1266\n");
+	}
+	if ((!FIXREVERTER[1266] && (ctxt -> atom == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ctxt->atom->start = start;
 	ctxt->atom->start0 = start0;
 	ctxt->atom->stop = ctxt->state;
@@ -5305,7 +7349,21 @@ xmlFAParseBranch(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr to) {
 	previous = ctxt->state;
 	ctxt->atom = NULL;
     }
-    while ((ret != 0) && (ctxt->error == 0)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1268])
+      fprintf(stderr, "reached bug index 1268\n");
+    while ((FIXREVERTER[1268] && (ret != 0 )) || (!FIXREVERTER[1268] && (ret != 0 && ctxt -> error == 0 ))
+    #else
+    while (ret != 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(ctxt -> error == 0 ))
+        fprintf(stderr, "triggered bug index 1268\n");
+      #endif
+    
 	ret = xmlFAParsePiece(ctxt);
 	if (ret != 0) {
 	    if (xmlFAGenerateTransitions(ctxt, previous,
@@ -5319,6 +7377,9 @@ xmlFAParseBranch(xmlRegParserCtxtPtr ctxt, xmlRegStatePtr to) {
 	    ctxt->atom = NULL;
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(0);
 }
 
@@ -5415,17 +7476,62 @@ xmlRegexpCompile(const xmlChar *regexp) {
     xmlRegexpPtr ret = NULL;
     xmlRegParserCtxtPtr ctxt;
 
-    if (regexp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1271]) {
+      if ((regexp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1271\n");
+      else
+        fprintf(stderr, "reached bug index 1271\n");
+    }
+    if ((!FIXREVERTER[1271] && (regexp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ctxt = xmlRegNewParserCtxt(regexp);
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1272]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1272\n");
+      else
+        fprintf(stderr, "reached bug index 1272\n");
+    }
+    if ((!FIXREVERTER[1272] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     /* initialize the parser */
     ctxt->state = xmlRegStatePush(ctxt);
-    if (ctxt->state == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1273]) {
+      if ((ctxt -> state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1273\n");
+      else
+        fprintf(stderr, "reached bug index 1273\n");
+    }
+    if ((!FIXREVERTER[1273] && (ctxt -> state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->start = ctxt->state;
     ctxt->end = NULL;
 
@@ -5434,8 +7540,23 @@ xmlRegexpCompile(const xmlChar *regexp) {
     if (CUR != 0) {
 	ERROR("xmlFAParseRegExp: extra characters");
     }
-    if (ctxt->error != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1274]) {
+      if ((ctxt -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1274\n");
+      else
+        fprintf(stderr, "reached bug index 1274\n");
+    }
+    if ((!FIXREVERTER[1274] && (ctxt -> error != 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->end = ctxt->state;
     ctxt->start->type = XML_REGEXP_START_STATE;
     ctxt->end->type = XML_REGEXP_FINAL_STATE;
@@ -5444,8 +7565,23 @@ xmlRegexpCompile(const xmlChar *regexp) {
     xmlFAEliminateEpsilonTransitions(ctxt);
 
 
-    if (ctxt->error != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1275]) {
+      if ((ctxt -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1275\n");
+      else
+        fprintf(stderr, "reached bug index 1275\n");
+    }
+    if ((!FIXREVERTER[1275] && (ctxt -> error != 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     ret = xmlRegEpxFromParse(ctxt);
 
 error:
@@ -5464,8 +7600,23 @@ error:
  */
 int
 xmlRegexpExec(xmlRegexpPtr comp, const xmlChar *content) {
-    if ((comp == NULL) || (content == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1276]) {
+      if ((comp == (void *) 0 || content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1276\n");
+      else
+        fprintf(stderr, "reached bug index 1276\n");
+    }
+    if ((!FIXREVERTER[1276] && (comp == (void *) 0 || content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlFARegExec(comp, content));
 }
 
@@ -5482,14 +7633,44 @@ xmlRegexpIsDeterminist(xmlRegexpPtr comp) {
     xmlAutomataPtr am;
     int ret;
 
-    if (comp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1277]) {
+      if ((comp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1277\n");
+      else
+        fprintf(stderr, "reached bug index 1277\n");
+    }
+    if ((!FIXREVERTER[1277] && (comp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (comp->determinist != -1)
 	return(comp->determinist);
 
     am = xmlNewAutomata();
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1278]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1278\n");
+      else
+        fprintf(stderr, "reached bug index 1278\n");
+    }
+    if ((!FIXREVERTER[1278] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     if (am->states != NULL) {
 	int i;
 
@@ -5520,8 +7701,23 @@ xmlRegexpIsDeterminist(xmlRegexpPtr comp) {
 void
 xmlRegFreeRegexp(xmlRegexpPtr regexp) {
     int i;
-    if (regexp == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1279]) {
+      if ((regexp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1279\n");
+      else
+        fprintf(stderr, "reached bug index 1279\n");
+    }
+    if ((!FIXREVERTER[1279] && (regexp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (regexp->string != NULL)
 	xmlFree(regexp->string);
@@ -5569,15 +7765,45 @@ xmlNewAutomata(void) {
     xmlAutomataPtr ctxt;
 
     ctxt = xmlRegNewParserCtxt(NULL);
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1280]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1280\n");
+      else
+        fprintf(stderr, "reached bug index 1280\n");
+    }
+    if ((!FIXREVERTER[1280] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     /* initialize the parser */
     ctxt->state = xmlRegStatePush(ctxt);
-    if (ctxt->state == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1281]) {
+      if ((ctxt -> state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1281\n");
+      else
+        fprintf(stderr, "reached bug index 1281\n");
+    }
+    if ((!FIXREVERTER[1281] && (ctxt -> state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFreeAutomata(ctxt);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->start = ctxt->state;
     ctxt->end = NULL;
 
@@ -5595,8 +7821,23 @@ xmlNewAutomata(void) {
  */
 void
 xmlFreeAutomata(xmlAutomataPtr am) {
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1282]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1282\n");
+      else
+        fprintf(stderr, "reached bug index 1282\n");
+    }
+    if ((!FIXREVERTER[1282] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     xmlRegFreeParserCtxt(am);
 }
 
@@ -5624,8 +7865,23 @@ xmlAutomataSetFlags(xmlAutomataPtr am, int flags) {
  */
 xmlAutomataStatePtr
 xmlAutomataGetInitState(xmlAutomataPtr am) {
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1284]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1284\n");
+      else
+        fprintf(stderr, "reached bug index 1284\n");
+    }
+    if ((!FIXREVERTER[1284] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(am->start);
 }
 
@@ -5640,8 +7896,23 @@ xmlAutomataGetInitState(xmlAutomataPtr am) {
  */
 int
 xmlAutomataSetFinalState(xmlAutomataPtr am, xmlAutomataStatePtr state) {
-    if ((am == NULL) || (state == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1285]) {
+      if ((am == (void *) 0 || state == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1285\n");
+      else
+        fprintf(stderr, "reached bug index 1285\n");
+    }
+    if ((!FIXREVERTER[1285] && (am == (void *) 0 || state == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     state->type = XML_REGEXP_FINAL_STATE;
     return(0);
 }
@@ -5666,25 +7937,85 @@ xmlAutomataNewTransition(xmlAutomataPtr am, xmlAutomataStatePtr from,
 			 void *data) {
     xmlRegAtomPtr atom;
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1286]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1286\n");
+      else
+        fprintf(stderr, "reached bug index 1286\n");
+    }
+    if ((!FIXREVERTER[1286] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1287]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1287\n");
+      else
+        fprintf(stderr, "reached bug index 1287\n");
+    }
+    if ((!FIXREVERTER[1287] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     atom->data = data;
     atom->valuep = xmlStrdup(token);
-    if (atom->valuep == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1288]) {
+      if ((atom -> valuep == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1288\n");
+      else
+        fprintf(stderr, "reached bug index 1288\n");
+    }
+    if ((!FIXREVERTER[1288] && (atom -> valuep == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlRegFreeAtom(atom);
         xmlRegexpErrMemory(am);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     if (xmlFAGenerateTransitions(am, from, to, atom) < 0) {
         xmlRegFreeAtom(atom);
 	return(NULL);
     }
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1289]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1289\n");
+      else
+        fprintf(stderr, "reached bug index 1289\n");
+    }
+    if ((!FIXREVERTER[1289] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -5709,11 +8040,41 @@ xmlAutomataNewTransition2(xmlAutomataPtr am, xmlAutomataStatePtr from,
 			  const xmlChar *token2, void *data) {
     xmlRegAtomPtr atom;
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1290]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1290\n");
+      else
+        fprintf(stderr, "reached bug index 1290\n");
+    }
+    if ((!FIXREVERTER[1290] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1291]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1291\n");
+      else
+        fprintf(stderr, "reached bug index 1291\n");
+    }
+    if ((!FIXREVERTER[1291] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom->data = data;
     if ((token2 == NULL) || (*token2 == 0)) {
 	atom->valuep = xmlStrdup(token);
@@ -5725,10 +8086,25 @@ xmlAutomataNewTransition2(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	lenp = strlen((char *) token);
 
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1292]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1292\n");
+	  else
+	    fprintf(stderr, "reached bug index 1292\n");
+	}
+	if ((!FIXREVERTER[1292] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegFreeAtom(atom);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(&str[0], token, lenp);
 	str[lenp] = '|';
 	memcpy(&str[lenp + 1], token2, lenn);
@@ -5741,8 +8117,23 @@ xmlAutomataNewTransition2(xmlAutomataPtr am, xmlAutomataStatePtr from,
         xmlRegFreeAtom(atom);
 	return(NULL);
     }
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1293]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1293\n");
+      else
+        fprintf(stderr, "reached bug index 1293\n");
+    }
+    if ((!FIXREVERTER[1293] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -5770,11 +8161,41 @@ xmlAutomataNewNegTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
     xmlRegAtomPtr atom;
     xmlChar err_msg[200];
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1294]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1294\n");
+      else
+        fprintf(stderr, "reached bug index 1294\n");
+    }
+    if ((!FIXREVERTER[1294] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1295]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1295\n");
+      else
+        fprintf(stderr, "reached bug index 1295\n");
+    }
+    if ((!FIXREVERTER[1295] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom->data = data;
     atom->neg = 1;
     if ((token2 == NULL) || (*token2 == 0)) {
@@ -5787,10 +8208,25 @@ xmlAutomataNewNegTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	lenp = strlen((char *) token);
 
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1296]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1296\n");
+	  else
+	    fprintf(stderr, "reached bug index 1296\n");
+	}
+	if ((!FIXREVERTER[1296] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlRegFreeAtom(atom);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memcpy(&str[0], token, lenp);
 	str[lenp] = '|';
 	memcpy(&str[lenp + 1], token2, lenn);
@@ -5807,8 +8243,23 @@ xmlAutomataNewNegTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	return(NULL);
     }
     am->negs++;
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1297]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1297\n");
+      else
+        fprintf(stderr, "reached bug index 1297\n");
+    }
+    if ((!FIXREVERTER[1297] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -5838,19 +8289,94 @@ xmlAutomataNewCountTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
     xmlRegAtomPtr atom;
     int counter;
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1298]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1298\n");
+      else
+        fprintf(stderr, "reached bug index 1298\n");
+    }
+    if ((!FIXREVERTER[1298] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (min < 0)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1299]) {
+      if ((min < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1299\n");
+      else
+        fprintf(stderr, "reached bug index 1299\n");
+    }
+    if ((!FIXREVERTER[1299] && (min < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if ((max < min) || (max < 1))
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1300]) {
+      if ((max < min || max < 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 1300\n");
+      else
+        fprintf(stderr, "reached bug index 1300\n");
+    }
+    if ((!FIXREVERTER[1300] && (max < min || max < 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1301]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1301\n");
+      else
+        fprintf(stderr, "reached bug index 1301\n");
+    }
+    if ((!FIXREVERTER[1301] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((token2 == NULL) || (*token2 == 0)) {
 	atom->valuep = xmlStrdup(token);
-        if (atom->valuep == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1302]) {
+          if ((atom -> valuep == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1302\n");
+          else
+            fprintf(stderr, "reached bug index 1302\n");
+        }
+        if ((!FIXREVERTER[1302] && (atom -> valuep == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     } else {
 	int lenn, lenp;
 	xmlChar *str;
@@ -5859,8 +8385,23 @@ xmlAutomataNewCountTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	lenp = strlen((char *) token);
 
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1303]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1303\n");
+	  else
+	    fprintf(stderr, "reached bug index 1303\n");
+	}
+	if ((!FIXREVERTER[1303] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	memcpy(&str[0], token, lenp);
 	str[lenp] = '|';
 	memcpy(&str[lenp + 1], token2, lenn);
@@ -5879,26 +8420,86 @@ xmlAutomataNewCountTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
      * associate a counter to the transition.
      */
     counter = xmlRegGetCounter(am);
-    if (counter < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1304]) {
+      if ((counter < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1304\n");
+      else
+        fprintf(stderr, "reached bug index 1304\n");
+    }
+    if ((!FIXREVERTER[1304] && (counter < 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     am->counters[counter].min = min;
     am->counters[counter].max = max;
 
     /* xmlFAGenerateTransitions(am, from, to, atom); */
     if (to == NULL) {
 	to = xmlRegStatePush(am);
-        if (to == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1305]) {
+          if ((to == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1305\n");
+          else
+            fprintf(stderr, "reached bug index 1305\n");
+        }
+        if ((!FIXREVERTER[1305] && (to == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     xmlRegStateAddTrans(am, from, atom, to, counter, -1);
     if (xmlRegAtomPush(am, atom) < 0)
         goto error;
     am->state = to;
 
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1306]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1306\n");
+      else
+        fprintf(stderr, "reached bug index 1306\n");
+    }
+    if ((!FIXREVERTER[1306] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	to = am->state;
-    if (to == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1307]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1307\n");
+      else
+        fprintf(stderr, "reached bug index 1307\n");
+    }
+    if ((!FIXREVERTER[1307] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (min == 0)
 	xmlFAGenerateEpsilonTransition(am, from, to);
     return(to);
@@ -6011,19 +8612,94 @@ xmlAutomataNewOnceTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
     xmlRegAtomPtr atom;
     int counter;
 
-    if ((am == NULL) || (from == NULL) || (token == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1317]) {
+      if ((am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1317\n");
+      else
+        fprintf(stderr, "reached bug index 1317\n");
+    }
+    if ((!FIXREVERTER[1317] && (am == (void *) 0 || from == (void *) 0 || token == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (min < 1)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1318]) {
+      if ((min < 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 1318\n");
+      else
+        fprintf(stderr, "reached bug index 1318\n");
+    }
+    if ((!FIXREVERTER[1318] && (min < 1 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (max < min)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1319]) {
+      if ((max < min ) && !(0))
+        fprintf(stderr, "triggered bug index 1319\n");
+      else
+        fprintf(stderr, "reached bug index 1319\n");
+    }
+    if ((!FIXREVERTER[1319] && (max < min ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     atom = xmlRegNewAtom(am, XML_REGEXP_STRING);
-    if (atom == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1320]) {
+      if ((atom == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1320\n");
+      else
+        fprintf(stderr, "reached bug index 1320\n");
+    }
+    if ((!FIXREVERTER[1320] && (atom == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((token2 == NULL) || (*token2 == 0)) {
 	atom->valuep = xmlStrdup(token);
-        if (atom->valuep == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1321]) {
+          if ((atom -> valuep == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1321\n");
+          else
+            fprintf(stderr, "reached bug index 1321\n");
+        }
+        if ((!FIXREVERTER[1321] && (atom -> valuep == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     } else {
 	int lenn, lenp;
 	xmlChar *str;
@@ -6032,8 +8708,23 @@ xmlAutomataNewOnceTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
 	lenp = strlen((char *) token);
 
 	str = (xmlChar *) xmlMallocAtomic(lenn + lenp + 2);
-	if (str == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[1322]) {
+	  if ((str == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 1322\n");
+	  else
+	    fprintf(stderr, "reached bug index 1322\n");
+	}
+	if ((!FIXREVERTER[1322] && (str == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	memcpy(&str[0], token, lenp);
 	str[lenp] = '|';
 	memcpy(&str[lenp + 1], token2, lenn);
@@ -6049,16 +8740,46 @@ xmlAutomataNewOnceTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from,
      * associate a counter to the transition.
      */
     counter = xmlRegGetCounter(am);
-    if (counter < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1323]) {
+      if ((counter < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1323\n");
+      else
+        fprintf(stderr, "reached bug index 1323\n");
+    }
+    if ((!FIXREVERTER[1323] && (counter < 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     am->counters[counter].min = 1;
     am->counters[counter].max = 1;
 
     /* xmlFAGenerateTransitions(am, from, to, atom); */
     if (to == NULL) {
 	to = xmlRegStatePush(am);
-        if (to == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[1324]) {
+          if ((to == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 1324\n");
+          else
+            fprintf(stderr, "reached bug index 1324\n");
+        }
+        if ((!FIXREVERTER[1324] && (to == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
     }
     xmlRegStateAddTrans(am, from, atom, to, counter, -1);
     if (xmlRegAtomPush(am, atom) < 0)
@@ -6148,8 +8869,23 @@ error:
  */
 xmlAutomataStatePtr
 xmlAutomataNewState(xmlAutomataPtr am) {
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1331]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1331\n");
+      else
+        fprintf(stderr, "reached bug index 1331\n");
+    }
+    if ((!FIXREVERTER[1331] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlRegStatePush(am));
 }
 
@@ -6168,11 +8904,41 @@ xmlAutomataNewState(xmlAutomataPtr am) {
 xmlAutomataStatePtr
 xmlAutomataNewEpsilon(xmlAutomataPtr am, xmlAutomataStatePtr from,
 		      xmlAutomataStatePtr to) {
-    if ((am == NULL) || (from == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1332]) {
+      if ((am == (void *) 0 || from == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1332\n");
+      else
+        fprintf(stderr, "reached bug index 1332\n");
+    }
+    if ((!FIXREVERTER[1332] && (am == (void *) 0 || from == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlFAGenerateEpsilonTransition(am, from, to);
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1333]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1333\n");
+      else
+        fprintf(stderr, "reached bug index 1333\n");
+    }
+    if ((!FIXREVERTER[1333] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -6193,11 +8959,41 @@ xmlAutomataNewEpsilon(xmlAutomataPtr am, xmlAutomataStatePtr from,
 xmlAutomataStatePtr
 xmlAutomataNewAllTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 		       xmlAutomataStatePtr to, int lax) {
-    if ((am == NULL) || (from == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1334]) {
+      if ((am == (void *) 0 || from == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1334\n");
+      else
+        fprintf(stderr, "reached bug index 1334\n");
+    }
+    if ((!FIXREVERTER[1334] && (am == (void *) 0 || from == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlFAGenerateAllTransition(am, from, to, lax);
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1335]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1335\n");
+      else
+        fprintf(stderr, "reached bug index 1335\n");
+    }
+    if ((!FIXREVERTER[1335] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -6215,12 +9011,42 @@ int
 xmlAutomataNewCounter(xmlAutomataPtr am, int min, int max) {
     int ret;
 
-    if (am == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1336]) {
+      if ((am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1336\n");
+      else
+        fprintf(stderr, "reached bug index 1336\n");
+    }
+    if ((!FIXREVERTER[1336] && (am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     ret = xmlRegGetCounter(am);
-    if (ret < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1337]) {
+      if ((ret < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1337\n");
+      else
+        fprintf(stderr, "reached bug index 1337\n");
+    }
+    if ((!FIXREVERTER[1337] && (ret < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     am->counters[ret].min = min;
     am->counters[ret].max = max;
     return(ret);
@@ -6242,11 +9068,41 @@ xmlAutomataNewCounter(xmlAutomataPtr am, int min, int max) {
 xmlAutomataStatePtr
 xmlAutomataNewCountedTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 		xmlAutomataStatePtr to, int counter) {
-    if ((am == NULL) || (from == NULL) || (counter < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1338]) {
+      if ((am == (void *) 0 || from == (void *) 0 || counter < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1338\n");
+      else
+        fprintf(stderr, "reached bug index 1338\n");
+    }
+    if ((!FIXREVERTER[1338] && (am == (void *) 0 || from == (void *) 0 || counter < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlFAGenerateCountedEpsilonTransition(am, from, to, counter);
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1339]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1339\n");
+      else
+        fprintf(stderr, "reached bug index 1339\n");
+    }
+    if ((!FIXREVERTER[1339] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -6266,11 +9122,41 @@ xmlAutomataNewCountedTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 xmlAutomataStatePtr
 xmlAutomataNewCounterTrans(xmlAutomataPtr am, xmlAutomataStatePtr from,
 		xmlAutomataStatePtr to, int counter) {
-    if ((am == NULL) || (from == NULL) || (counter < 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1340]) {
+      if ((am == (void *) 0 || from == (void *) 0 || counter < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1340\n");
+      else
+        fprintf(stderr, "reached bug index 1340\n");
+    }
+    if ((!FIXREVERTER[1340] && (am == (void *) 0 || from == (void *) 0 || counter < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlFAGenerateCountedTransition(am, from, to, counter);
-    if (to == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1341]) {
+      if ((to == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1341\n");
+      else
+        fprintf(stderr, "reached bug index 1341\n");
+    }
+    if ((!FIXREVERTER[1341] && (to == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(am->state);
+	#ifdef FRCOV
+	}
+	#endif
     return(to);
 }
 
@@ -6287,10 +9173,40 @@ xmlRegexpPtr
 xmlAutomataCompile(xmlAutomataPtr am) {
     xmlRegexpPtr ret;
 
-    if ((am == NULL) || (am->error != 0)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1342]) {
+      if ((am == (void *) 0 || am -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1342\n");
+      else
+        fprintf(stderr, "reached bug index 1342\n");
+    }
+    if ((!FIXREVERTER[1342] && (am == (void *) 0 || am -> error != 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     xmlFAEliminateEpsilonTransitions(am);
-    if (am->error != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[1343]) {
+      if ((am -> error != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 1343\n");
+      else
+        fprintf(stderr, "reached bug index 1343\n");
+    }
+    if ((!FIXREVERTER[1343] && (am -> error != 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* xmlFAComputesDeterminism(am); */
     ret = xmlRegEpxFromParse(am);
 
diff --git a/xmlsave.c b/xmlsave.c
index ba001559..1821bb1b 100644
--- a/xmlsave.c
+++ b/xmlsave.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xmlsave.c: Implementation of the document serializer
  *
@@ -63,8 +67,23 @@ struct _xmlSaveCtxt {
 static void
 xmlSaveErrMemory(xmlOutputBufferPtr out)
 {
-    if (out != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2020]) {
+      if ((out != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2020\n");
+      else
+        fprintf(stderr, "reached bug index 2020\n");
+    }
+    if ((!FIXREVERTER[2020] && (out != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         out->error = XML_ERR_NO_MEMORY;
+        #ifdef FRCOV
+        }
+        #endif
     xmlRaiseMemoryError(NULL, NULL, NULL, XML_FROM_OUTPUT, NULL);
 }
 
@@ -87,13 +106,43 @@ xmlSaveErr(xmlOutputBufferPtr out, int code, xmlNodePtr node,
     if ((out != NULL) && (out->error == XML_ERR_NO_MEMORY))
         return;
 
-    if (code == XML_ERR_NO_MEMORY) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2021]) {
+      if ((code == XML_ERR_NO_MEMORY ) && !(0))
+        fprintf(stderr, "triggered bug index 2021\n");
+      else
+        fprintf(stderr, "reached bug index 2021\n");
+    }
+    if ((!FIXREVERTER[2021] && (code == XML_ERR_NO_MEMORY ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSaveErrMemory(out);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
-    if (out != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2022]) {
+      if ((out != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2022\n");
+      else
+        fprintf(stderr, "reached bug index 2022\n");
+    }
+    if ((!FIXREVERTER[2022] && (out != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
         out->error = code;
+        #ifdef FRCOV
+        }
+        #endif
 
     switch(code) {
         case XML_SAVE_NOT_UTF8:
@@ -192,7 +241,21 @@ xmlEscapeEntities(unsigned char* out, int *outlen,
 
     inend = in + (*inlen);
 
-    while ((in < inend) && (out < outend)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2023])
+      fprintf(stderr, "reached bug index 2023\n");
+    while ((FIXREVERTER[2023] && (in < inend )) || (!FIXREVERTER[2023] && (in < inend && out < outend ))
+    #else
+    while (in < inend 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(out < outend ))
+        fprintf(stderr, "triggered bug index 2023\n");
+      #endif
+    
 	if (*in == '<') {
 	    if (outend - out < 4) break;
 	    *out++ = '&';
@@ -261,6 +324,9 @@ xmlEscapeEntities(unsigned char* out, int *outlen,
 	    out = xmlSerializeHexCharRef(out, val);
 	}
     }
+    #ifdef FRCOV
+    }
+    #endif
     *outlen = out - outstart;
     *inlen = in - base;
     return(0);
@@ -283,7 +349,22 @@ xmlSaveCtxtInit(xmlSaveCtxtPtr ctxt)
     int i;
     int len;
 
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2024]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2024\n");
+      else
+        fprintf(stderr, "reached bug index 2024\n");
+    }
+    if ((!FIXREVERTER[2024] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if ((ctxt->encoding == NULL) && (ctxt->escape == NULL))
         ctxt->escape = xmlEscapeEntities;
     len = xmlStrlen((xmlChar *)xmlTreeIndentString);
@@ -311,7 +392,22 @@ xmlSaveCtxtInit(xmlSaveCtxtPtr ctxt)
 static void
 xmlFreeSaveCtxt(xmlSaveCtxtPtr ctxt)
 {
-    if (ctxt == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2025]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2025\n");
+      else
+        fprintf(stderr, "reached bug index 2025\n");
+    }
+    if ((!FIXREVERTER[2025] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->encoding != NULL)
         xmlFree((char *) ctxt->encoding);
     if (ctxt->buf != NULL)
@@ -332,10 +428,25 @@ xmlNewSaveCtxt(const char *encoding, int options)
     xmlSaveCtxtPtr ret;
 
     ret = (xmlSaveCtxtPtr) xmlMalloc(sizeof(xmlSaveCtxt));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2026]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2026\n");
+      else
+        fprintf(stderr, "reached bug index 2026\n");
+    }
+    if ((!FIXREVERTER[2026] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSaveErrMemory(NULL);
 	return ( NULL );
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSaveCtxt));
 
     if (encoding != NULL) {
@@ -343,11 +454,26 @@ xmlNewSaveCtxt(const char *encoding, int options)
 
         res = xmlOpenCharEncodingHandler(encoding, /* output */ 1,
                                          &ret->handler);
-	if (ret->handler == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2027]) {
+	  if ((ret -> handler == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2027\n");
+	  else
+	    fprintf(stderr, "reached bug index 2027\n");
+	}
+	if ((!FIXREVERTER[2027] && (ret -> handler == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSaveErr(NULL, res, NULL, encoding);
             xmlFreeSaveCtxt(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         ret->encoding = xmlStrdup((const xmlChar *)encoding);
 	ret->escape = NULL;
     }
@@ -497,13 +623,43 @@ xmlBufDumpElementContent(xmlOutputBufferPtr buf,
                          xmlElementContentPtr content) {
     xmlElementContentPtr cur;
 
-    if (content == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2028]) {
+      if ((content == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2028\n");
+      else
+        fprintf(stderr, "reached bug index 2028\n");
+    }
+    if ((!FIXREVERTER[2028] && (content == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     xmlOutputBufferWrite(buf, 1, "(");
     cur = content;
 
     do {
-        if (cur == NULL) return;
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2029]) {
+          if ((cur == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2029\n");
+          else
+            fprintf(stderr, "reached bug index 2029\n");
+        }
+        if ((!FIXREVERTER[2029] && (cur == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) return;
+        #ifdef FRCOV
+        }
+        #endif
 
         switch (cur->type) {
             case XML_ELEMENT_CONTENT_PCDATA:
@@ -531,7 +687,22 @@ xmlBufDumpElementContent(xmlOutputBufferPtr buf,
         while (cur != content) {
             xmlElementContentPtr parent = cur->parent;
 
-            if (parent == NULL) return;
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2030]) {
+              if ((parent == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2030\n");
+              else
+                fprintf(stderr, "reached bug index 2030\n");
+            }
+            if ((!FIXREVERTER[2030] && (parent == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) return;
+            #ifdef FRCOV
+            }
+            #endif
 
             if (((cur->type == XML_ELEMENT_CONTENT_OR) ||
                  (cur->type == XML_ELEMENT_CONTENT_SEQ)) &&
@@ -801,16 +972,46 @@ static int xmlSaveSwitchEncoding(xmlSaveCtxtPtr ctxt, const char *encoding) {
         int res;
 
 	res = xmlOpenCharEncodingHandler(encoding, /* output */ 1, &handler);
-        if (handler == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2031]) {
+          if ((handler == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2031\n");
+          else
+            fprintf(stderr, "reached bug index 2031\n");
+        }
+        if ((!FIXREVERTER[2031] && (handler == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
             xmlSaveErr(buf, res, NULL, encoding);
             return(-1);
         }
+        #ifdef FRCOV
+        }
+        #endif
 	buf->conv = xmlBufCreate();
-	if (buf->conv == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2032]) {
+	  if ((buf -> conv == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2032\n");
+	  else
+	    fprintf(stderr, "reached bug index 2032\n");
+	}
+	if ((!FIXREVERTER[2032] && (buf -> conv == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlCharEncCloseFunc(handler);
             xmlSaveErrMemory(buf);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         buf->encoder = handler;
 	/*
 	 * initialize the state, e.g. if outputting a BOM
@@ -848,8 +1049,23 @@ static void
 xmlOutputBufferWriteWSNonSig(xmlSaveCtxtPtr ctxt, int extra)
 {
     int i;
-    if ((ctxt == NULL) || (ctxt->buf == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2033]) {
+      if ((ctxt == (void *) 0 || ctxt -> buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2033\n");
+      else
+        fprintf(stderr, "reached bug index 2033\n");
+    }
+    if ((!FIXREVERTER[2033] && (ctxt == (void *) 0 || ctxt -> buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     xmlOutputBufferWrite(ctxt->buf, 1, "\n");
     for (i = 0; i < (ctxt->level + extra); i += ctxt->indent_nr) {
         xmlOutputBufferWrite(ctxt->buf, ctxt->indent_size *
@@ -872,7 +1088,22 @@ xmlOutputBufferWriteWSNonSig(xmlSaveCtxtPtr ctxt, int extra)
 static void
 xmlNsDumpOutput(xmlOutputBufferPtr buf, xmlDocPtr doc, xmlNsPtr cur,
                 xmlSaveCtxtPtr ctxt) {
-    if ((cur == NULL) || (buf == NULL)) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2034]) {
+      if ((cur == (void *) 0 || buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2034\n");
+      else
+        fprintf(stderr, "reached bug index 2034\n");
+    }
+    if ((!FIXREVERTER[2034] && (cur == (void *) 0 || buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if ((cur->type == XML_LOCAL_NAMESPACE) && (cur->href != NULL)) {
 	if (xmlStrEqual(cur->prefix, BAD_CAST "xml"))
 	    return;
@@ -939,9 +1170,39 @@ xmlDtdDumpOutput(xmlSaveCtxtPtr ctxt, xmlDtdPtr dtd) {
     xmlNodePtr cur;
     int format, level;
 
-    if (dtd == NULL) return;
-    if ((ctxt == NULL) || (ctxt->buf == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2035]) {
+      if ((dtd == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2035\n");
+      else
+        fprintf(stderr, "reached bug index 2035\n");
+    }
+    if ((!FIXREVERTER[2035] && (dtd == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2036]) {
+      if ((ctxt == (void *) 0 || ctxt -> buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2036\n");
+      else
+        fprintf(stderr, "reached bug index 2036\n");
+    }
+    if ((!FIXREVERTER[2036] && (ctxt == (void *) 0 || ctxt -> buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     buf = ctxt->buf;
     xmlOutputBufferWrite(buf, 10, "<!DOCTYPE ");
     xmlOutputBufferWriteString(buf, (const char *)dtd->name);
@@ -992,9 +1253,39 @@ static void
 xmlAttrDumpOutput(xmlSaveCtxtPtr ctxt, xmlAttrPtr cur) {
     xmlOutputBufferPtr buf;
 
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2037]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2037\n");
+      else
+        fprintf(stderr, "reached bug index 2037\n");
+    }
+    if ((!FIXREVERTER[2037] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     buf = ctxt->buf;
-    if (buf == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2038]) {
+      if ((buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2038\n");
+      else
+        fprintf(stderr, "reached bug index 2038\n");
+    }
+    if ((!FIXREVERTER[2038] && (buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     if (ctxt->format == 2)
         xmlOutputBufferWriteWSNonSig(ctxt, 2);
     else
@@ -1049,12 +1340,44 @@ htmlNodeDumpOutputInternal(xmlSaveCtxtPtr ctxt, xmlNodePtr cur) {
 	}
     }
 
-    if ((encoding != NULL) && (doc != NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2039]) {
+      fprintf(stderr, "reached bug index 2039\n");
+    }
+    if ((FIXREVERTER[2039] && (encoding != (void *) 0 )) || (!FIXREVERTER[2039] && (encoding != (void *) 0 && doc != (void *) 0 ))
+    #else
+    if (encoding != (void *) 0 
+    #endif
+    )
+	
+	#ifdef FRCOV
+	{if (!(doc != (void *) 0 ))
+	  fprintf(stderr, "triggered bug index 2039\n");
+	#endif
 	htmlSetMetaEncoding(doc, (const xmlChar *) encoding);
+	#ifdef FRCOV
+	}}
+	#endif
     if ((encoding == NULL) && (doc != NULL))
 	encoding = htmlGetMetaEncoding(doc);
-    if (encoding == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2040]) {
+      if ((encoding == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2040\n");
+      else
+        fprintf(stderr, "reached bug index 2040\n");
+    }
+    if ((!FIXREVERTER[2040] && (encoding == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	encoding = BAD_CAST "HTML";
+	#ifdef FRCOV
+	}
+	#endif
     if ((encoding != NULL) && (oldctxtenc == NULL) &&
 	(buf->encoder == NULL) && (buf->conv == NULL)) {
 	if (xmlSaveSwitchEncoding(ctxt, (const char*) encoding) < 0) {
@@ -1075,8 +1398,23 @@ htmlNodeDumpOutputInternal(xmlSaveCtxtPtr ctxt, xmlNodePtr cur) {
     if ((switched_encoding) && (oldctxtenc == NULL)) {
 	xmlSaveClearEncoding(ctxt);
     }
-    if (doc != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2041]) {
+      if ((doc != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2041\n");
+      else
+        fprintf(stderr, "reached bug index 2041\n");
+    }
+    if ((!FIXREVERTER[2041] && (doc != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	doc->encoding = oldenc;
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 }
 #endif
@@ -1095,7 +1433,22 @@ xmlNodeDumpOutputInternal(xmlSaveCtxtPtr ctxt, xmlNodePtr cur) {
     xmlChar *start, *end;
     xmlOutputBufferPtr buf;
 
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2042]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2042\n");
+      else
+        fprintf(stderr, "reached bug index 2042\n");
+    }
+    if ((!FIXREVERTER[2042] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     buf = ctxt->buf;
 
     root = cur;
@@ -1207,8 +1560,23 @@ xmlNodeDumpOutputInternal(xmlSaveCtxtPtr ctxt, xmlNodePtr cur) {
             break;
 
         case XML_TEXT_NODE:
-	    if (cur->content == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2043]) {
+	      if ((cur -> content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2043\n");
+	      else
+	        fprintf(stderr, "reached bug index 2043\n");
+	    }
+	    if ((!FIXREVERTER[2043] && (cur -> content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
 	    if (cur->name != xmlStringTextNoenc) {
                 xmlOutputBufferWriteEscape(buf, cur->content, ctxt->escape);
 	    } else {
@@ -1389,10 +1757,40 @@ xmlDocContentDumpOutput(xmlSaveCtxtPtr ctxt, xmlDocPtr cur) {
 #ifdef LIBXML_HTML_ENABLED
         if (encoding != NULL)
 	    htmlSetMetaEncoding(cur, (const xmlChar *) encoding);
-        if (encoding == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2044]) {
+          if ((encoding == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2044\n");
+          else
+            fprintf(stderr, "reached bug index 2044\n");
+        }
+        if ((!FIXREVERTER[2044] && (encoding == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    encoding = htmlGetMetaEncoding(cur);
-        if (encoding == NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2045]) {
+          if ((encoding == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2045\n");
+          else
+            fprintf(stderr, "reached bug index 2045\n");
+        }
+        if ((!FIXREVERTER[2045] && (encoding == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
 	    encoding = BAD_CAST "HTML";
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((encoding != NULL) && (oldctxtenc == NULL) &&
 	    (buf->encoder == NULL) && (buf->conv == NULL)) {
 	    if (xmlSaveSwitchEncoding(ctxt, (const char*) encoding) < 0) {
@@ -1406,8 +1804,23 @@ xmlDocContentDumpOutput(xmlSaveCtxtPtr ctxt, xmlDocPtr cur) {
 	else
 	    htmlDocContentDumpFormatOutput(buf, cur,
 	                                   (const char *)encoding, 0);
-	if (ctxt->encoding != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2046]) {
+	  if ((ctxt -> encoding != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2046\n");
+	  else
+	    fprintf(stderr, "reached bug index 2046\n");
+	}
+	if ((!FIXREVERTER[2046] && (ctxt -> encoding != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    cur->encoding = oldenc;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	return(0);
 #else
         return(-1);
@@ -1523,8 +1936,23 @@ xmlDocContentDumpOutput(xmlSaveCtxtPtr ctxt, xmlDocPtr cur) {
  */
 static int
 xhtmlIsEmpty(xmlNodePtr node) {
-    if (node == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2048]) {
+      if ((node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2048\n");
+      else
+        fprintf(stderr, "reached bug index 2048\n");
+    }
+    if ((!FIXREVERTER[2048] && (node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (node->type != XML_ELEMENT_NODE)
 	return(0);
     if ((node->ns != NULL) && (!xmlStrEqual(node->ns->href, XHTML_NS_NAME)))
@@ -1595,7 +2023,22 @@ xhtmlAttrListDumpOutput(xmlSaveCtxtPtr ctxt, xmlAttrPtr cur) {
     xmlNodePtr parent;
     xmlOutputBufferPtr buf;
 
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2049]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2049\n");
+      else
+        fprintf(stderr, "reached bug index 2049\n");
+    }
+    if ((!FIXREVERTER[2049] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
     buf = ctxt->buf;
     parent = cur->parent;
     while (cur != NULL) {
@@ -1666,7 +2109,22 @@ xhtmlNodeDumpOutput(xmlSaveCtxtPtr ctxt, xmlNodePtr cur) {
     xmlChar *start, *end;
     xmlOutputBufferPtr buf = ctxt->buf;
 
-    if (cur == NULL) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2050]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2050\n");
+      else
+        fprintf(stderr, "reached bug index 2050\n");
+    }
+    if ((!FIXREVERTER[2050] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     oldoptions = ctxt->options;
     ctxt->options |= XML_SAVE_XHTML;
@@ -1865,8 +2323,23 @@ xhtmlNodeDumpOutput(xmlSaveCtxtPtr ctxt, xmlNodePtr cur) {
             break;
 
         case XML_TEXT_NODE:
-	    if (cur->content == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2052]) {
+	      if ((cur -> content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2052\n");
+	      else
+	        fprintf(stderr, "reached bug index 2052\n");
+	    }
+	    if ((!FIXREVERTER[2052] && (cur -> content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
 	    if ((cur->name == xmlStringText) ||
 		(cur->name != xmlStringTextNoenc)) {
                 xmlOutputBufferWriteEscape(buf, cur->content, ctxt->escape);
@@ -2067,13 +2540,43 @@ xmlSaveToBuffer(xmlBufferPtr buffer, const char *encoding, int options)
     xmlSaveCtxtPtr ret;
 
     ret = xmlNewSaveCtxt(encoding, options);
-    if (ret == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2057]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2057\n");
+      else
+        fprintf(stderr, "reached bug index 2057\n");
+    }
+    if ((!FIXREVERTER[2057] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret->buf = xmlOutputBufferCreateBuffer(buffer, ret->handler);
-    if (ret->buf == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2058]) {
+      if ((ret -> buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2058\n");
+      else
+        fprintf(stderr, "reached bug index 2058\n");
+    }
+    if ((!FIXREVERTER[2058] && (ret -> buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlCharEncCloseFunc(ret->handler);
 	xmlFreeSaveCtxt(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(ret);
 }
 
@@ -2124,7 +2627,22 @@ xmlSaveDoc(xmlSaveCtxtPtr ctxt, xmlDocPtr doc)
 {
     long ret = 0;
 
-    if ((ctxt == NULL) || (doc == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2061]) {
+      if ((ctxt == (void *) 0 || doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2061\n");
+      else
+        fprintf(stderr, "reached bug index 2061\n");
+    }
+    if ((!FIXREVERTER[2061] && (ctxt == (void *) 0 || doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlDocContentDumpOutput(ctxt, doc) < 0)
         return(-1);
     return(ret);
@@ -2146,7 +2664,22 @@ xmlSaveTree(xmlSaveCtxtPtr ctxt, xmlNodePtr cur)
 {
     long ret = 0;
 
-    if ((ctxt == NULL) || (cur == NULL)) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2062]) {
+      if ((ctxt == (void *) 0 || cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2062\n");
+      else
+        fprintf(stderr, "reached bug index 2062\n");
+    }
+    if ((!FIXREVERTER[2062] && (ctxt == (void *) 0 || cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef LIBXML_HTML_ENABLED
     if (ctxt->options & XML_SAVE_XHTML) {
         xhtmlNodeDumpOutput(ctxt, cur);
@@ -2210,8 +2743,38 @@ xmlSaveNotationTable(xmlSaveCtxtPtr ctxt, xmlNotationTablePtr cur) {
 int
 xmlSaveFlush(xmlSaveCtxtPtr ctxt)
 {
-    if (ctxt == NULL) return(-1);
-    if (ctxt->buf == NULL) return(-1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2065]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2065\n");
+      else
+        fprintf(stderr, "reached bug index 2065\n");
+    }
+    if ((!FIXREVERTER[2065] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2066]) {
+      if ((ctxt -> buf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2066\n");
+      else
+        fprintf(stderr, "reached bug index 2066\n");
+    }
+    if ((!FIXREVERTER[2066] && (ctxt -> buf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
     return(xmlOutputBufferFlush(ctxt->buf));
 }
 
@@ -2251,8 +2814,23 @@ xmlSaveFinish(xmlSaveCtxtPtr ctxt)
 {
     int ret;
 
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2068]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2068\n");
+      else
+        fprintf(stderr, "reached bug index 2068\n");
+    }
+    if ((!FIXREVERTER[2068] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_ERR_INTERNAL_ERROR);
+        #ifdef FRCOV
+        }
+        #endif
     xmlSaveFlush(ctxt);
     ret = ctxt->buf->error;
     xmlFreeSaveCtxt(ctxt);
@@ -2313,8 +2891,23 @@ xmlBufAttrSerializeTxtContent(xmlOutputBufferPtr buf, xmlDocPtr doc,
 {
     const xmlChar *base, *cur;
 
-    if (string == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2071]) {
+      if ((string == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2071\n");
+      else
+        fprintf(stderr, "reached bug index 2071\n");
+    }
+    if ((!FIXREVERTER[2071] && (string == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     base = cur = string;
     while (*cur != 0) {
         if (*cur == '\n') {
diff --git a/xmlschemas.c b/xmlschemas.c
index 48b4e328..9c0cc2bd 100644
--- a/xmlschemas.c
+++ b/xmlschemas.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * schemas.c : implementation of the XML Schema handling and
  *             schema validity checking
@@ -1310,8 +1314,23 @@ xmlSchemaFormatQName(xmlChar **buf,
 	*buf = xmlStrcat(*buf, BAD_CAST "}");
     }
     if (localName != NULL) {
-	if (namespaceName == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2145]) {
+	  if ((namespaceName == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2145\n");
+	  else
+	    fprintf(stderr, "reached bug index 2145\n");
+	}
+	if ((!FIXREVERTER[2145] && (namespaceName == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(localName);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	*buf = xmlStrcat(*buf, localName);
     } else {
 	*buf = xmlStrcat(*buf, BAD_CAST "(NULL)");
@@ -1331,9 +1350,24 @@ xmlSchemaFormatQNameNs(xmlChar **buf, xmlNsPtr ns, const xmlChar *localName)
 static const xmlChar *
 xmlSchemaGetComponentName(xmlSchemaBasicItemPtr item)
 {
-    if (item == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2146]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2146\n");
+      else
+        fprintf(stderr, "reached bug index 2146\n");
+    }
+    if ((!FIXREVERTER[2146] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     switch (item->type) {
 	case XML_SCHEMA_TYPE_ELEMENT:
 	    return (((xmlSchemaElementPtr) item)->name);
@@ -1389,9 +1423,24 @@ xmlSchemaGetQNameRefTargetNs(void *ref)
 static const xmlChar *
 xmlSchemaGetComponentTargetNs(xmlSchemaBasicItemPtr item)
 {
-    if (item == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2147]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2147\n");
+      else
+        fprintf(stderr, "reached bug index 2147\n");
+    }
+    if ((!FIXREVERTER[2147] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     switch (item->type) {
 	case XML_SCHEMA_TYPE_ELEMENT:
 	    return (((xmlSchemaElementPtr) item)->targetNamespace);
@@ -1505,8 +1554,23 @@ xmlSchemaGetCanonValueWhtspExt_1(xmlSchemaValPtr val,
     const xmlChar *value, *value2 = NULL;
 
 
-    if ((retValue == NULL) || (val == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2148]) {
+      if ((retValue == (void *) 0 || val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2148\n");
+      else
+        fprintf(stderr, "reached bug index 2148\n");
+    }
+    if ((!FIXREVERTER[2148] && (retValue == (void *) 0 || val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     list = xmlSchemaValueGetNext(val) ? 1 : 0;
     *retValue = NULL;
     do {
@@ -1522,8 +1586,23 @@ xmlSchemaGetCanonValueWhtspExt_1(xmlSchemaValPtr val,
 			value2 = xmlSchemaCollapseString(value);
 		    else if (ws == XML_SCHEMA_WHITESPACE_REPLACE)
 			value2 = xmlSchemaWhiteSpaceReplace(value);
-		    if (value2 != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2149]) {
+		      if ((value2 != (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2149\n");
+		      else
+		        fprintf(stderr, "reached bug index 2149\n");
+		    }
+		    if ((!FIXREVERTER[2149] && (value2 != (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			value = value2;
+			#ifdef FRCOV
+			}
+			#endif
 		}
 		break;
 	    default:
@@ -1789,7 +1868,22 @@ xmlSchemaFormatItemForReport(xmlChar **buf,
     } else
 	named = 0;
 
-    if ((named == 0) && (itemNode != NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2150]) {
+      fprintf(stderr, "reached bug index 2150\n");
+    }
+    if ((FIXREVERTER[2150] && (named == 0 )) || (!FIXREVERTER[2150] && (named == 0 && itemNode != (void *) 0 ))
+    #else
+    if (named == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(itemNode != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 2150\n");
+      #endif
+    
 	xmlNodePtr elem;
 
 	if (itemNode->type == XML_ATTRIBUTE_NODE)
@@ -1806,6 +1900,9 @@ xmlSchemaFormatItemForReport(xmlChar **buf,
 	*buf = xmlStrcat(*buf, BAD_CAST "'");
 
     }
+    #ifdef FRCOV
+    }
+    #endif
     if ((itemNode != NULL) && (itemNode->type == XML_ATTRIBUTE_NODE)) {
 	*buf = xmlStrcat(*buf, BAD_CAST ", attribute '");
 	if (itemNode->ns != NULL) {
@@ -1932,8 +2029,23 @@ xmlSchemaPErrFull(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node, int code,
 
     if (ctxt != NULL) {
         /* Don't overwrite memory errors */
-        if (ctxt->err == XML_ERR_NO_MEMORY)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2151]) {
+          if ((ctxt -> err == XML_ERR_NO_MEMORY ) && !(0))
+            fprintf(stderr, "triggered bug index 2151\n");
+          else
+            fprintf(stderr, "reached bug index 2151\n");
+        }
+        if ((!FIXREVERTER[2151] && (ctxt -> err == XML_ERR_NO_MEMORY ))
+        #else
+        if (0
+        #endif
+        )
             return;
+            #ifdef FRCOV
+            }
+            #endif
 
         if (level == XML_ERR_WARNING) {
             channel = ctxt->warning;
@@ -2080,8 +2192,23 @@ xmlSchemaVErrFull(xmlSchemaValidCtxtPtr ctxt, xmlNodePtr node, int code,
 
     if (ctxt != NULL) {
         /* Don't overwrite memory errors */
-        if (ctxt->err == XML_ERR_NO_MEMORY)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2152]) {
+          if ((ctxt -> err == XML_ERR_NO_MEMORY ) && !(0))
+            fprintf(stderr, "triggered bug index 2152\n");
+          else
+            fprintf(stderr, "reached bug index 2152\n");
+        }
+        if ((!FIXREVERTER[2152] && (ctxt -> err == XML_ERR_NO_MEMORY ))
+        #else
+        if (0
+        #endif
+        )
             return;
+            #ifdef FRCOV
+            }
+            #endif
 
         if (level == XML_ERR_WARNING) {
             channel = ctxt->warning;
@@ -2188,10 +2315,40 @@ xmlSchemaErr4Line(xmlSchemaAbstractCtxtPtr ctxt,
 		    unsigned long l;
 		    const char *f;
 		    vctxt->locFunc(vctxt->locCtxt, &f, &l);
-		    if (file == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2153]) {
+		      if ((file == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2153\n");
+		      else
+		        fprintf(stderr, "reached bug index 2153\n");
+		    }
+		    if ((!FIXREVERTER[2153] && (file == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 		        file = f;
-		    if (line == 0)
+		        #ifdef FRCOV
+		        }
+		        #endif
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2154]) {
+		      if ((line == 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2154\n");
+		      else
+		        fprintf(stderr, "reached bug index 2154\n");
+		    }
+		    if ((!FIXREVERTER[2154] && (line == 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 		        line = (int) l;
+		        #ifdef FRCOV
+		        }
+		        #endif
 		}
 	    }
 	    if ((file == NULL) && (vctxt->filename != NULL))
@@ -2361,8 +2518,23 @@ xmlSchemaInternalErr2(xmlSchemaAbstractCtxtPtr actxt,
 {
     xmlChar *msg = NULL;
 
-    if (actxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2155]) {
+      if ((actxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2155\n");
+      else
+        fprintf(stderr, "reached bug index 2155\n");
+    }
+    if ((!FIXREVERTER[2155] && (actxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     msg = xmlStrdup(BAD_CAST "Internal error: %s, ");
     msg = xmlStrcat(msg, BAD_CAST message);
     msg = xmlStrcat(msg, BAD_CAST ".\n");
@@ -2646,8 +2818,23 @@ xmlSchemaComplexTypeErr(xmlSchemaAbstractCtxtPtr actxt,
 
 	for (i = 0; i < nbval + nbneg; i++) {
 	    cur = values[i];
-	    if (cur == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2156]) {
+	      if ((cur == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2156\n");
+	      else
+	        fprintf(stderr, "reached bug index 2156\n");
+	    }
+	    if ((!FIXREVERTER[2156] && (cur == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        continue;
+	        #ifdef FRCOV
+	        }
+	        #endif
 	    if ((cur[0] == 'n') && (cur[1] == 'o') && (cur[2] == 't') &&
 	        (cur[3] == ' ')) {
 		cur += 4;
@@ -2908,8 +3095,23 @@ xmlSchemaPResCompAttrErr(xmlSchemaParserCtxtPtr ctxt,
     xmlChar *des = NULL, *strA = NULL;
 
     xmlSchemaFormatItemForReport(&des, NULL, ownerItem, ownerElem);
-    if (refTypeStr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2157]) {
+      if ((refTypeStr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2157\n");
+      else
+        fprintf(stderr, "reached bug index 2157\n");
+    }
+    if ((!FIXREVERTER[2157] && (refTypeStr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	refTypeStr = (const char *) xmlSchemaItemTypeToStr(refType);
+	#ifdef FRCOV
+	}
+	#endif
     xmlSchemaPErrExt(ctxt, ownerElem, error,
 	    NULL, NULL, NULL,
 	    "%s, attribute '%s': The QName value '%s' does not resolve to a(n) "
@@ -3342,10 +3544,25 @@ xmlSchemaNewSchema(xmlSchemaParserCtxtPtr ctxt)
     xmlSchemaPtr ret;
 
     ret = (xmlSchemaPtr) xmlMalloc(sizeof(xmlSchema));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2158]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2158\n");
+      else
+        fprintf(stderr, "reached bug index 2158\n");
+    }
+    if ((!FIXREVERTER[2158] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchema));
     ret->dict = ctxt->dict;
     xmlDictReference(ret->dict);
@@ -3366,9 +3583,24 @@ xmlSchemaNewFacet(void)
     xmlSchemaFacetPtr ret;
 
     ret = (xmlSchemaFacetPtr) xmlMalloc(sizeof(xmlSchemaFacet));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2159]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2159\n");
+      else
+        fprintf(stderr, "reached bug index 2159\n");
+    }
+    if ((!FIXREVERTER[2159] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaFacet));
 
     return (ret);
@@ -3389,10 +3621,25 @@ xmlSchemaNewAnnot(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node)
     xmlSchemaAnnotPtr ret;
 
     ret = (xmlSchemaAnnotPtr) xmlMalloc(sizeof(xmlSchemaAnnot));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2160]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2160\n");
+      else
+        fprintf(stderr, "reached bug index 2160\n");
+    }
+    if ((!FIXREVERTER[2160] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAnnot));
     ret->content = node;
     return (ret);
@@ -3404,10 +3651,25 @@ xmlSchemaItemListCreate(void)
     xmlSchemaItemListPtr ret;
 
     ret = xmlMalloc(sizeof(xmlSchemaItemList));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2161]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2161\n");
+      else
+        fprintf(stderr, "reached bug index 2161\n");
+    }
+    if ((!FIXREVERTER[2161] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaItemList));
     return (ret);
 }
@@ -3431,10 +3693,25 @@ xmlSchemaItemListAdd(xmlSchemaItemListPtr list, void *item)
         size_t newSize = list->sizeItems == 0 ? 20 : list->sizeItems * 2;
 
 	tmp = (void **) xmlRealloc(list->items, newSize * sizeof(void *));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2162]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2162\n");
+	  else
+	    fprintf(stderr, "reached bug index 2162\n");
+	}
+	if ((!FIXREVERTER[2162] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         list->items = tmp;
 	list->sizeItems = newSize;
     }
@@ -3448,14 +3725,44 @@ xmlSchemaItemListAddSize(xmlSchemaItemListPtr list,
 			 void *item)
 {
     if (list->items == NULL) {
-	if (initialSize <= 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2163]) {
+	  if ((initialSize <= 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2163\n");
+	  else
+	    fprintf(stderr, "reached bug index 2163\n");
+	}
+	if ((!FIXREVERTER[2163] && (initialSize <= 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    initialSize = 1;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	list->items = (void **) xmlMalloc(
 	    initialSize * sizeof(void *));
-	if (list->items == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2164]) {
+	  if ((list -> items == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2164\n");
+	  else
+	    fprintf(stderr, "reached bug index 2164\n");
+	}
+	if ((!FIXREVERTER[2164] && (list -> items == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	list->sizeItems = initialSize;
     } else if (list->sizeItems <= list->nbItems) {
         void **tmp;
@@ -3463,11 +3770,26 @@ xmlSchemaItemListAddSize(xmlSchemaItemListPtr list,
 	list->sizeItems *= 2;
 	tmp = (void **) xmlRealloc(list->items,
 	    list->sizeItems * sizeof(void *));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2165]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2165\n");
+	  else
+	    fprintf(stderr, "reached bug index 2165\n");
+	}
+	if ((!FIXREVERTER[2165] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL);
 	    list->sizeItems /= 2;
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         list->items = tmp;
     }
     list->items[list->nbItems++] = item;
@@ -3482,10 +3804,25 @@ xmlSchemaItemListInsert(xmlSchemaItemListPtr list, void *item, int idx)
         size_t newSize = list->sizeItems == 0 ? 20 : list->sizeItems * 2;
 
 	tmp = (void **) xmlRealloc(list->items, newSize * sizeof(void *));
-	if (tmp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2166]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2166\n");
+	  else
+	    fprintf(stderr, "reached bug index 2166\n");
+	}
+	if ((!FIXREVERTER[2166] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         list->items = tmp;
 	list->sizeItems = newSize;
     }
@@ -3551,8 +3888,23 @@ static int
 xmlSchemaItemListRemove(xmlSchemaItemListPtr list, int idx)
 {
     int i;
-    if ((list->items == NULL) || (idx >= list->nbItems))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2167]) {
+      if ((list -> items == (void *) 0 || idx >= list -> nbItems ) && !(0))
+        fprintf(stderr, "triggered bug index 2167\n");
+      else
+        fprintf(stderr, "reached bug index 2167\n");
+    }
+    if ((!FIXREVERTER[2167] && (list -> items == (void *) 0 || idx >= list -> nbItems ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (list->nbItems == 1) {
 	/* TODO: Really free the list? */
@@ -3579,8 +3931,23 @@ xmlSchemaItemListRemove(xmlSchemaItemListPtr list, int idx)
 static void
 xmlSchemaItemListFree(xmlSchemaItemListPtr list)
 {
-    if (list == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2168]) {
+      if ((list == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2168\n");
+      else
+        fprintf(stderr, "reached bug index 2168\n");
+    }
+    if ((!FIXREVERTER[2168] && (list == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (list->items != NULL)
 	xmlFree(list->items);
     xmlFree(list);
@@ -3589,8 +3956,23 @@ xmlSchemaItemListFree(xmlSchemaItemListPtr list)
 static void
 xmlSchemaBucketFree(xmlSchemaBucketPtr bucket)
 {
-    if (bucket == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2169]) {
+      if ((bucket == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2169\n");
+      else
+        fprintf(stderr, "reached bug index 2169\n");
+    }
+    if ((!FIXREVERTER[2169] && (bucket == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (bucket->globals != NULL) {
 	xmlSchemaComponentListFree(bucket->globals);
 	xmlSchemaItemListFree(bucket->globals);
@@ -3643,23 +4025,68 @@ xmlSchemaBucketCreate(xmlSchemaParserCtxtPtr pctxt,
     else
 	size = sizeof(xmlSchemaImport);
     ret = (xmlSchemaBucketPtr) xmlMalloc(size);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2170]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2170\n");
+      else
+        fprintf(stderr, "reached bug index 2170\n");
+    }
+    if ((!FIXREVERTER[2170] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, size);
     ret->targetNamespace = targetNamespace;
     ret->type = type;
     ret->globals = xmlSchemaItemListCreate();
-    if (ret->globals == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2171]) {
+      if ((ret -> globals == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2171\n");
+      else
+        fprintf(stderr, "reached bug index 2171\n");
+    }
+    if ((!FIXREVERTER[2171] && (ret -> globals == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaBucketFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->locals = xmlSchemaItemListCreate();
-    if (ret->locals == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2172]) {
+      if ((ret -> locals == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2172\n");
+      else
+        fprintf(stderr, "reached bug index 2172\n");
+    }
+    if ((!FIXREVERTER[2172] && (ret -> locals == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaBucketFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * The following will assure that only the first bucket is marked as
     * XML_SCHEMA_SCHEMA_MAIN and it points to the *main* schema.
@@ -3712,10 +4139,25 @@ xmlSchemaBucketCreate(xmlSchemaParserCtxtPtr pctxt,
 	if (mainSchema->schemasImports == NULL) {
 	    mainSchema->schemasImports = xmlHashCreateDict(5,
 		WXS_CONSTRUCTOR(pctxt)->dict);
-	    if (mainSchema->schemasImports == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2173]) {
+	      if ((mainSchema -> schemasImports == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2173\n");
+	      else
+	        fprintf(stderr, "reached bug index 2173\n");
+	    }
+	    if ((!FIXREVERTER[2173] && (mainSchema -> schemasImports == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaBucketFree(ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	if (targetNamespace == NULL)
 	    res = xmlHashAddEntry(mainSchema->schemasImports,
@@ -3741,10 +4183,25 @@ xmlSchemaBucketCreate(xmlSchemaParserCtxtPtr pctxt,
 	/* Includes got into the "includes" slot of the *main* schema. */
 	if (mainSchema->includes == NULL) {
 	    mainSchema->includes = xmlSchemaItemListCreate();
-	    if (mainSchema->includes == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2174]) {
+	      if ((mainSchema -> includes == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2174\n");
+	      else
+	        fprintf(stderr, "reached bug index 2174\n");
+	    }
+	    if ((!FIXREVERTER[2174] && (mainSchema -> includes == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaBucketFree(ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	if (xmlSchemaItemListAdd(mainSchema->includes, ret) < 0) {
 	    xmlSchemaBucketFree(ret);
@@ -3780,8 +4237,23 @@ xmlSchemaAddItemSize(xmlSchemaItemListPtr *list, int initialSize, void *item)
 static void
 xmlSchemaFreeAnnot(xmlSchemaAnnotPtr annot)
 {
-    if (annot == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2175]) {
+      if ((annot == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2175\n");
+      else
+        fprintf(stderr, "reached bug index 2175\n");
+    }
+    if ((!FIXREVERTER[2175] && (annot == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (annot->next == NULL) {
 	xmlFree(annot);
     } else {
@@ -3804,8 +4276,23 @@ xmlSchemaFreeAnnot(xmlSchemaAnnotPtr annot)
 static void
 xmlSchemaFreeNotation(xmlSchemaNotationPtr nota)
 {
-    if (nota == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2176]) {
+      if ((nota == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2176\n");
+      else
+        fprintf(stderr, "reached bug index 2176\n");
+    }
+    if ((!FIXREVERTER[2176] && (nota == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (nota->annot != NULL)
 	xmlSchemaFreeAnnot(nota->annot);
     xmlFree(nota);
@@ -3820,8 +4307,23 @@ xmlSchemaFreeNotation(xmlSchemaNotationPtr nota)
 static void
 xmlSchemaFreeAttribute(xmlSchemaAttributePtr attr)
 {
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2177]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2177\n");
+      else
+        fprintf(stderr, "reached bug index 2177\n");
+    }
+    if ((!FIXREVERTER[2177] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (attr->annot != NULL)
 	xmlSchemaFreeAnnot(attr->annot);
     if (attr->defVal != NULL)
@@ -3838,8 +4340,23 @@ xmlSchemaFreeAttribute(xmlSchemaAttributePtr attr)
 static void
 xmlSchemaFreeAttributeUse(xmlSchemaAttributeUsePtr use)
 {
-    if (use == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2178]) {
+      if ((use == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2178\n");
+      else
+        fprintf(stderr, "reached bug index 2178\n");
+    }
+    if ((!FIXREVERTER[2178] && (use == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (use->annot != NULL)
 	xmlSchemaFreeAnnot(use->annot);
     if (use->defVal != NULL)
@@ -3856,8 +4373,23 @@ xmlSchemaFreeAttributeUse(xmlSchemaAttributeUsePtr use)
 static void
 xmlSchemaFreeAttributeUseProhib(xmlSchemaAttributeUseProhibPtr prohib)
 {
-    if (prohib == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2179]) {
+      if ((prohib == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2179\n");
+      else
+        fprintf(stderr, "reached bug index 2179\n");
+    }
+    if ((!FIXREVERTER[2179] && (prohib == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     xmlFree(prohib);
 }
 
@@ -3888,8 +4420,23 @@ xmlSchemaFreeWildcardNsSet(xmlSchemaWildcardNsPtr set)
 void
 xmlSchemaFreeWildcard(xmlSchemaWildcardPtr wildcard)
 {
-    if (wildcard == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2180]) {
+      if ((wildcard == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2180\n");
+      else
+        fprintf(stderr, "reached bug index 2180\n");
+    }
+    if ((!FIXREVERTER[2180] && (wildcard == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (wildcard->annot != NULL)
         xmlSchemaFreeAnnot(wildcard->annot);
     if (wildcard->nsSet != NULL)
@@ -3908,8 +4455,23 @@ xmlSchemaFreeWildcard(xmlSchemaWildcardPtr wildcard)
 static void
 xmlSchemaFreeAttributeGroup(xmlSchemaAttributeGroupPtr attrGr)
 {
-    if (attrGr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2181]) {
+      if ((attrGr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2181\n");
+      else
+        fprintf(stderr, "reached bug index 2181\n");
+    }
+    if ((!FIXREVERTER[2181] && (attrGr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (attrGr->annot != NULL)
         xmlSchemaFreeAnnot(attrGr->annot);
     if (attrGr->attrUses != NULL)
@@ -3973,8 +4535,23 @@ xmlSchemaFreeIDC(xmlSchemaIDCPtr idcDef)
 {
     xmlSchemaIDCSelectPtr cur, prev;
 
-    if (idcDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2182]) {
+      if ((idcDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2182\n");
+      else
+        fprintf(stderr, "reached bug index 2182\n");
+    }
+    if ((!FIXREVERTER[2182] && (idcDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (idcDef->annot != NULL)
         xmlSchemaFreeAnnot(idcDef->annot);
     /* Selector */
@@ -4006,8 +4583,23 @@ xmlSchemaFreeIDC(xmlSchemaIDCPtr idcDef)
 static void
 xmlSchemaFreeElement(xmlSchemaElementPtr elem)
 {
-    if (elem == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2183]) {
+      if ((elem == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2183\n");
+      else
+        fprintf(stderr, "reached bug index 2183\n");
+    }
+    if ((!FIXREVERTER[2183] && (elem == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (elem->annot != NULL)
         xmlSchemaFreeAnnot(elem->annot);
     if (elem->contModel != NULL)
@@ -4026,8 +4618,23 @@ xmlSchemaFreeElement(xmlSchemaElementPtr elem)
 void
 xmlSchemaFreeFacet(xmlSchemaFacetPtr facet)
 {
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2184]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2184\n");
+      else
+        fprintf(stderr, "reached bug index 2184\n");
+    }
+    if ((!FIXREVERTER[2184] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (facet->val != NULL)
         xmlSchemaFreeValue(facet->val);
     if (facet->regexp != NULL)
@@ -4046,8 +4653,23 @@ xmlSchemaFreeFacet(xmlSchemaFacetPtr facet)
 void
 xmlSchemaFreeType(xmlSchemaTypePtr type)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2185]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2185\n");
+      else
+        fprintf(stderr, "reached bug index 2185\n");
+    }
+    if ((!FIXREVERTER[2185] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (type->annot != NULL)
         xmlSchemaFreeAnnot(type->annot);
     if (type->facets != NULL) {
@@ -4110,8 +4732,23 @@ xmlSchemaFreeModelGroup(xmlSchemaModelGroupPtr item)
 static void
 xmlSchemaComponentListFree(xmlSchemaItemListPtr list)
 {
-    if ((list == NULL) || (list->nbItems == 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2186]) {
+      if ((list == (void *) 0 || list -> nbItems == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2186\n");
+      else
+        fprintf(stderr, "reached bug index 2186\n");
+    }
+    if ((!FIXREVERTER[2186] && (list == (void *) 0 || list -> nbItems == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     {
 	xmlSchemaTreeItemPtr item;
 	xmlSchemaTreeItemPtr *items = (xmlSchemaTreeItemPtr *) list->items;
@@ -4119,8 +4756,23 @@ xmlSchemaComponentListFree(xmlSchemaItemListPtr list)
 
 	for (i = 0; i < list->nbItems; i++) {
 	    item = items[i];
-	    if (item == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2187]) {
+	      if ((item == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2187\n");
+	      else
+	        fprintf(stderr, "reached bug index 2187\n");
+	    }
+	    if ((!FIXREVERTER[2187] && (item == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    switch (item->type) {
 		case XML_SCHEMA_TYPE_SIMPLE:
 		case XML_SCHEMA_TYPE_COMPLEX:
@@ -4190,8 +4842,23 @@ xmlSchemaComponentListFree(xmlSchemaItemListPtr list)
 void
 xmlSchemaFree(xmlSchemaPtr schema)
 {
-    if (schema == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2188]) {
+      if ((schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2188\n");
+      else
+        fprintf(stderr, "reached bug index 2188\n");
+    }
+    if ((!FIXREVERTER[2188] && (schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * Note that those slots are not responsible for freeing
     * schema components anymore; this will now be done by
@@ -4632,8 +5299,23 @@ xmlSchemaGetPropNode(xmlNodePtr node, const char *name)
 {
     xmlAttrPtr prop;
 
-    if ((node == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2197]) {
+      if ((node == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2197\n");
+      else
+        fprintf(stderr, "reached bug index 2197\n");
+    }
+    if ((!FIXREVERTER[2197] && (node == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     prop = node->properties;
     while (prop != NULL) {
         if ((prop->ns == NULL) && xmlStrEqual(prop->name, BAD_CAST name))
@@ -4659,8 +5341,23 @@ xmlSchemaGetPropNodeNs(xmlNodePtr node, const char *uri, const char *name)
 {
     xmlAttrPtr prop;
 
-    if ((node == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2198]) {
+      if ((node == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2198\n");
+      else
+        fprintf(stderr, "reached bug index 2198\n");
+    }
+    if ((!FIXREVERTER[2198] && (node == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     prop = node->properties;
     while (prop != NULL) {
 	if ((prop->ns != NULL) &&
@@ -4679,8 +5376,23 @@ xmlSchemaGetNodeContent(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node)
     const xmlChar *ret;
 
     val = xmlNodeGetContent(node);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2199]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2199\n");
+      else
+        fprintf(stderr, "reached bug index 2199\n");
+    }
+    if ((!FIXREVERTER[2199] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	val = xmlStrdup((xmlChar *)"");
+	#ifdef FRCOV
+	}
+	#endif
     ret = xmlDictLookup(ctxt->dict, val, -1);
     xmlFree(val);
     if (ret == NULL)
@@ -4712,8 +5424,23 @@ xmlSchemaGetProp(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node,
     const xmlChar *ret;
 
     val = xmlGetNoNsProp(node, BAD_CAST name);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2200]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2200\n");
+      else
+        fprintf(stderr, "reached bug index 2200\n");
+    }
+    if ((!FIXREVERTER[2200] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret = xmlDictLookup(ctxt->dict, val, -1);
     xmlFree(val);
     return(ret);
@@ -4758,8 +5485,23 @@ xmlSchemaGetElem(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaElementPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2201]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2201\n");
+      else
+        fprintf(stderr, "reached bug index 2201\n");
+    }
+    if ((!FIXREVERTER[2201] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(elemDecl)
     }
@@ -4783,8 +5525,23 @@ xmlSchemaGetType(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaTypePtr ret = NULL;
 
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2202]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2202\n");
+      else
+        fprintf(stderr, "reached bug index 2202\n");
+    }
+    if ((!FIXREVERTER[2202] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* First try the built-in types. */
     if ((nsName != NULL) && xmlStrEqual(nsName, xmlSchemaNs)) {
 	ret = xmlSchemaGetPredefinedType(name, nsName);
@@ -4821,8 +5578,23 @@ xmlSchemaGetAttributeDecl(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaAttributePtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2203]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2203\n");
+      else
+        fprintf(stderr, "reached bug index 2203\n");
+    }
+    if ((!FIXREVERTER[2203] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(attrDecl)
     }
@@ -4846,8 +5618,23 @@ xmlSchemaGetAttributeGroup(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaAttributeGroupPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2204]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2204\n");
+      else
+        fprintf(stderr, "reached bug index 2204\n");
+    }
+    if ((!FIXREVERTER[2204] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(attrgrpDecl)
     }
@@ -4877,8 +5664,23 @@ xmlSchemaGetGroup(xmlSchemaPtr schema, const xmlChar * name,
 {
     xmlSchemaModelGroupDefPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2205]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2205\n");
+      else
+        fprintf(stderr, "reached bug index 2205\n");
+    }
+    if ((!FIXREVERTER[2205] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(groupDecl)
     }
@@ -4894,8 +5696,23 @@ xmlSchemaGetNotation(xmlSchemaPtr schema,
 {
     xmlSchemaNotationPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2206]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2206\n");
+      else
+        fprintf(stderr, "reached bug index 2206\n");
+    }
+    if ((!FIXREVERTER[2206] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(notaDecl)
     }
@@ -4910,8 +5727,23 @@ xmlSchemaGetIDC(xmlSchemaPtr schema,
 {
     xmlSchemaIDCPtr ret = NULL;
 
-    if ((name == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2207]) {
+      if ((name == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2207\n");
+      else
+        fprintf(stderr, "reached bug index 2207\n");
+    }
+    if ((!FIXREVERTER[2207] && (name == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (schema != NULL) {
 	WXS_FIND_GLOBAL_ITEM(idcDef)
     }
@@ -4969,8 +5801,23 @@ xmlSchemaGetNamedComponent(xmlSchemaPtr schema,
 static int
 xmlSchemaIsBlank(xmlChar * str, int len)
 {
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2208]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2208\n");
+      else
+        fprintf(stderr, "reached bug index 2208\n");
+    }
+    if ((!FIXREVERTER[2208] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
     if (len < 0) {
 	while (*str != 0) {
 	    if (!(IS_BLANK_CH(*str)))
@@ -5002,8 +5849,23 @@ xmlSchemaFindRedefCompInGraph(xmlSchemaBucketPtr bucket,
     xmlSchemaBasicItemPtr ret;
     int i;
 
-    if ((bucket == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2209]) {
+      if ((bucket == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2209\n");
+      else
+        fprintf(stderr, "reached bug index 2209\n");
+    }
+    if ((!FIXREVERTER[2209] && (bucket == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if ((bucket->globals == NULL) ||
 	(bucket->globals->nbItems == 0))
 	goto subschemas;
@@ -5092,14 +5954,44 @@ xmlSchemaAddNotation(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaNotationPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2210]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2210\n");
+      else
+        fprintf(stderr, "reached bug index 2210\n");
+    }
+    if ((!FIXREVERTER[2210] && (ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaNotationPtr) xmlMalloc(sizeof(xmlSchemaNotation));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2211]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2211\n");
+      else
+        fprintf(stderr, "reached bug index 2211\n");
+    }
+    if ((!FIXREVERTER[2211] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaNotation));
     ret->type = XML_SCHEMA_TYPE_NOTATION;
     ret->name = name;
@@ -5129,14 +6021,44 @@ xmlSchemaAddAttribute(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaAttributePtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2212]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2212\n");
+      else
+        fprintf(stderr, "reached bug index 2212\n");
+    }
+    if ((!FIXREVERTER[2212] && (ctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaAttributePtr) xmlMalloc(sizeof(xmlSchemaAttribute));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2213]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2213\n");
+      else
+        fprintf(stderr, "reached bug index 2213\n");
+    }
+    if ((!FIXREVERTER[2213] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAttribute));
     ret->type = XML_SCHEMA_TYPE_ATTRIBUTE;
     ret->node = node;
@@ -5169,14 +6091,44 @@ xmlSchemaAddAttributeUse(xmlSchemaParserCtxtPtr pctxt,
 {
     xmlSchemaAttributeUsePtr ret = NULL;
 
-    if (pctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2214]) {
+      if ((pctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2214\n");
+      else
+        fprintf(stderr, "reached bug index 2214\n");
+    }
+    if ((!FIXREVERTER[2214] && (pctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaAttributeUsePtr) xmlMalloc(sizeof(xmlSchemaAttributeUse));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2215]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2215\n");
+      else
+        fprintf(stderr, "reached bug index 2215\n");
+    }
+    if ((!FIXREVERTER[2215] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(pctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAttributeUse));
     ret->type = XML_SCHEMA_TYPE_ATTRIBUTE_USE;
     ret->node = node;
@@ -5202,10 +6154,25 @@ xmlSchemaAddRedef(xmlSchemaParserCtxtPtr pctxt,
 
     ret = (xmlSchemaRedefPtr)
 	xmlMalloc(sizeof(xmlSchemaRedef));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2216]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2216\n");
+      else
+        fprintf(stderr, "reached bug index 2216\n");
+    }
+    if ((!FIXREVERTER[2216] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(pctxt);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaRedef));
     ret->item = item;
     ret->targetBucket = targetBucket;
@@ -5241,15 +6208,45 @@ xmlSchemaAddAttributeGroupDefinition(xmlSchemaParserCtxtPtr pctxt,
 {
     xmlSchemaAttributeGroupPtr ret = NULL;
 
-    if ((pctxt == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2217]) {
+      if ((pctxt == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2217\n");
+      else
+        fprintf(stderr, "reached bug index 2217\n");
+    }
+    if ((!FIXREVERTER[2217] && (pctxt == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaAttributeGroupPtr)
         xmlMalloc(sizeof(xmlSchemaAttributeGroup));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2218]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2218\n");
+      else
+        fprintf(stderr, "reached bug index 2218\n");
+    }
+    if ((!FIXREVERTER[2218] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(pctxt);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAttributeGroup));
     ret->type = XML_SCHEMA_TYPE_ATTRIBUTEGROUP;
     ret->name = name;
@@ -5261,10 +6258,25 @@ xmlSchemaAddAttributeGroupDefinition(xmlSchemaParserCtxtPtr pctxt,
     if (pctxt->isRedefine) {
 	pctxt->redef = xmlSchemaAddRedef(pctxt, pctxt->redefined,
 	    ret, name, nsName);
-	if (pctxt->redef == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2219]) {
+	  if ((pctxt -> redef == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2219\n");
+	  else
+	    fprintf(stderr, "reached bug index 2219\n");
+	}
+	if ((!FIXREVERTER[2219] && (pctxt -> redef == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	pctxt->redefCounter = 0;
     }
     WXS_ADD_GLOBAL(pctxt, ret);
@@ -5291,14 +6303,44 @@ xmlSchemaAddElement(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlSchemaElementPtr ret = NULL;
 
-    if ((ctxt == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2220]) {
+      if ((ctxt == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2220\n");
+      else
+        fprintf(stderr, "reached bug index 2220\n");
+    }
+    if ((!FIXREVERTER[2220] && (ctxt == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaElementPtr) xmlMalloc(sizeof(xmlSchemaElement));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2221]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2221\n");
+      else
+        fprintf(stderr, "reached bug index 2221\n");
+    }
+    if ((!FIXREVERTER[2221] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaElement));
     ret->type = XML_SCHEMA_TYPE_ELEMENT;
     ret->name = name;
@@ -5333,14 +6375,44 @@ xmlSchemaAddType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaTypePtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2222]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2222\n");
+      else
+        fprintf(stderr, "reached bug index 2222\n");
+    }
+    if ((!FIXREVERTER[2222] && (ctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaTypePtr) xmlMalloc(sizeof(xmlSchemaType));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2223]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2223\n");
+      else
+        fprintf(stderr, "reached bug index 2223\n");
+    }
+    if ((!FIXREVERTER[2223] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaType));
     ret->type = type;
     ret->name = name;
@@ -5350,10 +6422,25 @@ xmlSchemaAddType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	if (ctxt->isRedefine) {
 	    ctxt->redef = xmlSchemaAddRedef(ctxt, ctxt->redefined,
 		ret, name, nsName);
-	    if (ctxt->redef == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2224]) {
+	      if ((ctxt -> redef == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2224\n");
+	      else
+	        fprintf(stderr, "reached bug index 2224\n");
+	    }
+	    if ((!FIXREVERTER[2224] && (ctxt -> redef == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFree(ret);
 		return(NULL);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    ctxt->redefCounter = 0;
 	}
 	WXS_ADD_GLOBAL(ctxt, ret);
@@ -5373,10 +6460,25 @@ xmlSchemaNewQNameRef(xmlSchemaParserCtxtPtr pctxt,
 
     ret = (xmlSchemaQNameRefPtr)
 	xmlMalloc(sizeof(xmlSchemaQNameRef));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2225]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2225\n");
+      else
+        fprintf(stderr, "reached bug index 2225\n");
+    }
+    if ((!FIXREVERTER[2225] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(pctxt);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->node = NULL;
     ret->type = XML_SCHEMA_EXTRA_QNAMEREF;
     ret->name = refName;
@@ -5397,10 +6499,25 @@ xmlSchemaAddAttributeUseProhib(xmlSchemaParserCtxtPtr pctxt)
 
     ret = (xmlSchemaAttributeUseProhibPtr)
 	xmlMalloc(sizeof(xmlSchemaAttributeUseProhib));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2226]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2226\n");
+      else
+        fprintf(stderr, "reached bug index 2226\n");
+    }
+    if ((!FIXREVERTER[2226] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(pctxt);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaAttributeUseProhib));
     ret->type = XML_SCHEMA_EXTRA_ATTR_USE_PROHIB;
     WXS_ADD_LOCAL(pctxt, ret);
@@ -5428,15 +6545,45 @@ xmlSchemaAddModelGroup(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlSchemaModelGroupPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2227]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2227\n");
+      else
+        fprintf(stderr, "reached bug index 2227\n");
+    }
+    if ((!FIXREVERTER[2227] && (ctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaModelGroupPtr)
 	xmlMalloc(sizeof(xmlSchemaModelGroup));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2228]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2228\n");
+      else
+        fprintf(stderr, "reached bug index 2228\n");
+    }
+    if ((!FIXREVERTER[2228] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(ctxt);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaModelGroup));
     ret->type = type;
     ret->node = node;
@@ -5466,15 +6613,45 @@ xmlSchemaAddParticle(xmlSchemaParserCtxtPtr ctxt,
 		     xmlNodePtr node, int min, int max)
 {
     xmlSchemaParticlePtr ret = NULL;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2229]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2229\n");
+      else
+        fprintf(stderr, "reached bug index 2229\n");
+    }
+    if ((!FIXREVERTER[2229] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaParticlePtr)
 	xmlMalloc(sizeof(xmlSchemaParticle));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2230]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2230\n");
+      else
+        fprintf(stderr, "reached bug index 2230\n");
+    }
+    if ((!FIXREVERTER[2230] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(ctxt);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->type = XML_SCHEMA_TYPE_PARTICLE;
     ret->annot = NULL;
     ret->node = node;
@@ -5512,15 +6689,45 @@ xmlSchemaAddModelGroupDefinition(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlSchemaModelGroupDefPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2231]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2231\n");
+      else
+        fprintf(stderr, "reached bug index 2231\n");
+    }
+    if ((!FIXREVERTER[2231] && (ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaModelGroupDefPtr)
 	xmlMalloc(sizeof(xmlSchemaModelGroupDef));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2232]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2232\n");
+      else
+        fprintf(stderr, "reached bug index 2232\n");
+    }
+    if ((!FIXREVERTER[2232] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaModelGroupDef));
     ret->name = name;
     ret->type = XML_SCHEMA_TYPE_GROUP;
@@ -5530,10 +6737,25 @@ xmlSchemaAddModelGroupDefinition(xmlSchemaParserCtxtPtr ctxt,
     if (ctxt->isRedefine) {
 	ctxt->redef = xmlSchemaAddRedef(ctxt, ctxt->redefined,
 	    ret, name, nsName);
-	if (ctxt->redef == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2233]) {
+	  if ((ctxt -> redef == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2233\n");
+	  else
+	    fprintf(stderr, "reached bug index 2233\n");
+	}
+	if ((!FIXREVERTER[2233] && (ctxt -> redef == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlFree(ret);
 	    return(NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	ctxt->redefCounter = 0;
     }
     WXS_ADD_GLOBAL(ctxt, ret);
@@ -5556,10 +6778,25 @@ xmlSchemaNewWildcardNsConstraint(xmlSchemaParserCtxtPtr ctxt)
 
     ret = (xmlSchemaWildcardNsPtr)
 	xmlMalloc(sizeof(xmlSchemaWildcardNs));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2234]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2234\n");
+      else
+        fprintf(stderr, "reached bug index 2234\n");
+    }
+    if ((!FIXREVERTER[2234] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(ctxt);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->value = NULL;
     ret->next = NULL;
     return (ret);
@@ -5572,14 +6809,44 @@ xmlSchemaAddIDC(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaIDCPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (name == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2235]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2235\n");
+      else
+        fprintf(stderr, "reached bug index 2235\n");
+    }
+    if ((!FIXREVERTER[2235] && (ctxt == (void *) 0 || schema == (void *) 0 || name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaIDCPtr) xmlMalloc(sizeof(xmlSchemaIDC));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2236]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2236\n");
+      else
+        fprintf(stderr, "reached bug index 2236\n");
+    }
+    if ((!FIXREVERTER[2236] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaIDC));
     /* The target namespace of the parent element declaration. */
     ret->targetNamespace = nsName;
@@ -5612,14 +6879,44 @@ xmlSchemaAddWildcard(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 {
     xmlSchemaWildcardPtr ret = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2237]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2237\n");
+      else
+        fprintf(stderr, "reached bug index 2237\n");
+    }
+    if ((!FIXREVERTER[2237] && (ctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = (xmlSchemaWildcardPtr) xmlMalloc(sizeof(xmlSchemaWildcard));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2238]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2238\n");
+      else
+        fprintf(stderr, "reached bug index 2238\n");
+    }
+    if ((!FIXREVERTER[2238] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaWildcard));
     ret->type = type;
     ret->node = node;
@@ -5630,8 +6927,23 @@ xmlSchemaAddWildcard(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 static void
 xmlSchemaSubstGroupFree(xmlSchemaSubstGroupPtr group)
 {
-    if (group == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2239]) {
+      if ((group == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2239\n");
+      else
+        fprintf(stderr, "reached bug index 2239\n");
+    }
+    if ((!FIXREVERTER[2239] && (group == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (group->members != NULL)
 	xmlSchemaItemListFree(group->members);
     xmlFree(group);
@@ -5657,18 +6969,48 @@ xmlSchemaSubstGroupAdd(xmlSchemaParserCtxtPtr pctxt,
     }
     /* Create a new substitution group. */
     ret = (xmlSchemaSubstGroupPtr) xmlMalloc(sizeof(xmlSchemaSubstGroup));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2240]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2240\n");
+      else
+        fprintf(stderr, "reached bug index 2240\n");
+    }
+    if ((!FIXREVERTER[2240] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaSubstGroup));
     ret->head = head;
     /* Create list of members. */
     ret->members = xmlSchemaItemListCreate();
-    if (ret->members == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2241]) {
+      if ((ret -> members == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2241\n");
+      else
+        fprintf(stderr, "reached bug index 2241\n");
+    }
+    if ((!FIXREVERTER[2241] && (ret -> members == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaSubstGroupFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /* Add subst group to hash. */
     if (xmlHashAddEntry2(WXS_SUBST_GROUPS(pctxt),
 	head->name, head->targetNamespace, ret) != 0) {
@@ -5708,14 +7050,59 @@ xmlSchemaAddElementSubstitutionMember(xmlSchemaParserCtxtPtr pctxt,
 {
     xmlSchemaSubstGroupPtr substGroup = NULL;
 
-    if ((pctxt == NULL) || (head == NULL) || (member == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2242]) {
+      if ((pctxt == (void *) 0 || head == (void *) 0 || member == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2242\n");
+      else
+        fprintf(stderr, "reached bug index 2242\n");
+    }
+    if ((!FIXREVERTER[2242] && (pctxt == (void *) 0 || head == (void *) 0 || member == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     substGroup = xmlSchemaSubstGroupGet(pctxt, head);
-    if (substGroup == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2243]) {
+      if ((substGroup == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2243\n");
+      else
+        fprintf(stderr, "reached bug index 2243\n");
+    }
+    if ((!FIXREVERTER[2243] && (substGroup == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	substGroup = xmlSchemaSubstGroupAdd(pctxt, head);
-    if (substGroup == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2244]) {
+      if ((substGroup == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2244\n");
+      else
+        fprintf(stderr, "reached bug index 2244\n");
+    }
+    if ((!FIXREVERTER[2244] && (substGroup == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (xmlSchemaItemListAdd(substGroup->members, member) == -1)
 	return(-1);
     return(0);
@@ -5865,11 +7252,26 @@ xmlSchemaPValAttrQName(xmlSchemaParserCtxtPtr ctxt,
     xmlAttrPtr attr;
 
     attr = xmlSchemaGetPropNode(ownerElem, name);
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2246]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2246\n");
+      else
+        fprintf(stderr, "reached bug index 2246\n");
+    }
+    if ((!FIXREVERTER[2246] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	*local = NULL;
 	*uri = NULL;
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (xmlSchemaPValAttrNodeQName(ctxt, schema,
 	ownerItem, attr, uri, local));
 }
@@ -5889,8 +7291,23 @@ xmlSchemaPValAttrNodeID(xmlSchemaParserCtxtPtr ctxt, xmlAttrPtr attr)
     int ret;
     const xmlChar *value;
 
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2247]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2247\n");
+      else
+        fprintf(stderr, "reached bug index 2247\n");
+    }
+    if ((!FIXREVERTER[2247] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     value = xmlSchemaGetNodeContentNoDict((xmlNodePtr) attr);
     ret = xmlValidateNCName(value, 1);
     if (ret == 0) {
@@ -5947,8 +7364,23 @@ xmlSchemaPValAttrID(xmlSchemaParserCtxtPtr ctxt,
     xmlAttrPtr attr;
 
     attr = xmlSchemaGetPropNode(ownerElem, (const char *) name);
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2248]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2248\n");
+      else
+        fprintf(stderr, "reached bug index 2248\n");
+    }
+    if ((!FIXREVERTER[2248] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlSchemaPValAttrNodeID(ctxt, attr));
 
 }
@@ -5971,11 +7403,41 @@ xmlGetMaxOccurs(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node,
     xmlAttrPtr attr;
 
     attr = xmlSchemaGetPropNode(node, "maxOccurs");
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2249]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2249\n");
+      else
+        fprintf(stderr, "reached bug index 2249\n");
+    }
+    if ((!FIXREVERTER[2249] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (def);
+	#ifdef FRCOV
+	}
+	#endif
     val = xmlSchemaGetNodeContent(ctxt, (xmlNodePtr) attr);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2250]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2250\n");
+      else
+        fprintf(stderr, "reached bug index 2250\n");
+    }
+    if ((!FIXREVERTER[2250] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (def);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (xmlStrEqual(val, (const xmlChar *) "unbounded")) {
 	if (max != UNBOUNDED) {
@@ -6047,11 +7509,41 @@ xmlGetMinOccurs(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node,
     xmlAttrPtr attr;
 
     attr = xmlSchemaGetPropNode(node, "minOccurs");
-    if (attr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2251]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2251\n");
+      else
+        fprintf(stderr, "reached bug index 2251\n");
+    }
+    if ((!FIXREVERTER[2251] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (def);
+	#ifdef FRCOV
+	}
+	#endif
     val = xmlSchemaGetNodeContent(ctxt, (xmlNodePtr) attr);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2252]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2252\n");
+      else
+        fprintf(stderr, "reached bug index 2252\n");
+    }
+    if ((!FIXREVERTER[2252] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (def);
+	#ifdef FRCOV
+	}
+	#endif
     cur = val;
     while (IS_BLANK_CH(*cur))
         cur++;
@@ -6157,8 +7649,23 @@ xmlGetBooleanProp(xmlSchemaParserCtxtPtr ctxt,
     const xmlChar *val;
 
     val = xmlSchemaGetProp(ctxt, node, name);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2253]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2253\n");
+      else
+        fprintf(stderr, "reached bug index 2253\n");
+    }
+    if ((!FIXREVERTER[2253] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (def);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * 3.2.2.1 Lexical representation
     * An instance of a datatype that is defined as `boolean`
@@ -6245,8 +7752,23 @@ xmlSchemaPValAttrNodeValue(xmlSchemaParserCtxtPtr pctxt,
     * NOTE: Should we move this to xmlschematypes.c? Hmm, but this
     * one is really meant to be used internally, so better not.
     */
-    if ((pctxt == NULL) || (type == NULL) || (attr == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2254]) {
+      if ((pctxt == (void *) 0 || type == (void *) 0 || attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2254\n");
+      else
+        fprintf(stderr, "reached bug index 2254\n");
+    }
+    if ((!FIXREVERTER[2254] && (pctxt == (void *) 0 || type == (void *) 0 || attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (type->type != XML_SCHEMA_TYPE_BASIC) {
 	PERROR_INT("xmlSchemaPValAttrNodeValue",
 	    "the given type is not a built-in type");
@@ -6312,8 +7834,23 @@ xmlSchemaPValAttrNode(xmlSchemaParserCtxtPtr ctxt,
 {
     const xmlChar *val;
 
-    if ((ctxt == NULL) || (type == NULL) || (attr == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2255]) {
+      if ((ctxt == (void *) 0 || type == (void *) 0 || attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2255\n");
+      else
+        fprintf(stderr, "reached bug index 2255\n");
+    }
+    if ((!FIXREVERTER[2255] && (ctxt == (void *) 0 || type == (void *) 0 || attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     val = xmlSchemaGetNodeContent(ctxt, (xmlNodePtr) attr);
     if (value != NULL)
@@ -6351,11 +7888,26 @@ xmlSchemaPValAttr(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (type == NULL)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2256]) {
+      if ((ctxt == (void *) 0 || type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2256\n");
+      else
+        fprintf(stderr, "reached bug index 2256\n");
+    }
+    if ((!FIXREVERTER[2256] && (ctxt == (void *) 0 || type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (value != NULL)
 	    *value = NULL;
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (type->type != XML_SCHEMA_TYPE_BASIC) {
 	if (value != NULL)
 	    *value = NULL;
@@ -6367,11 +7919,26 @@ xmlSchemaPValAttr(xmlSchemaParserCtxtPtr ctxt,
 	return (-1);
     }
     attr = xmlSchemaGetPropNode(ownerElem, name);
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2257]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2257\n");
+      else
+        fprintf(stderr, "reached bug index 2257\n");
+    }
+    if ((!FIXREVERTER[2257] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (value != NULL)
 	    *value = NULL;
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return (xmlSchemaPValAttrNode(ctxt, ownerItem, attr,
 	type, value));
 }
@@ -6494,8 +8061,23 @@ xmlSchemaParseAnnotation(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr node, int neede
     * {any attributes with non-schema namespace . . .}>
     * Content: (appinfo | documentation)*
     */
-    if ((ctxt == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2258]) {
+      if ((ctxt == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2258\n");
+      else
+        fprintf(stderr, "reached bug index 2258\n");
+    }
+    if ((!FIXREVERTER[2258] && (ctxt == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     if (needed)
 	ret = xmlSchemaNewAnnot(ctxt, node);
     else
@@ -6605,22 +8187,67 @@ xmlSchemaParseFacet(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlNodePtr child = NULL;
     const xmlChar *value;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2259]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2259\n");
+      else
+        fprintf(stderr, "reached bug index 2259\n");
+    }
+    if ((!FIXREVERTER[2259] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     facet = xmlSchemaNewFacet();
-    if (facet == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2260]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2260\n");
+      else
+        fprintf(stderr, "reached bug index 2260\n");
+    }
+    if ((!FIXREVERTER[2260] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     facet->node = node;
     value = xmlSchemaGetProp(ctxt, node, "value");
-    if (value == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2261]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2261\n");
+      else
+        fprintf(stderr, "reached bug index 2261\n");
+    }
+    if ((!FIXREVERTER[2261] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErr2(ctxt, node, child, XML_SCHEMAP_FACET_NO_VALUE,
                        "Facet %s has no value\n", node->name, NULL);
         xmlSchemaFreeFacet(facet);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (IS_SCHEMA(node, "minInclusive")) {
         facet->type = XML_SCHEMA_FACET_MININCLUSIVE;
     } else if (IS_SCHEMA(node, "minExclusive")) {
@@ -6724,15 +8351,45 @@ xmlSchemaParseWildcardNs(xmlSchemaParserCtxtPtr ctxt,
      */
     attr = xmlSchemaGetPropNode(node, "namespace");
     ns = xmlSchemaGetNodeContent(ctxt, (xmlNodePtr) attr);
-    if (ns == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2262]) {
+      if ((ns == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2262\n");
+      else
+        fprintf(stderr, "reached bug index 2262\n");
+    }
+    if ((!FIXREVERTER[2262] && (ns == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     if ((attr == NULL) || (xmlStrEqual(ns, BAD_CAST "##any")))
 	wildc->any = 1;
     else if (xmlStrEqual(ns, BAD_CAST "##other")) {
 	wildc->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-	if (wildc->negNsSet == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2263]) {
+	  if ((wildc -> negNsSet == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2263\n");
+	  else
+	    fprintf(stderr, "reached bug index 2263\n");
+	}
+	if ((!FIXREVERTER[2263] && (wildc -> negNsSet == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	wildc->negNsSet->value = ctxt->targetNamespace;
     } else {
 	const xmlChar *end, *cur;
@@ -6781,16 +8438,46 @@ xmlSchemaParseWildcardNs(xmlSchemaParserCtxtPtr ctxt,
 		}
 		if (tmp == NULL) {
 		    tmp = xmlSchemaNewWildcardNsConstraint(ctxt);
-		    if (tmp == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2264]) {
+		      if ((tmp == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2264\n");
+		      else
+		        fprintf(stderr, "reached bug index 2264\n");
+		    }
+		    if ((!FIXREVERTER[2264] && (tmp == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlFree(nsItem);
 			return (-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    tmp->value = dictnsItem;
 		    tmp->next = NULL;
 		    if (wildc->nsSet == NULL)
 			wildc->nsSet = tmp;
-		    else if (lastNs != NULL)
+		    else 
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2265]) {
+		      if ((lastNs != (void *) 0  ) && !(0))
+		        fprintf(stderr, "triggered bug index 2265\n");
+		      else
+		        fprintf(stderr, "reached bug index 2265\n");
+		    }
+		    if ((!FIXREVERTER[2265] && (lastNs != (void *) 0  ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			lastNs->next = tmp;
+			#ifdef FRCOV
+			}
+			#endif
 		    lastNs = tmp;
 		}
 
@@ -6870,8 +8557,23 @@ xmlSchemaParseAny(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlAttrPtr attr;
     xmlSchemaAnnotPtr annot = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2267]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2267\n");
+      else
+        fprintf(stderr, "reached bug index 2267\n");
+    }
+    if ((!FIXREVERTER[2267] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * Check for illegal attributes.
     */
@@ -6905,8 +8607,23 @@ xmlSchemaParseAny(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     * Create & parse the wildcard.
     */
     wild = xmlSchemaAddWildcard(ctxt, schema, XML_SCHEMA_TYPE_ANY, node);
-    if (wild == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2268]) {
+      if ((wild == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2268\n");
+      else
+        fprintf(stderr, "reached bug index 2268\n");
+    }
+    if ((!FIXREVERTER[2268] && (wild == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     xmlSchemaParseWildcardNs(ctxt, schema, wild, node);
     /*
     * And now for the children...
@@ -6933,8 +8650,23 @@ xmlSchemaParseAny(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     * Create the particle.
     */
     particle = xmlSchemaAddParticle(ctxt, node, min, max);
-    if (particle == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2269]) {
+      if ((particle == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2269\n");
+      else
+        fprintf(stderr, "reached bug index 2269\n");
+    }
+    if ((!FIXREVERTER[2269] && (particle == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     particle->annot = annot;
     particle->children = (xmlSchemaTreeItemPtr) wild;
 
@@ -6959,18 +8691,63 @@ xmlSchemaParseNotation(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlSchemaNotationPtr ret;
     xmlNodePtr child = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2270]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2270\n");
+      else
+        fprintf(stderr, "reached bug index 2270\n");
+    }
+    if ((!FIXREVERTER[2270] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     name = xmlSchemaGetProp(ctxt, node, "name");
-    if (name == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2271]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2271\n");
+      else
+        fprintf(stderr, "reached bug index 2271\n");
+    }
+    if ((!FIXREVERTER[2271] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErr2(ctxt, node, child, XML_SCHEMAP_NOTATION_NO_NAME,
                        "Notation has no name\n", NULL, NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret = xmlSchemaAddNotation(ctxt, schema, name,
 	ctxt->targetNamespace, node);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2272]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2272\n");
+      else
+        fprintf(stderr, "reached bug index 2272\n");
+    }
+    if ((!FIXREVERTER[2272] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaPValAttrID(ctxt, node, BAD_CAST "id");
 
     child = node->children;
@@ -7007,14 +8784,44 @@ xmlSchemaParseAnyAttribute(xmlSchemaParserCtxtPtr ctxt,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2273]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2273\n");
+      else
+        fprintf(stderr, "reached bug index 2273\n");
+    }
+    if ((!FIXREVERTER[2273] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = xmlSchemaAddWildcard(ctxt, schema, XML_SCHEMA_TYPE_ANY_ATTRIBUTE,
 	node);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2274]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2274\n");
+      else
+        fprintf(stderr, "reached bug index 2274\n");
+    }
+    if ((!FIXREVERTER[2274] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Check for illegal attributes.
     */
@@ -7091,8 +8898,23 @@ xmlSchemaParseLocalAttribute(xmlSchemaParserCtxtPtr pctxt,
      * 3.2.3 Constraints on XML Representations of Attribute Declarations
      */
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2275]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2275\n");
+      else
+        fprintf(stderr, "reached bug index 2275\n");
+    }
+    if ((!FIXREVERTER[2275] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     attr = xmlSchemaGetPropNode(node, "ref");
     if (attr != NULL) {
 	if (xmlSchemaPValAttrNodeQName(pctxt, schema,
@@ -7221,8 +9043,23 @@ attr_next:
     /*
     * We want correct attributes.
     */
-    if (nberrors != pctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2277]) {
+      if ((nberrors != pctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 2277\n");
+      else
+        fprintf(stderr, "reached bug index 2277\n");
+    }
+    if ((!FIXREVERTER[2277] && (nberrors != pctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (! isRef) {
 	xmlSchemaAttributePtr attrDecl;
 
@@ -7241,11 +9078,26 @@ attr_next:
 		xmlSchemaInstanceNs, NULL);
 	}
 	attr = xmlSchemaGetPropNode(node, "name");
-	if (attr == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2278]) {
+	  if ((attr == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2278\n");
+	  else
+	    fprintf(stderr, "reached bug index 2278\n");
+	}
+	if ((!FIXREVERTER[2278] && (attr == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPMissingAttrErr(pctxt, XML_SCHEMAP_S4S_ATTR_MISSING,
 		NULL, node, "name", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (xmlSchemaPValAttrNode(pctxt, NULL, attr,
 	    xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME), &name) != 0) {
 	    return (NULL);
@@ -7263,21 +9115,66 @@ attr_next:
 		NULL, NULL);
 	    return (NULL);
 	}
-	if (occurs == XML_SCHEMAS_ATTR_USE_PROHIBITED)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2279]) {
+	  if ((occurs == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2279\n");
+	  else
+	    fprintf(stderr, "reached bug index 2279\n");
+	}
+	if ((!FIXREVERTER[2279] && (occurs == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto check_children;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* Create the attribute use component.
 	*/
 	use = xmlSchemaAddAttributeUse(pctxt, node);
-	if (use == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2280]) {
+	  if ((use == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2280\n");
+	  else
+	    fprintf(stderr, "reached bug index 2280\n");
+	}
+	if ((!FIXREVERTER[2280] && (use == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	use->occurs = occurs;
 	/*
 	* Create the attribute declaration.
 	*/
 	attrDecl = xmlSchemaAddAttribute(pctxt, schema, name, ns, node, 0);
-	if (attrDecl == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2281]) {
+	  if ((attrDecl == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2281\n");
+	  else
+	    fprintf(stderr, "reached bug index 2281\n");
+	}
+	if ((!FIXREVERTER[2281] && (attrDecl == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (tmpName != NULL) {
 	    attrDecl->typeName = tmpName;
 	    attrDecl->typeNs = tmpNs;
@@ -7298,8 +9195,23 @@ attr_next:
 	* Create the attribute use component.
 	*/
 	use = xmlSchemaAddAttributeUse(pctxt, node);
-	if (use == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2282]) {
+	  if ((use == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2282\n");
+	  else
+	    fprintf(stderr, "reached bug index 2282\n");
+	}
+	if ((!FIXREVERTER[2282] && (use == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* We need to resolve the reference at later stage.
 	*/
@@ -7310,8 +9222,23 @@ attr_next:
 	*/
 	ref = xmlSchemaNewQNameRef(pctxt, XML_SCHEMA_TYPE_ATTRIBUTE,
 	    tmpName, tmpNs);
-	if (ref == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2283]) {
+	  if ((ref == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2283\n");
+	  else
+	    fprintf(stderr, "reached bug index 2283\n");
+	}
+	if ((!FIXREVERTER[2283] && (ref == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* Assign the reference. This will be substituted for the
 	* referenced attribute declaration when the QName is resolved.
@@ -7320,8 +9247,23 @@ attr_next:
 	/*
 	* Value constraint.
 	*/
-	if (defValue != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2284]) {
+	  if ((defValue != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2284\n");
+	  else
+	    fprintf(stderr, "reached bug index 2284\n");
+	}
+	if ((!FIXREVERTER[2284] && (defValue != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    use->defValue = defValue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if (defValueType == WXS_ATTR_DEF_VAL_FIXED)
 	    use->flags |= XML_SCHEMA_ATTR_USE_FIXED;
     }
@@ -7397,8 +9339,23 @@ check_children:
 	* Create the attribute prohibition helper component.
 	*/
 	prohib = xmlSchemaAddAttributeUseProhib(pctxt);
-	if (prohib == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2286]) {
+	  if ((prohib == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2286\n");
+	  else
+	    fprintf(stderr, "reached bug index 2286\n");
+	}
+	if ((!FIXREVERTER[2286] && (prohib == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	prohib->node = node;
 	prohib->name = tmpName;
 	prohib->targetNamespace = tmpNs;
@@ -7477,18 +9434,48 @@ xmlSchemaParseGlobalAttribute(xmlSchemaParserCtxtPtr pctxt,
      *
      * 3.2.3 Constraints on XML Representations of Attribute Declarations
      */
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2287]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2287\n");
+      else
+        fprintf(stderr, "reached bug index 2287\n");
+    }
+    if ((!FIXREVERTER[2287] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * 3.2.3 : 3.1
     * One of ref or name must be present, but not both
     */
     attr = xmlSchemaGetPropNode(node, "name");
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2288]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2288\n");
+      else
+        fprintf(stderr, "reached bug index 2288\n");
+    }
+    if ((!FIXREVERTER[2288] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPMissingAttrErr(pctxt, XML_SCHEMAP_S4S_ATTR_MISSING,
 	    NULL, node, "name", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (xmlSchemaPValAttrNode(pctxt, NULL, attr,
 	xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME), &attrValue) != 0) {
 	return (NULL);
@@ -7521,8 +9508,23 @@ xmlSchemaParseGlobalAttribute(xmlSchemaParserCtxtPtr pctxt,
 
     ret = xmlSchemaAddAttribute(pctxt, schema, attrValue,
 	pctxt->targetNamespace, node, 1);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2289]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2289\n");
+      else
+        fprintf(stderr, "reached bug index 2289\n");
+    }
+    if ((!FIXREVERTER[2289] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     ret->flags |= XML_SCHEMAS_ATTR_GLOBAL;
 
     /*
@@ -7624,16 +9626,46 @@ xmlSchemaParseAttributeGroupRef(xmlSchemaParserCtxtPtr pctxt,
     xmlAttrPtr attr;
     const xmlChar *refNs = NULL, *ref = NULL;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2290]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2290\n");
+      else
+        fprintf(stderr, "reached bug index 2290\n");
+    }
+    if ((!FIXREVERTER[2290] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     attr = xmlSchemaGetPropNode(node, "ref");
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2291]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2291\n");
+      else
+        fprintf(stderr, "reached bug index 2291\n");
+    }
+    if ((!FIXREVERTER[2291] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPMissingAttrErr(pctxt,
 	    XML_SCHEMAP_S4S_ATTR_MISSING,
 	    NULL, node, "ref", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     xmlSchemaPValAttrNodeQName(pctxt, schema,
 	NULL, attr, &refNs, &ref);
     if (xmlSchemaCheckReference(pctxt, schema, node, attr, refNs) != 0)
@@ -7713,8 +9745,23 @@ xmlSchemaParseAttributeGroupRef(xmlSchemaParserCtxtPtr pctxt,
 	*/
 	ret = xmlSchemaNewQNameRef(pctxt,
 	    XML_SCHEMA_TYPE_ATTRIBUTEGROUP, ref, refNs);
-	if (ret == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2292]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2292\n");
+	  else
+	    fprintf(stderr, "reached bug index 2292\n");
+	}
+	if ((!FIXREVERTER[2292] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ret->node = node;
 	pctxt->redef->reference = WXS_BASIC_CAST ret;
     } else {
@@ -7725,8 +9772,23 @@ xmlSchemaParseAttributeGroupRef(xmlSchemaParserCtxtPtr pctxt,
 	*/
 	ret = xmlSchemaNewQNameRef(pctxt,
 	    XML_SCHEMA_TYPE_ATTRIBUTEGROUP, ref, refNs);
-	if (ret == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2293]) {
+	  if ((ret == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2293\n");
+	  else
+	    fprintf(stderr, "reached bug index 2293\n");
+	}
+	if ((!FIXREVERTER[2293] && (ret == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ret->node = node;
 	/* Add to pending items, to be able to resolve the reference. */
 	WXS_ADD_PENDING(pctxt, ret);
@@ -7756,16 +9818,46 @@ xmlSchemaParseAttributeGroupDefinition(xmlSchemaParserCtxtPtr pctxt,
     xmlAttrPtr attr;
     int hasRefs = 0;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2294]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2294\n");
+      else
+        fprintf(stderr, "reached bug index 2294\n");
+    }
+    if ((!FIXREVERTER[2294] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     attr = xmlSchemaGetPropNode(node, "name");
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2295]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2295\n");
+      else
+        fprintf(stderr, "reached bug index 2295\n");
+    }
+    if ((!FIXREVERTER[2295] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPMissingAttrErr(pctxt,
 	    XML_SCHEMAP_S4S_ATTR_MISSING,
 	    NULL, node, "name", NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * The name is crucial, exit if invalid.
     */
@@ -7776,8 +9868,23 @@ xmlSchemaParseAttributeGroupDefinition(xmlSchemaParserCtxtPtr pctxt,
     }
     ret = xmlSchemaAddAttributeGroupDefinition(pctxt, schema,
 	name, pctxt->targetNamespace, node);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2296]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2296\n");
+      else
+        fprintf(stderr, "reached bug index 2296\n");
+    }
+    if ((!FIXREVERTER[2296] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Check for illegal attributes.
     */
@@ -7886,8 +9993,23 @@ xmlSchemaPValAttrBlockFinal(const xmlChar *value,
     /*
     * TODO: This does not check for duplicate entries.
     */
-    if ((flags == NULL) || (value == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2297]) {
+      if ((flags == (void *) 0 || value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2297\n");
+      else
+        fprintf(stderr, "reached bug index 2297\n");
+    }
+    if ((!FIXREVERTER[2297] && (flags == (void *) 0 || value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (value[0] == 0)
 	return (0);
     if (xmlStrEqual(value, BAD_CAST "#all")) {
@@ -7975,13 +10097,28 @@ xmlSchemaCheckCSelectorXPath(xmlSchemaParserCtxtPtr ctxt,
     * TODO: 1 The {selector} must be a valid XPath expression, as defined
     * in [XPath].
     */
-    if (selector == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2298]) {
+      if ((selector == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2298\n");
+      else
+        fprintf(stderr, "reached bug index 2298\n");
+    }
+    if ((!FIXREVERTER[2298] && (selector == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErr(ctxt, idc->node,
 	    XML_SCHEMAP_INTERNAL,
 	    "Internal error: xmlSchemaCheckCSelectorXPath, "
 	    "the selector is not specified.\n", NULL, NULL);
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (attr == NULL)
 	node = idc->node;
     else
@@ -8019,11 +10156,26 @@ xmlSchemaCheckCSelectorXPath(xmlSchemaParserCtxtPtr ctxt,
 
 	    nsArray = (const xmlChar **) xmlMalloc(
 		(count * 2 + 1) * sizeof(const xmlChar *));
-	    if (nsArray == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2299]) {
+	      if ((nsArray == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2299\n");
+	      else
+	        fprintf(stderr, "reached bug index 2299\n");
+	    }
+	    if ((!FIXREVERTER[2299] && (nsArray == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaPErrMemory(ctxt);
 		xmlFree(nsList);
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    for (i = 0; i < count; i++) {
 		nsArray[2 * i] = nsList[i]->href;
 		nsArray[2 * i + 1] = nsList[i]->prefix;
@@ -8043,7 +10195,19 @@ xmlSchemaCheckCSelectorXPath(xmlSchemaParserCtxtPtr ctxt,
 	if (nsArray != NULL)
 	    xmlFree((xmlChar **) nsArray);
 
-	if (selector->xpathComp == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2300]) {
+	  if ((selector -> xpathComp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2300\n");
+	  else
+	    fprintf(stderr, "reached bug index 2300\n");
+	}
+	if ((!FIXREVERTER[2300] && (selector -> xpathComp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPCustomErr(ctxt,
 		/* TODO: Adjust error code? */
 		XML_SCHEMAP_S4S_ATTR_INVALID_VALUE,
@@ -8052,6 +10216,9 @@ xmlSchemaCheckCSelectorXPath(xmlSchemaParserCtxtPtr ctxt,
 		"compiled", selector->xpath);
 	    return (XML_SCHEMAP_S4S_ATTR_INVALID_VALUE);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     return (0);
 }
@@ -8081,8 +10248,23 @@ static xmlSchemaAnnotPtr
 xmlSchemaAddAnnotation(xmlSchemaAnnotItemPtr annItem,
 		       xmlSchemaAnnotPtr annot)
 {
-    if ((annItem == NULL) || (annot == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2301]) {
+      if ((annItem == (void *) 0 || annot == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2301\n");
+      else
+        fprintf(stderr, "reached bug index 2301\n");
+    }
+    if ((!FIXREVERTER[2301] && (annItem == (void *) 0 || annot == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     switch (annItem->type) {
 	case XML_SCHEMA_TYPE_ELEMENT: {
 		xmlSchemaElementPtr item = (xmlSchemaElementPtr) annItem;
@@ -8206,10 +10388,25 @@ xmlSchemaParseIDCSelectorAndField(xmlSchemaParserCtxtPtr ctxt,
     * Create the item.
     */
     item = (xmlSchemaIDCSelectPtr) xmlMalloc(sizeof(xmlSchemaIDCSelect));
-    if (item == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2302]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2302\n");
+      else
+        fprintf(stderr, "reached bug index 2302\n");
+    }
+    if ((!FIXREVERTER[2302] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(ctxt);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(item, 0, sizeof(xmlSchemaIDCSelect));
     /*
     * Attribute "xpath" (mandatory).
@@ -8320,8 +10517,23 @@ xmlSchemaParseIDC(xmlSchemaParserCtxtPtr ctxt,
     /* Create the component. */
     item = xmlSchemaAddIDC(ctxt, schema, name, targetNamespace,
 	idcCategory, node);
-    if (item == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2303]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2303\n");
+      else
+        fprintf(stderr, "reached bug index 2303\n");
+    }
+    if ((!FIXREVERTER[2303] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     xmlSchemaPValAttrID(ctxt, node, BAD_CAST "id");
     if (idcCategory == XML_SCHEMA_TYPE_IDC_KEYREF) {
@@ -8340,8 +10552,23 @@ xmlSchemaParseIDC(xmlSchemaParserCtxtPtr ctxt,
 	    */
 	    item->ref = xmlSchemaNewQNameRef(ctxt, XML_SCHEMA_TYPE_IDC_KEY,
 		NULL, NULL);
-	    if (item->ref == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2304]) {
+	      if ((item -> ref == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2304\n");
+	      else
+	        fprintf(stderr, "reached bug index 2304\n");
+	    }
+	    if ((!FIXREVERTER[2304] && (item -> ref == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    xmlSchemaPValAttrNodeQName(ctxt, schema,
 		NULL, attr,
 		&(item->ref->targetNamespace),
@@ -8435,8 +10662,23 @@ xmlSchemaParseElement(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     /* 3.3.3 Constraints on XML Representations of Element Declarations */
     /* TODO: Complete implementation of 3.3.6 */
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2305]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2305\n");
+      else
+        fprintf(stderr, "reached bug index 2305\n");
+    }
+    if ((!FIXREVERTER[2305] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (isElemRef != NULL)
 	*isElemRef = 0;
@@ -8448,12 +10690,27 @@ xmlSchemaParseElement(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     nameAttr = xmlSchemaGetPropNode(node, "name");
     attr = xmlSchemaGetPropNode(node, "ref");
     if ((topLevel) || (attr == NULL)) {
-	if (nameAttr == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2306]) {
+	  if ((nameAttr == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2306\n");
+	  else
+	    fprintf(stderr, "reached bug index 2306\n");
+	}
+	if ((!FIXREVERTER[2306] && (nameAttr == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPMissingAttrErr(ctxt,
 		XML_SCHEMAP_S4S_ATTR_MISSING,
 		NULL, node, "name", NULL);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else
 	isRef = 1;
 
@@ -8475,8 +10732,23 @@ xmlSchemaParseElement(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     max = xmlGetMaxOccurs(ctxt, node, 0, UNBOUNDED, 1, "(xs:nonNegativeInteger | unbounded)");
     xmlSchemaPCheckParticleCorrect_2(ctxt, NULL, node, min, max);
     particle = xmlSchemaAddParticle(ctxt, node, min, max);
-    if (particle == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2307]) {
+      if ((particle == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2307\n");
+      else
+        fprintf(stderr, "reached bug index 2307\n");
+    }
+    if ((!FIXREVERTER[2307] && (particle == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto return_null;
+	#ifdef FRCOV
+	}
+	#endif
 
     /* ret->flags |= XML_SCHEMAS_ELEM_REF; */
 
@@ -8542,8 +10814,23 @@ xmlSchemaParseElement(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	*/
 	refer = xmlSchemaNewQNameRef(ctxt, XML_SCHEMA_TYPE_ELEMENT,
 	    ref, refNs);
-	if (refer == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2308]) {
+	  if ((refer == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2308\n");
+	  else
+	    fprintf(stderr, "reached bug index 2308\n");
+	}
+	if ((!FIXREVERTER[2308] && (refer == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto return_null;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	particle->children = (xmlSchemaTreeItemPtr) refer;
 	particle->annot = annot;
 	/*
@@ -8586,9 +10873,24 @@ declaration_part:
 		ns = ctxt->targetNamespace;
 	}
 	decl = xmlSchemaAddElement(ctxt, name, ns, node, topLevel);
-	if (decl == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2309]) {
+	  if ((decl == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2309\n");
+	  else
+	    fprintf(stderr, "reached bug index 2309\n");
+	}
+	if ((!FIXREVERTER[2309] && (decl == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    goto return_null;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Check for illegal attributes.
 	*/
@@ -8797,10 +11099,40 @@ declaration_part:
 return_null:
     FREE_AND_NULL(des);
     if (annot != NULL) {
-	if (particle != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2310]) {
+	  if ((particle != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2310\n");
+	  else
+	    fprintf(stderr, "reached bug index 2310\n");
+	}
+	if ((!FIXREVERTER[2310] && (particle != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    particle->annot = NULL;
-	if (decl != NULL)
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2311]) {
+	  if ((decl != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2311\n");
+	  else
+	    fprintf(stderr, "reached bug index 2311\n");
+	}
+	if ((!FIXREVERTER[2311] && (decl != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    decl->annot = NULL;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	xmlSchemaFreeAnnot(annot);
     }
     return (NULL);
@@ -8827,8 +11159,23 @@ xmlSchemaParseUnion(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlAttrPtr attr;
     const xmlChar *cur = NULL;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2312]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2312\n");
+      else
+        fprintf(stderr, "reached bug index 2312\n");
+    }
+    if ((!FIXREVERTER[2312] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
     /*
@@ -8871,8 +11218,23 @@ xmlSchemaParseUnion(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	xmlSchemaQNameRefPtr ref;
 
 	cur = xmlSchemaGetNodeContent(ctxt, (xmlNodePtr) attr);
-        if (cur == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2313]) {
+          if ((cur == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2313\n");
+          else
+            fprintf(stderr, "reached bug index 2313\n");
+        }
+        if ((!FIXREVERTER[2313] && (cur == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return (-1);
+            #ifdef FRCOV
+            }
+            #endif
 	type->base = cur;
 	do {
 	    while (IS_BLANK_CH(*cur))
@@ -8883,10 +11245,25 @@ xmlSchemaParseUnion(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    if (end == cur)
 		break;
 	    tmp = xmlStrndup(cur, end - cur);
-            if (tmp == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2314]) {
+              if ((tmp == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2314\n");
+              else
+                fprintf(stderr, "reached bug index 2314\n");
+            }
+            if ((!FIXREVERTER[2314] && (tmp == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 xmlSchemaPErrMemory(ctxt);
                 return (-1);
             }
+            #ifdef FRCOV
+            }
+            #endif
 	    if (xmlSchemaPValAttrNodeQNameValue(ctxt, schema,
 		NULL, attr, BAD_CAST tmp, &nsName, &localName) == 0) {
 		/*
@@ -8894,11 +11271,26 @@ xmlSchemaParseUnion(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 		*/
 		link = (xmlSchemaTypeLinkPtr)
 		    xmlMalloc(sizeof(xmlSchemaTypeLink));
-		if (link == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2315]) {
+		  if ((link == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2315\n");
+		  else
+		    fprintf(stderr, "reached bug index 2315\n");
+		}
+		if ((!FIXREVERTER[2315] && (link == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaPErrMemory(ctxt);
 	            FREE_AND_NULL(tmp)
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		link->type = NULL;
 		link->next = NULL;
 		if (lastLink == NULL)
@@ -8911,10 +11303,25 @@ xmlSchemaParseUnion(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 		*/
 		ref = xmlSchemaNewQNameRef(ctxt, XML_SCHEMA_TYPE_SIMPLE,
 		    localName, nsName);
-		if (ref == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2316]) {
+		  if ((ref == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2316\n");
+		  else
+		    fprintf(stderr, "reached bug index 2316\n");
+		}
+		if ((!FIXREVERTER[2316] && (ref == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    FREE_AND_NULL(tmp)
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		/*
 		* Assign the reference to the link, it will be resolved
 		* later during fixup of the union simple type.
@@ -9001,8 +11408,23 @@ xmlSchemaParseList(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2317]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2317\n");
+      else
+        fprintf(stderr, "reached bug index 2317\n");
+    }
+    if ((!FIXREVERTER[2317] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
     /*
@@ -9114,8 +11536,23 @@ xmlSchemaParseSimpleType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlAttrPtr attr;
     int hasRestriction = 0;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2318]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2318\n");
+      else
+        fprintf(stderr, "reached bug index 2318\n");
+    }
+    if ((!FIXREVERTER[2318] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     if (topLevel) {
 	attr = xmlSchemaGetPropNode(node, "name");
@@ -9178,8 +11615,23 @@ xmlSchemaParseSimpleType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    XML_SCHEMA_TYPE_SIMPLE,
 	    NULL, ctxt->targetNamespace, node, 0);
 #endif
-	if (type == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2319]) {
+	  if ((type == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2319\n");
+	  else
+	    fprintf(stderr, "reached bug index 2319\n");
+	}
+	if ((!FIXREVERTER[2319] && (type == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	type->type = XML_SCHEMA_TYPE_SIMPLE;
 	type->contentType = XML_SCHEMA_CONTENT_SIMPLE;
 	/*
@@ -9206,8 +11658,23 @@ xmlSchemaParseSimpleType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	*/
 	type = xmlSchemaAddType(ctxt, schema, XML_SCHEMA_TYPE_SIMPLE,
 	    attrValue, ctxt->targetNamespace, node, 1);
-	if (type == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2320]) {
+	  if ((type == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2320\n");
+	  else
+	    fprintf(stderr, "reached bug index 2320\n");
+	}
+	if ((!FIXREVERTER[2320] && (type == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	type->type = XML_SCHEMA_TYPE_SIMPLE;
 	type->contentType = XML_SCHEMA_CONTENT_SIMPLE;
 	type->flags |= XML_SCHEMAS_TYPE_GLOBAL;
@@ -9329,8 +11796,23 @@ xmlSchemaParseModelGroupDefRef(xmlSchemaParserCtxtPtr ctxt,
     const xmlChar *ref = NULL, *refNs = NULL;
     int min, max;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2321]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2321\n");
+      else
+        fprintf(stderr, "reached bug index 2321\n");
+    }
+    if ((!FIXREVERTER[2321] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     attr = xmlSchemaGetPropNode(node, "ref");
     if (attr == NULL) {
@@ -9367,8 +11849,23 @@ xmlSchemaParseModelGroupDefRef(xmlSchemaParserCtxtPtr ctxt,
     }
     xmlSchemaPValAttrID(ctxt, node, BAD_CAST "id");
     item = xmlSchemaAddParticle(ctxt, node, min, max);
-    if (item == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2322]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2322\n");
+      else
+        fprintf(stderr, "reached bug index 2322\n");
+    }
+    if ((!FIXREVERTER[2322] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Create a qname-reference and set as the term; it will be substituted
     * for the model group after the reference has been resolved.
@@ -9430,8 +11927,23 @@ xmlSchemaParseModelGroupDefinition(xmlSchemaParserCtxtPtr ctxt,
     xmlAttrPtr attr;
     const xmlChar *name;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2323]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2323\n");
+      else
+        fprintf(stderr, "reached bug index 2323\n");
+    }
+    if ((!FIXREVERTER[2323] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     attr = xmlSchemaGetPropNode(node, "name");
     if (attr == NULL) {
@@ -9446,8 +11958,23 @@ xmlSchemaParseModelGroupDefinition(xmlSchemaParserCtxtPtr ctxt,
     }
     item = xmlSchemaAddModelGroupDefinition(ctxt, schema, name,
 	ctxt->targetNamespace, node);
-    if (item == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2324]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2324\n");
+      else
+        fprintf(stderr, "reached bug index 2324\n");
+    }
+    if ((!FIXREVERTER[2324] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Check for illegal attributes.
     */
@@ -9511,7 +12038,22 @@ xmlSchemaCleanupDoc(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr root)
 {
     xmlNodePtr delete, cur;
 
-    if ((ctxt == NULL) || (root == NULL)) return;
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2325]) {
+      if ((ctxt == (void *) 0 || root == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2325\n");
+      else
+        fprintf(stderr, "reached bug index 2325\n");
+    }
+    if ((!FIXREVERTER[2325] && (ctxt == (void *) 0 || root == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return;
+    #ifdef FRCOV
+    }
+    #endif
 
     /*
      * Remove all the blank text nodes
@@ -9555,8 +12097,23 @@ xmlSchemaCleanupDoc(xmlSchemaParserCtxtPtr ctxt, xmlNodePtr root)
 
         do {
             cur = cur->parent;
-            if (cur == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2326]) {
+              if ((cur == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2326\n");
+              else
+                fprintf(stderr, "reached bug index 2326\n");
+            }
+            if ((!FIXREVERTER[2326] && (cur == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
             if (cur == root) {
                 cur = NULL;
                 break;
@@ -9635,10 +12192,25 @@ xmlSchemaParseSchemaElement(xmlSchemaParserCtxtPtr ctxt,
 	res = xmlSchemaPValAttrNode(ctxt, NULL, attr,
 	    xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYURI), NULL);
 	HFAILURE;
-	if (res != 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2327]) {
+	  if ((res != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2327\n");
+	  else
+	    fprintf(stderr, "reached bug index 2327\n");
+	}
+	if ((!FIXREVERTER[2327] && (res != 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    ctxt->stop = XML_SCHEMAP_S4S_ATTR_INVALID_VALUE;
 	    goto exit;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     attr = xmlSchemaGetPropNode(node, "elementFormDefault");
     if (attr != NULL) {
@@ -9702,8 +12274,23 @@ xmlSchemaParseSchemaElement(xmlSchemaParserCtxtPtr ctxt,
     }
 
 exit:
-    if (oldErrs != ctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2328]) {
+      if ((oldErrs != ctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 2328\n");
+      else
+        fprintf(stderr, "reached bug index 2328\n");
+    }
+    if ((!FIXREVERTER[2328] && (oldErrs != ctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	res = ctxt->err;
+	#ifdef FRCOV
+	}
+	#endif
     return(res);
 exit_failure:
     return(-1);
@@ -9726,8 +12313,23 @@ xmlSchemaParseSchemaTopLevel(xmlSchemaParserCtxtPtr ctxt,
     xmlSchemaAnnotPtr annot;
     int res = 0, oldErrs, tmpOldErrs;
 
-    if ((ctxt == NULL) || (schema == NULL) || (nodes == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2329]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || nodes == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2329\n");
+      else
+        fprintf(stderr, "reached bug index 2329\n");
+    }
+    if ((!FIXREVERTER[2329] && (ctxt == (void *) 0 || schema == (void *) 0 || nodes == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     oldErrs = ctxt->nberrors;
     child = nodes;
@@ -9746,22 +12348,67 @@ xmlSchemaParseSchemaTopLevel(xmlSchemaParserCtxtPtr ctxt,
 	    res = xmlSchemaParseImport(ctxt, schema, child);
 	    HFAILURE;
 	    HSTOP(ctxt);
-	    if (tmpOldErrs != ctxt->nberrors)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2330]) {
+	      if ((tmpOldErrs != ctxt -> nberrors ) && !(0))
+	        fprintf(stderr, "triggered bug index 2330\n");
+	      else
+	        fprintf(stderr, "reached bug index 2330\n");
+	    }
+	    if ((!FIXREVERTER[2330] && (tmpOldErrs != ctxt -> nberrors ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto exit;
+		#ifdef FRCOV
+		}
+		#endif
 	} else if (IS_SCHEMA(child, "include")) {
 	    tmpOldErrs = ctxt->nberrors;
 	    res = xmlSchemaParseInclude(ctxt, schema, child);
 	    HFAILURE;
 	    HSTOP(ctxt);
-	    if (tmpOldErrs != ctxt->nberrors)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2331]) {
+	      if ((tmpOldErrs != ctxt -> nberrors ) && !(0))
+	        fprintf(stderr, "triggered bug index 2331\n");
+	      else
+	        fprintf(stderr, "reached bug index 2331\n");
+	    }
+	    if ((!FIXREVERTER[2331] && (tmpOldErrs != ctxt -> nberrors ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto exit;
+		#ifdef FRCOV
+		}
+		#endif
 	} else if (IS_SCHEMA(child, "redefine")) {
 	    tmpOldErrs = ctxt->nberrors;
 	    res = xmlSchemaParseRedefine(ctxt, schema, child);
 	    HFAILURE;
 	    HSTOP(ctxt);
-	    if (tmpOldErrs != ctxt->nberrors)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2332]) {
+	      if ((tmpOldErrs != ctxt -> nberrors ) && !(0))
+	        fprintf(stderr, "triggered bug index 2332\n");
+	      else
+	        fprintf(stderr, "reached bug index 2332\n");
+	    }
+	    if ((!FIXREVERTER[2332] && (tmpOldErrs != ctxt -> nberrors ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto exit;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	child = child->next;
     }
@@ -9814,8 +12461,23 @@ xmlSchemaParseSchemaTopLevel(xmlSchemaParserCtxtPtr ctxt,
     }
 exit:
     ctxt->ctxtType = NULL;
-    if (oldErrs != ctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2333]) {
+      if ((oldErrs != ctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 2333\n");
+      else
+        fprintf(stderr, "reached bug index 2333\n");
+    }
+    if ((!FIXREVERTER[2333] && (oldErrs != ctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	res = ctxt->err;
+	#ifdef FRCOV
+	}
+	#endif
     return(res);
 exit_failure:
     return(-1);
@@ -9828,10 +12490,25 @@ xmlSchemaSchemaRelationCreate(void)
 
     ret = (xmlSchemaSchemaRelationPtr)
 	xmlMalloc(sizeof(xmlSchemaSchemaRelation));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2334]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2334\n");
+      else
+        fprintf(stderr, "reached bug index 2334\n");
+    }
+    if ((!FIXREVERTER[2334] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(NULL);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaSchemaRelation));
     return(ret);
 }
@@ -9914,17 +12591,47 @@ xmlSchemaParserCtxtCreate(void)
     xmlSchemaParserCtxtPtr ret;
 
     ret = (xmlSchemaParserCtxtPtr) xmlMalloc(sizeof(xmlSchemaParserCtxt));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2338]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2338\n");
+      else
+        fprintf(stderr, "reached bug index 2338\n");
+    }
+    if ((!FIXREVERTER[2338] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaPErrMemory(NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaParserCtxt));
     ret->type = XML_SCHEMA_CTXT_PARSER;
     ret->attrProhibs = xmlSchemaItemListCreate();
-    if (ret->attrProhibs == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2339]) {
+      if ((ret -> attrProhibs == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2339\n");
+      else
+        fprintf(stderr, "reached bug index 2339\n");
+    }
+    if ((!FIXREVERTER[2339] && (ret -> attrProhibs == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(ret);
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     return(ret);
 }
 
@@ -9944,12 +12651,42 @@ xmlSchemaNewParserCtxtUseDict(const char *URL, xmlDictPtr dict)
     xmlSchemaParserCtxtPtr ret;
 
     ret = xmlSchemaParserCtxtCreate();
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2340]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2340\n");
+      else
+        fprintf(stderr, "reached bug index 2340\n");
+    }
+    if ((!FIXREVERTER[2340] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret->dict = dict;
     xmlDictReference(dict);
-    if (URL != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2341]) {
+      if ((URL != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2341\n");
+      else
+        fprintf(stderr, "reached bug index 2341\n");
+    }
+    if ((!FIXREVERTER[2341] && (URL != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	ret->URL = xmlDictLookup(dict, (const xmlChar *) URL, -1);
+	#ifdef FRCOV
+	}
+	#endif
     return (ret);
 }
 
@@ -10104,15 +12841,60 @@ xmlSchemaParseNewDocWithContext(xmlSchemaParserCtxtPtr pctxt,
     /* Compile the schema doc. */
     node = xmlDocGetRootElement(bucket->doc);
     ret = xmlSchemaParseSchemaElement(pctxt, schema, node);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2343]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2343\n");
+      else
+        fprintf(stderr, "reached bug index 2343\n");
+    }
+    if ((!FIXREVERTER[2343] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit;
+	#ifdef FRCOV
+	}
+	#endif
     /* An empty schema; just get out. */
-    if (node->children == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2344]) {
+      if ((node -> children == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2344\n");
+      else
+        fprintf(stderr, "reached bug index 2344\n");
+    }
+    if ((!FIXREVERTER[2344] && (node -> children == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit;
+	#ifdef FRCOV
+	}
+	#endif
     oldErrs = pctxt->nberrors;
     ret = xmlSchemaParseSchemaTopLevel(pctxt, schema, node->children);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2345]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2345\n");
+      else
+        fprintf(stderr, "reached bug index 2345\n");
+    }
+    if ((!FIXREVERTER[2345] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * TODO: Not nice, but I'm not 100% sure we will get always an error
     * as a result of the above functions; so better rely on pctxt->err
@@ -10139,28 +12921,88 @@ xmlSchemaParseNewDoc(xmlSchemaParserCtxtPtr pctxt,
     xmlSchemaParserCtxtPtr newpctxt;
     int res = 0;
 
-    if (bucket == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2346]) {
+      if ((bucket == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2346\n");
+      else
+        fprintf(stderr, "reached bug index 2346\n");
+    }
+    if ((!FIXREVERTER[2346] && (bucket == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     if (bucket->parsed) {
 	PERROR_INT("xmlSchemaParseNewDoc",
 	    "reparsing a schema doc");
 	return(-1);
     }
-    if (bucket->doc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2347]) {
+      if ((bucket -> doc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2347\n");
+      else
+        fprintf(stderr, "reached bug index 2347\n");
+    }
+    if ((!FIXREVERTER[2347] && (bucket -> doc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaParseNewDoc",
 	    "parsing a schema doc, but there's no doc");
 	return(-1);
     }
-    if (pctxt->constructor == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2348]) {
+      if ((pctxt -> constructor == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2348\n");
+      else
+        fprintf(stderr, "reached bug index 2348\n");
+    }
+    if ((!FIXREVERTER[2348] && (pctxt -> constructor == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaParseNewDoc",
 	    "no constructor");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /* Create and init the temporary parser context. */
     newpctxt = xmlSchemaNewParserCtxtUseDict(
 	(const char *) bucket->schemaLocation, pctxt->dict);
-    if (newpctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2349]) {
+      if ((newpctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2349\n");
+      else
+        fprintf(stderr, "reached bug index 2349\n");
+    }
+    if ((!FIXREVERTER[2349] && (newpctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     newpctxt->constructor = pctxt->constructor;
     /*
     * TODO: Can we avoid that the parser knows about the main schema?
@@ -10178,8 +13020,23 @@ xmlSchemaParseNewDoc(xmlSchemaParserCtxtPtr pctxt,
     res = xmlSchemaParseNewDocWithContext(newpctxt, schema, bucket);
 
     /* Channel back errors and cleanup the temporary parser context. */
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2350]) {
+      if ((res != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2350\n");
+      else
+        fprintf(stderr, "reached bug index 2350\n");
+    }
+    if ((!FIXREVERTER[2350] && (res != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	pctxt->err = res;
+	#ifdef FRCOV
+	}
+	#endif
     pctxt->nberrors += newpctxt->nberrors;
     pctxt->counter = newpctxt->counter;
     newpctxt->constructor = NULL;
@@ -10194,10 +13051,25 @@ xmlSchemaSchemaRelationAddChild(xmlSchemaBucketPtr bucket,
 {
     xmlSchemaSchemaRelationPtr cur = bucket->relations;
 
-    if (cur == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2351]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2351\n");
+      else
+        fprintf(stderr, "reached bug index 2351\n");
+    }
+    if ((!FIXREVERTER[2351] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	bucket->relations = rel;
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     while (cur->next != NULL)
 	cur = cur->next;
     cur->next = rel;
@@ -10309,8 +13181,23 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
     * Create a relation for the graph of schemas.
     */
     relation = xmlSchemaSchemaRelationCreate();
-    if (relation == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2352]) {
+      if ((relation == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2352\n");
+      else
+        fprintf(stderr, "reached bug index 2352\n");
+    }
+    if ((!FIXREVERTER[2352] && (relation == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     xmlSchemaSchemaRelationAddChild(pctxt->constructor->bucket,
 	relation);
     relation->type = type;
@@ -10320,7 +13207,19 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
     */
     if (WXS_IS_BUCKET_IMPMAIN(type)) {
 	relation->importNamespace = importNamespace;
-	if (schemaLocation == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2353]) {
+	  if ((schemaLocation == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2353\n");
+	  else
+	    fprintf(stderr, "reached bug index 2353\n");
+	}
+	if ((!FIXREVERTER[2353] && (schemaLocation == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	    * No location; this is just an import of the namespace.
 	    * Note that we don't assign a bucket to the relation
@@ -10328,6 +13227,9 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
 	    */
 	    goto exit;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	targetNamespace = importNamespace;
     }
 
@@ -10338,8 +13240,23 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
 	    * We included/redefined and then try to import a schema,
 	    * but the new location provided for import was different.
 	    */
-	    if (schemaLocation == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2354]) {
+	      if ((schemaLocation == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2354\n");
+	      else
+	        fprintf(stderr, "reached bug index 2354\n");
+	    }
+	    if ((!FIXREVERTER[2354] && (schemaLocation == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		schemaLocation = BAD_CAST "in_memory_buffer";
+		#ifdef FRCOV
+		}
+		#endif
 	    if (!xmlStrEqual(schemaLocation,
 		bkt->schemaLocation)) {
 		xmlSchemaCustomErr(ACTXT_CAST pctxt, err,
@@ -10355,8 +13272,23 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
 	    * but the new location provided for the include/redefine
 	    * was different.
 	    */
-	    if (schemaLocation == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2355]) {
+	      if ((schemaLocation == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2355\n");
+	      else
+	        fprintf(stderr, "reached bug index 2355\n");
+	    }
+	    if ((!FIXREVERTER[2355] && (schemaLocation == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		schemaLocation = BAD_CAST "in_memory_buffer";
+		#ifdef FRCOV
+		}
+		#endif
 	    if (!xmlStrEqual(schemaLocation,
 		bkt->schemaLocation)) {
 		xmlSchemaCustomErr(ACTXT_CAST pctxt, err,
@@ -10410,8 +13342,23 @@ xmlSchemaAddSchemaDoc(xmlSchemaParserCtxtPtr pctxt,
 		    * URGENT TODO: We should report a warning here.
 		    * res = XML_SCHEMAP_SRC_IMPORT;
 		    */
-		    if (schemaLocation == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2356]) {
+		      if ((schemaLocation == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2356\n");
+		      else
+		        fprintf(stderr, "reached bug index 2356\n");
+		    }
+		    if ((!FIXREVERTER[2356] && (schemaLocation == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			schemaLocation = BAD_CAST "in_memory_buffer";
+			#ifdef FRCOV
+			}
+			#endif
 
 		    xmlSchemaCustomWarning(ACTXT_CAST pctxt,
 			XML_SCHEMAP_WARN_SKIP_SCHEMA,
@@ -10499,15 +13446,45 @@ doc_load:
 	xmlParserCtxtPtr parserCtxt;
 
 	parserCtxt = xmlNewParserCtxt();
-	if (parserCtxt == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2357]) {
+	  if ((parserCtxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2357\n");
+	  else
+	    fprintf(stderr, "reached bug index 2357\n");
+	}
+	if ((!FIXREVERTER[2357] && (parserCtxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(NULL);
 	    goto exit_failure;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
         if (pctxt->serror != NULL)
             xmlCtxtSetErrorHandler(parserCtxt, pctxt->serror, pctxt->errCtxt);
 
-	if ((pctxt->dict != NULL) && (parserCtxt->dict != NULL)) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2358]) {
+	  fprintf(stderr, "reached bug index 2358\n");
+	}
+	if ((FIXREVERTER[2358] && (pctxt -> dict != (void *) 0 )) || (!FIXREVERTER[2358] && (pctxt -> dict != (void *) 0 && parserCtxt -> dict != (void *) 0 ))
+	#else
+	if (pctxt -> dict != (void *) 0 
+	#endif
+	) {
+	  
+	#ifdef FRCOV
+	  if (!(parserCtxt -> dict != (void *) 0 ))
+	    fprintf(stderr, "triggered bug index 2358\n");
+	  #endif
+	
 	    /*
 	    * TODO: Do we have to burden the schema parser dict with all
 	    * the content of the schema doc?
@@ -10516,6 +13493,9 @@ doc_load:
 	    parserCtxt->dict = pctxt->dict;
 	    xmlDictReference(parserCtxt->dict);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (schemaLocation != NULL) {
 	    /* Parse from file. */
 	    doc = xmlCtxtReadFile(parserCtxt, (const char *) schemaLocation,
@@ -10525,8 +13505,23 @@ doc_load:
 	    doc = xmlCtxtReadMemory(parserCtxt, schemaBuffer, schemaBufferLen,
 		NULL, NULL, SCHEMAS_PARSE_OPTIONS);
 	    schemaLocation = BAD_CAST "in_memory_buffer";
-	    if (doc != NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2359]) {
+	      if ((doc != (void *) 0  ) && !(0))
+	        fprintf(stderr, "triggered bug index 2359\n");
+	      else
+	        fprintf(stderr, "reached bug index 2359\n");
+	    }
+	    if ((!FIXREVERTER[2359] && (doc != (void *) 0  ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		doc->URL = xmlStrdup(schemaLocation);
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	/*
 	* For <import>:
@@ -10582,13 +13577,28 @@ doc_load:
 
 	located = 1;
 	docElem = xmlDocGetRootElement(doc);
-	if (docElem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2360]) {
+	  if ((docElem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2360\n");
+	  else
+	    fprintf(stderr, "reached bug index 2360\n");
+	}
+	if ((!FIXREVERTER[2360] && (docElem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaCustomErr(ACTXT_CAST pctxt, XML_SCHEMAP_NOROOT,
 		invokingNode, NULL,
 		"The document '%s' has no document element",
 		schemaLocation, NULL);
 	    goto exit_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Remove all the blank text nodes.
 	*/
@@ -10616,8 +13626,23 @@ doc_load:
 	/* Only create a bucket if the schema was located. */
         bkt = xmlSchemaBucketCreate(pctxt, type,
 	    targetNamespace);
-	if (bkt == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2361]) {
+	  if ((bkt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2361\n");
+	  else
+	    fprintf(stderr, "reached bug index 2361\n");
+	}
+	if ((!FIXREVERTER[2361] && (bkt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto exit_failure;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     if (bkt != NULL) {
 	bkt->schemaLocation = schemaLocation;
@@ -10634,8 +13659,23 @@ doc_load:
 	    /*
 	    * Add it to the graph of schemas.
 	    */
-	if (relation != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2362]) {
+	  if ((relation != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2362\n");
+	  else
+	    fprintf(stderr, "reached bug index 2362\n");
+	}
+	if ((!FIXREVERTER[2362] && (relation != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    relation->bucket = bkt;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 
 exit:
@@ -10650,16 +13690,46 @@ exit:
 exit_error:
     if ((doc != NULL) && (! preserveDoc)) {
 	xmlFreeDoc(doc);
-	if (bkt != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2363]) {
+	  if ((bkt != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2363\n");
+	  else
+	    fprintf(stderr, "reached bug index 2363\n");
+	}
+	if ((!FIXREVERTER[2363] && (bkt != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    bkt->doc = NULL;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     return(pctxt->err);
 
 exit_failure:
     if ((doc != NULL) && (! preserveDoc)) {
 	xmlFreeDoc(doc);
-	if (bkt != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2364]) {
+	  if ((bkt != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2364\n");
+	  else
+	    fprintf(stderr, "reached bug index 2364\n");
+	}
+	if ((!FIXREVERTER[2364] && (bkt != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    bkt->doc = NULL;
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     return (-1);
 }
@@ -10687,8 +13757,23 @@ xmlSchemaParseImport(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
     int ret = 0;
     xmlSchemaBucketPtr bucket = NULL;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2365]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2365\n");
+      else
+        fprintf(stderr, "reached bug index 2365\n");
+    }
+    if ((!FIXREVERTER[2365] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
     * Check for illegal attributes.
@@ -10778,7 +13863,19 @@ xmlSchemaParseImport(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 	* 1.2 If the namespace [attribute] is not present, then the enclosing
 	* <schema> must have a targetNamespace [attribute].
 	*/
-	if (thisTargetNamespace == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2366]) {
+	  if ((thisTargetNamespace == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2366\n");
+	  else
+	    fprintf(stderr, "reached bug index 2366\n");
+	}
+	if ((!FIXREVERTER[2366] && (thisTargetNamespace == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPCustomErr(pctxt,
 		XML_SCHEMAP_SRC_IMPORT_1_2,
 		NULL, node,
@@ -10787,19 +13884,52 @@ xmlSchemaParseImport(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 		NULL);
 	    return (pctxt->err);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     /*
     * Locate and acquire the schema document.
     */
-    if (schemaLocation != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2367]) {
+      if ((schemaLocation != (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2367\n");
+      else
+        fprintf(stderr, "reached bug index 2367\n");
+    }
+    if ((!FIXREVERTER[2367] && (schemaLocation != (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	schemaLocation = xmlSchemaBuildAbsoluteURI(pctxt->dict,
 	    schemaLocation, node);
+	    #ifdef FRCOV
+	    }
+	    #endif
     ret = xmlSchemaAddSchemaDoc(pctxt, XML_SCHEMA_SCHEMA_IMPORT,
 	schemaLocation, NULL, NULL, 0, node, thisTargetNamespace,
 	namespaceName, &bucket);
 
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2368]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2368\n");
+      else
+        fprintf(stderr, "reached bug index 2368\n");
+    }
+    if ((!FIXREVERTER[2368] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(ret);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * For <import>: "It is *not* an error for the application
@@ -10816,9 +13946,27 @@ xmlSchemaParseImport(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 	    "Skipping the import", schemaLocation, NULL, NULL);
     }
 
-    if ((bucket != NULL) && CAN_PARSE_SCHEMA(bucket)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2369]) {
+      fprintf(stderr, "reached bug index 2369\n");
+    }
+    if ((FIXREVERTER[2369] && (bucket != (void *) 0 && bucket -> doc != (void *) 0 )) || (!FIXREVERTER[2369] && (bucket != (void *) 0 && bucket -> doc != (void *) 0 && bucket -> parsed == 0 ))
+    #else
+    if (bucket != (void *) 0 && bucket -> doc != (void *) 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(bucket -> parsed == 0 ))
+        fprintf(stderr, "triggered bug index 2369\n");
+      #endif
+    
 	ret = xmlSchemaParseNewDoc(pctxt, schema, bucket);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     return (ret);
 }
@@ -10832,9 +13980,23 @@ xmlSchemaParseIncludeOrRedefineAttrs(xmlSchemaParserCtxtPtr pctxt,
 {
     xmlAttrPtr attr;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL) ||
-	(schemaLocation == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2370]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || schemaLocation == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2370\n");
+      else
+        fprintf(stderr, "reached bug index 2370\n");
+    }
+    if ((!FIXREVERTER[2370] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || schemaLocation == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     *schemaLocation = NULL;
     /*
@@ -10879,11 +14041,26 @@ xmlSchemaParseIncludeOrRedefineAttrs(xmlSchemaParserCtxtPtr pctxt,
 	    uri = xmlBuildURI(*schemaLocation, base);
 	    xmlFree(base);
 	}
-	if (uri == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2371]) {
+	  if ((uri == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2371\n");
+	  else
+	    fprintf(stderr, "reached bug index 2371\n");
+	}
+	if ((!FIXREVERTER[2371] && (uri == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    PERROR_INT("xmlSchemaParseIncludeOrRedefine",
 		"could not build an URI from the schemaLocation")
 	    goto exit_failure;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	(*schemaLocation) = (xmlChar *) xmlDictLookup(pctxt->dict, uri, -1);
 	xmlFree(uri);
     } else {
@@ -10931,8 +14108,23 @@ xmlSchemaParseIncludeOrRedefine(xmlSchemaParserCtxtPtr pctxt,
     int isChameleon = 0, wasChameleon = 0;
     xmlSchemaBucketPtr bucket = NULL;
 
-    if ((pctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2372]) {
+      if ((pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2372\n");
+      else
+        fprintf(stderr, "reached bug index 2372\n");
+    }
+    if ((!FIXREVERTER[2372] && (pctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
     * Parse attributes. Note that the returned schemaLocation will
@@ -10940,15 +14132,45 @@ xmlSchemaParseIncludeOrRedefine(xmlSchemaParserCtxtPtr pctxt,
     */
     res = xmlSchemaParseIncludeOrRedefineAttrs(pctxt, schema,
 	node, (xmlChar **) (&schemaLocation), type);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2373]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2373\n");
+      else
+        fprintf(stderr, "reached bug index 2373\n");
+    }
+    if ((!FIXREVERTER[2373] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(res);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Load and add the schema document.
     */
     res = xmlSchemaAddSchemaDoc(pctxt, type, schemaLocation, NULL,
 	NULL, 0, node, pctxt->targetNamespace, NULL, &bucket);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2374]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2374\n");
+      else
+        fprintf(stderr, "reached bug index 2374\n");
+    }
+    if ((!FIXREVERTER[2374] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(res);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * If we get no schema bucket back, then this means that the schema
     * document could not be located or was broken XML or was not
@@ -11127,8 +14349,23 @@ xmlSchemaParseRedefine(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 #endif
     res = xmlSchemaParseIncludeOrRedefine(pctxt, schema, node,
 	XML_SCHEMA_SCHEMA_REDEFINE);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2375]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2375\n");
+      else
+        fprintf(stderr, "reached bug index 2375\n");
+    }
+    if ((!FIXREVERTER[2375] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(res);
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 }
 
@@ -11140,8 +14377,23 @@ xmlSchemaParseInclude(xmlSchemaParserCtxtPtr pctxt, xmlSchemaPtr schema,
 
     res = xmlSchemaParseIncludeOrRedefine(pctxt, schema, node,
 	XML_SCHEMA_SCHEMA_INCLUDE);
-    if (res != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2376]) {
+      if ((res != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2376\n");
+      else
+        fprintf(stderr, "reached bug index 2376\n");
+    }
+    if ((!FIXREVERTER[2376] && (res != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(res);
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 }
 
@@ -11181,14 +14433,44 @@ xmlSchemaParseModelGroup(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlAttrPtr attr;
     int min = 1, max = 1, isElemRef, hasRefs = 0;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2377]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2377\n");
+      else
+        fprintf(stderr, "reached bug index 2377\n");
+    }
+    if ((!FIXREVERTER[2377] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * Create a model group with the given compositor.
     */
     item = xmlSchemaAddModelGroup(ctxt, schema, type, node);
-    if (item == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2378]) {
+      if ((item == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2378\n");
+      else
+        fprintf(stderr, "reached bug index 2378\n");
+    }
+    if ((!FIXREVERTER[2378] && (item == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (withParticle) {
 	if (type == XML_SCHEMA_TYPE_ALL) {
@@ -11205,8 +14487,23 @@ xmlSchemaParseModelGroup(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	* Create a particle
 	*/
 	particle = xmlSchemaAddParticle(ctxt, node, min, max);
-	if (particle == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2379]) {
+	  if ((particle == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2379\n");
+	  else
+	    fprintf(stderr, "reached bug index 2379\n");
+	}
+	if ((!FIXREVERTER[2379] && (particle == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	particle->children = (xmlSchemaTreeItemPtr) item;
 	/*
 	* Check for illegal attributes.
@@ -11444,8 +14741,23 @@ xmlSchemaParseRestriction(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2380]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2380\n");
+      else
+        fprintf(stderr, "reached bug index 2380\n");
+    }
+    if ((!FIXREVERTER[2380] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
     type->flags |= XML_SCHEMAS_TYPE_DERIVATION_METHOD_RESTRICTION;
@@ -11611,8 +14923,23 @@ xmlSchemaParseRestriction(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    */
 	    type->contentTypeDef = (xmlSchemaTypePtr)
 		xmlSchemaParseSimpleType(ctxt, schema, child, 0);
-	    if ( type->contentTypeDef == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2381]) {
+	      if ((type -> contentTypeDef == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2381\n");
+	      else
+	        fprintf(stderr, "reached bug index 2381\n");
+	    }
+	    if ((!FIXREVERTER[2381] && (type -> contentTypeDef == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (NULL);
+		#ifdef FRCOV
+		}
+		#endif
 	    child = child->next;
 	}
     }
@@ -11666,11 +14993,26 @@ xmlSchemaParseRestriction(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    do {
 		facetLink = (xmlSchemaFacetLinkPtr)
 		    xmlMalloc(sizeof(xmlSchemaFacetLink));
-		if (facetLink == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2382]) {
+		  if ((facetLink == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2382\n");
+		  else
+		    fprintf(stderr, "reached bug index 2382\n");
+		}
+		if ((!FIXREVERTER[2382] && (facetLink == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaPErrMemory(ctxt);
 		    xmlFree(facetLink);
 		    return (NULL);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		facetLink->facet = facet;
 		facetLink->next = NULL;
 		if (lastFacetLink == NULL)
@@ -11748,8 +15090,23 @@ xmlSchemaParseExtension(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2383]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2383\n");
+      else
+        fprintf(stderr, "reached bug index 2383\n");
+    }
+    if ((!FIXREVERTER[2383] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
     type->flags |= XML_SCHEMAS_TYPE_DERIVATION_METHOD_EXTENSION;
@@ -11884,9 +15241,23 @@ xmlSchemaParseSimpleContent(xmlSchemaParserCtxtPtr ctxt,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL) ||
-	(hasRestrictionOrExtension == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2384]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || hasRestrictionOrExtension == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2384\n");
+      else
+        fprintf(stderr, "reached bug index 2384\n");
+    }
+    if ((!FIXREVERTER[2384] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || hasRestrictionOrExtension == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     *hasRestrictionOrExtension = 0;
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
@@ -11974,9 +15345,23 @@ xmlSchemaParseComplexContent(xmlSchemaParserCtxtPtr ctxt,
     xmlNodePtr child = NULL;
     xmlAttrPtr attr;
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL) ||
-	(hasRestrictionOrExtension == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2385]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || hasRestrictionOrExtension == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2385\n");
+      else
+        fprintf(stderr, "reached bug index 2385\n");
+    }
+    if ((!FIXREVERTER[2385] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 || hasRestrictionOrExtension == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     *hasRestrictionOrExtension = 0;
     /* Not a component, don't create it. */
     type = ctxt->ctxtType;
@@ -12075,8 +15460,23 @@ xmlSchemaParseComplexType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
     int final = 0, block = 0, hasRestrictionOrExtension = 0;
 
 
-    if ((ctxt == NULL) || (schema == NULL) || (node == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2386]) {
+      if ((ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2386\n");
+      else
+        fprintf(stderr, "reached bug index 2386\n");
+    }
+    if ((!FIXREVERTER[2386] && (ctxt == (void *) 0 || schema == (void *) 0 || node == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ctxtType = ctxt->ctxtType;
 
@@ -12107,8 +15507,23 @@ xmlSchemaParseComplexType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	    XML_SCHEMA_TYPE_COMPLEX,
 	    NULL, ctxt->targetNamespace, node, 0);
 #endif
-	if (type == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2387]) {
+	  if ((type == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2387\n");
+	  else
+	    fprintf(stderr, "reached bug index 2387\n");
+	}
+	if ((!FIXREVERTER[2387] && (type == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	name = type->name;
 	type->node = node;
 	type->type = XML_SCHEMA_TYPE_COMPLEX;
@@ -12122,8 +15537,23 @@ xmlSchemaParseComplexType(xmlSchemaParserCtxtPtr ctxt, xmlSchemaPtr schema,
 	type = xmlSchemaAddType(ctxt, schema,
 	    XML_SCHEMA_TYPE_COMPLEX,
 	    name, ctxt->targetNamespace, node, 1);
-	if (type == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2388]) {
+	  if ((type == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2388\n");
+	  else
+	    fprintf(stderr, "reached bug index 2388\n");
+	}
+	if ((!FIXREVERTER[2388] && (type == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	type->node = node;
 	type->type = XML_SCHEMA_TYPE_COMPLEX;
 	type->flags |= XML_SCHEMAS_TYPE_GLOBAL;
@@ -12410,12 +15840,42 @@ xmlSchemaNewParserCtxt(const char *URL)
 {
     xmlSchemaParserCtxtPtr ret;
 
-    if (URL == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2389]) {
+      if ((URL == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2389\n");
+      else
+        fprintf(stderr, "reached bug index 2389\n");
+    }
+    if ((!FIXREVERTER[2389] && (URL == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (NULL);
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = xmlSchemaParserCtxtCreate();
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2390]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2390\n");
+      else
+        fprintf(stderr, "reached bug index 2390\n");
+    }
+    if ((!FIXREVERTER[2390] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     ret->dict = xmlDictCreate();
     ret->URL = xmlDictLookup(ret->dict, (const xmlChar *) URL, -1);
     return (ret);
@@ -12483,8 +15943,23 @@ xmlSchemaNewDocParserCtxt(xmlDocPtr doc)
 void
 xmlSchemaFreeParserCtxt(xmlSchemaParserCtxtPtr ctxt)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2395]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2395\n");
+      else
+        fprintf(stderr, "reached bug index 2395\n");
+    }
+    if ((!FIXREVERTER[2395] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->doc != NULL && !ctxt->preserve)
         xmlFreeDoc(ctxt->doc);
     if (ctxt->vctxt != NULL) {
@@ -12527,10 +16002,37 @@ xmlSchemaBuildContentModelForSubstGroup(xmlSchemaParserCtxtPtr pctxt,
     * Wrap the substitution group with a CHOICE.
     */
     start = pctxt->state;
-    if (end == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2396]) {
+      if ((end == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2396\n");
+      else
+        fprintf(stderr, "reached bug index 2396\n");
+    }
+    if ((!FIXREVERTER[2396] && (end == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	end = xmlAutomataNewState(pctxt->am);
+	#ifdef FRCOV
+	}
+	#endif
     substGroup = xmlSchemaSubstGroupGet(pctxt, elemDecl);
-    if (substGroup == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2397]) {
+      if ((substGroup == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2397\n");
+      else
+        fprintf(stderr, "reached bug index 2397\n");
+    }
+    if ((!FIXREVERTER[2397] && (substGroup == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErr(pctxt, WXS_ITEM_NODE(particle),
 	    XML_SCHEMAP_INTERNAL,
 	    "Internal error: xmlSchemaBuildContentModelForSubstGroup, "
@@ -12538,6 +16040,9 @@ xmlSchemaBuildContentModelForSubstGroup(xmlSchemaParserCtxtPtr pctxt,
 	    "available.\n", elemDecl->name, NULL);
 	return(0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (counter >= 0) {
 	/*
 	* NOTE that we put the declaration in, even if it's abstract.
@@ -12700,17 +16205,47 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
 {
     int ret = 0, tmp2;
 
-    if (particle == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2398]) {
+      if ((particle == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2398\n");
+      else
+        fprintf(stderr, "reached bug index 2398\n");
+    }
+    if ((!FIXREVERTER[2398] && (particle == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaBuildAContentModel", "particle is NULL");
 	return(1);
     }
-    if (particle->children == NULL) {
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2399]) {
+      if ((particle -> children == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2399\n");
+      else
+        fprintf(stderr, "reached bug index 2399\n");
+    }
+    if ((!FIXREVERTER[2399] && (particle -> children == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* Just return in this case. A missing "term" of the particle
 	* might arise due to an invalid "term" component.
 	*/
 	return(1);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     switch (particle->children->type) {
 	case XML_SCHEMA_TYPE_ANY: {
@@ -12813,7 +16348,22 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
              * If max and min occurrences are default (1) then
              * simply iterate over the particles of the <sequence>.
              */
-            if ((particle->minOccurs == 1) && (particle->maxOccurs == 1)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2405]) {
+              fprintf(stderr, "reached bug index 2405\n");
+            }
+            if ((FIXREVERTER[2405] && (particle -> minOccurs == 1 )) || (!FIXREVERTER[2405] && (particle -> minOccurs == 1 && particle -> maxOccurs == 1 ))
+            #else
+            if (particle -> minOccurs == 1 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(particle -> maxOccurs == 1 ))
+                fprintf(stderr, "triggered bug index 2405\n");
+              #endif
+            
                 sub = particle->children->children;
 
                 while (sub != NULL) {
@@ -12936,6 +16486,9 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
                     }
                 }
             }
+            #ifdef FRCOV
+            }
+            #endif
             break;
         }
         case XML_SCHEMA_TYPE_CHOICE:{
@@ -13007,8 +16560,23 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
             ret = 1;
 
             sub = (xmlSchemaParticlePtr) particle->children->children;
-            if (sub == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2408]) {
+              if ((sub == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2408\n");
+              else
+                fprintf(stderr, "reached bug index 2408\n");
+            }
+            if ((!FIXREVERTER[2408] && (sub == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 break;
+                #ifdef FRCOV
+                }
+                #endif
 
             ret = 0;
 
@@ -13020,11 +16588,26 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
                 pctxt->state = tmp;
 
                 elemDecl = (xmlSchemaElementPtr) sub->children;
-                if (elemDecl == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[2409]) {
+                  if ((elemDecl == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 2409\n");
+                  else
+                    fprintf(stderr, "reached bug index 2409\n");
+                }
+                if ((!FIXREVERTER[2409] && (elemDecl == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     PERROR_INT("xmlSchemaBuildAContentModel",
                         "<element> particle has no term");
                     return(ret);
                 };
+                #ifdef FRCOV
+                }
+                #endif
                 /*
                 * NOTE: The {max occurs} of all the particles in the
                 * {particles} of the group must be 0 or 1; this is
@@ -13051,8 +16634,22 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
                                                 elemDecl->name,
                                                 elemDecl->targetNamespace,
                                                 1, 1, elemDecl);
-                    } else if ((sub->minOccurs == 0) &&
-                        (sub->maxOccurs == 1)) {
+                    } else 
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[2410]) {
+                      fprintf(stderr, "reached bug index 2410\n");
+                    }
+                    if ((FIXREVERTER[2410] && (sub -> minOccurs == 0 )) || (!FIXREVERTER[2410] && (sub -> minOccurs == 0 && sub -> maxOccurs == 1 ))
+                    #else
+                    if (sub -> minOccurs == 0 
+                    #endif
+                    ) {
+                          
+                        #ifdef FRCOV
+                          if (!(sub -> maxOccurs == 1 ))
+                            fprintf(stderr, "triggered bug index 2410\n");
+                          #endif
+                        
 
                         xmlAutomataNewCountTrans2(pctxt->am, pctxt->state,
                                                  pctxt->state,
@@ -13062,6 +16659,9 @@ xmlSchemaBuildAContentModel(xmlSchemaParserCtxtPtr pctxt,
                                                  1,
                                                  elemDecl);
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                 }
                 sub = (xmlSchemaParticlePtr) sub->next;
             }
@@ -13113,10 +16713,25 @@ xmlSchemaBuildContentModel(xmlSchemaTypePtr type,
 
     ctxt->am = NULL;
     ctxt->am = xmlNewAutomata();
-    if (ctxt->am == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2411]) {
+      if ((ctxt -> am == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2411\n");
+      else
+        fprintf(stderr, "reached bug index 2411\n");
+    }
+    if ((!FIXREVERTER[2411] && (ctxt -> am == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPErrMemory(ctxt);
         return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     ctxt->state = xmlAutomataGetInitState(ctxt->am);
     /*
     * Build the automaton.
@@ -13295,10 +16910,25 @@ xmlSchemaResolveUnionMemberTypes(xmlSchemaParserCtxtPtr ctxt,
     memberType = type->subtypes;
     while (memberType != NULL) {
 	link = (xmlSchemaTypeLinkPtr) xmlMalloc(sizeof(xmlSchemaTypeLink));
-	if (link == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2412]) {
+	  if ((link == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2412\n");
+	  else
+	    fprintf(stderr, "reached bug index 2412\n");
+	}
+	if ((!FIXREVERTER[2412] && (link == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErrMemory(ctxt);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	link->type = memberType;
 	link->next = NULL;
 	if (lastLink == NULL)
@@ -13324,16 +16954,60 @@ xmlSchemaResolveUnionMemberTypes(xmlSchemaParserCtxtPtr ctxt,
 static int
 xmlSchemaIsDerivedFromBuiltInType(xmlSchemaTypePtr type, int valType)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2413]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2413\n");
+      else
+        fprintf(stderr, "reached bug index 2413\n");
+    }
+    if ((!FIXREVERTER[2413] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     if (WXS_IS_COMPLEX(type))
 	return (0);
     if (type->type == XML_SCHEMA_TYPE_BASIC) {
-	if (type->builtInType == valType)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2414]) {
+	  if ((type -> builtInType == valType ) && !(0))
+	    fprintf(stderr, "triggered bug index 2414\n");
+	  else
+	    fprintf(stderr, "reached bug index 2414\n");
+	}
+	if ((!FIXREVERTER[2414] && (type -> builtInType == valType ))
+	#else
+	if (0
+	#endif
+	)
 	    return(1);
-	if ((type->builtInType == XML_SCHEMAS_ANYSIMPLETYPE) ||
-	    (type->builtInType == XML_SCHEMAS_ANYTYPE))
+	    #ifdef FRCOV
+	    }
+	    #endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2415]) {
+	  if ((type -> builtInType == XML_SCHEMAS_ANYSIMPLETYPE || type -> builtInType == XML_SCHEMAS_ANYTYPE ) && !(0))
+	    fprintf(stderr, "triggered bug index 2415\n");
+	  else
+	    fprintf(stderr, "reached bug index 2415\n");
+	}
+	if ((!FIXREVERTER[2415] && (type -> builtInType == XML_SCHEMAS_ANYSIMPLETYPE || type -> builtInType == XML_SCHEMAS_ANYTYPE ))
+	#else
+	if (0
+	#endif
+	)
 	    return (0);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	return(xmlSchemaIsDerivedFromBuiltInType(type->subtypes, valType));
     }
     return(xmlSchemaIsDerivedFromBuiltInType(type->subtypes, valType));
@@ -13445,15 +17119,45 @@ xmlSchemaCloneWildcardNsConstraints(xmlSchemaParserCtxtPtr ctxt,
 {
     xmlSchemaWildcardNsPtr cur, tmp, last;
 
-    if ((source == NULL) || (dest == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2416]) {
+      if ((source == (void *) 0 || dest == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2416\n");
+      else
+        fprintf(stderr, "reached bug index 2416\n");
+    }
+    if ((!FIXREVERTER[2416] && (source == (void *) 0 || dest == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     dest->any = source->any;
     cur = source->nsSet;
     last = NULL;
     while (cur != NULL) {
 	tmp = xmlSchemaNewWildcardNsConstraint(ctxt);
-	if (tmp == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2417]) {
+	  if ((tmp == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2417\n");
+	  else
+	    fprintf(stderr, "reached bug index 2417\n");
+	}
+	if ((!FIXREVERTER[2417] && (tmp == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	tmp->value = cur->value;
 	if (last == NULL)
 	    dest->nsSet = tmp;
@@ -13466,8 +17170,23 @@ xmlSchemaCloneWildcardNsConstraints(xmlSchemaParserCtxtPtr ctxt,
 	xmlSchemaFreeWildcardNsSet(dest->negNsSet);
     if (source->negNsSet != NULL) {
 	dest->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-	if (dest->negNsSet == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2418]) {
+	  if ((dest -> negNsSet == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2418\n");
+	  else
+	    fprintf(stderr, "reached bug index 2418\n");
+	}
+	if ((!FIXREVERTER[2418] && (dest -> negNsSet == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	dest->negNsSet->value = source->negNsSet->value;
     } else
 	dest->negNsSet = NULL;
@@ -13533,7 +17252,19 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
     /*
     * 2 If either O1 or O2 is any, then any must be the value
     */
-    if (completeWild->any != curWild->any) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2419]) {
+      if ((completeWild -> any != curWild -> any ) && !(0))
+        fprintf(stderr, "triggered bug index 2419\n");
+      else
+        fprintf(stderr, "reached bug index 2419\n");
+    }
+    if ((!FIXREVERTER[2419] && (completeWild -> any != curWild -> any ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (completeWild->any == 0) {
 	    completeWild->any = 1;
 	    if (completeWild->nsSet != NULL) {
@@ -13547,6 +17278,9 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 	}
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * 3 If both O1 and O2 are sets of (namespace names or `absent`),
     * then the union of those sets must be the value.
@@ -13569,8 +17303,23 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 	    }
 	    if (!found) {
 		tmp = xmlSchemaNewWildcardNsConstraint(ctxt);
-		if (tmp == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2420]) {
+		  if ((tmp == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2420\n");
+		  else
+		    fprintf(stderr, "reached bug index 2420\n");
+		}
+		if ((!FIXREVERTER[2420] && (tmp == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return (-1);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		tmp->value = cur->value;
 		tmp->next = completeWild->nsSet;
 		completeWild->nsSet = tmp;
@@ -13647,8 +17396,23 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 	    }
 	    if (completeWild->negNsSet == NULL) {
 		completeWild->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-		if (completeWild->negNsSet == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2422]) {
+		  if ((completeWild -> negNsSet == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2422\n");
+		  else
+		    fprintf(stderr, "reached bug index 2422\n");
+		}
+		if ((!FIXREVERTER[2422] && (completeWild -> negNsSet == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return (-1);
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	    completeWild->negNsSet->value = NULL;
 	} else if ((!nsFound) && absentFound) {
@@ -13673,8 +17437,23 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 		    completeWild->nsSet = NULL;
 		}
 		completeWild->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-		if (completeWild->negNsSet == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2423]) {
+		  if ((completeWild -> negNsSet == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2423\n");
+		  else
+		    fprintf(stderr, "reached bug index 2423\n");
+		}
+		if ((!FIXREVERTER[2423] && (completeWild -> negNsSet == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return (-1);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		completeWild->negNsSet->value = curWild->negNsSet->value;
 	    }
 	}
@@ -13724,8 +17503,23 @@ xmlSchemaUnionWildcards(xmlSchemaParserCtxtPtr ctxt,
 		completeWild->nsSet = NULL;
 	    }
 	    completeWild->negNsSet = xmlSchemaNewWildcardNsConstraint(ctxt);
-	    if (completeWild->negNsSet == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2424]) {
+	      if ((completeWild -> negNsSet == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2424\n");
+	      else
+	        fprintf(stderr, "reached bug index 2424\n");
+	    }
+	    if ((!FIXREVERTER[2424] && (completeWild -> negNsSet == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (-1);
+		#ifdef FRCOV
+		}
+		#endif
 	    completeWild->negNsSet->value = NULL;
 	}
 	return (0);
@@ -13820,7 +17614,19 @@ xmlSchemaIntersectWildcards(xmlSchemaParserCtxtPtr ctxt,
 	prev = NULL;
 	cur = completeWild->nsSet;
 	while (cur != NULL) {
-	    if (cur->value == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2425]) {
+	      if ((cur -> value == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2425\n");
+	      else
+	        fprintf(stderr, "reached bug index 2425\n");
+	    }
+	    if ((!FIXREVERTER[2425] && (cur -> value == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if (prev == NULL)
 		    completeWild->nsSet = cur->next;
 		else
@@ -13828,6 +17634,9 @@ xmlSchemaIntersectWildcards(xmlSchemaParserCtxtPtr ctxt,
 		xmlFree(cur);
 		break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    prev = cur;
 	    cur = cur->next;
 	}
@@ -14030,8 +17839,23 @@ static int
 xmlSchemaCheckCVCWildcardNamespace(xmlSchemaWildcardPtr wild,
 				   const xmlChar* ns)
 {
-    if (wild == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2426]) {
+      if ((wild == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2426\n");
+      else
+        fprintf(stderr, "reached bug index 2426\n");
+    }
+    if ((!FIXREVERTER[2426] && (wild == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (wild->any)
 	return(0);
@@ -14087,8 +17911,23 @@ xmlSchemaCheckDerivationOKRestriction2to4(xmlSchemaParserCtxtPtr pctxt,
 	for (i = 0; i < uses->nbItems; i++) {
 	    cur = uses->items[i];
 	    found = 0;
-	    if (baseUses == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2427]) {
+	      if ((baseUses == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2427\n");
+	      else
+	        fprintf(stderr, "reached bug index 2427\n");
+	    }
+	    if ((!FIXREVERTER[2427] && (baseUses == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto not_found;
+		#ifdef FRCOV
+		}
+		#endif
 	    for (j = 0; j < baseUses->nbItems; j++) {
 		bcur = baseUses->items[j];
 		if ((WXS_ATTRUSE_DECL_NAME(cur) ==
@@ -14169,8 +18008,22 @@ xmlSchemaCheckDerivationOKRestriction2to4(xmlSchemaParserCtxtPtr pctxt,
 			* 2.1.3.1 B's `effective value constraint` is
 			* `absent` or default.
 			*/
-			if ((bEffValue != NULL) &&
-			    (effFixed == 1)) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2428]) {
+			  fprintf(stderr, "reached bug index 2428\n");
+			}
+			if ((FIXREVERTER[2428] && (bEffValue != (void *) 0 )) || (!FIXREVERTER[2428] && (bEffValue != (void *) 0 && effFixed == 1 ))
+			#else
+			if (bEffValue != (void *) 0 
+			#endif
+			) {
+			      
+			    #ifdef FRCOV
+			      if (!(effFixed == 1 ))
+			        fprintf(stderr, "triggered bug index 2428\n");
+			      #endif
+			    
 			    const xmlChar *rEffValue = NULL;
 
 			    xmlSchemaGetEffectiveValueConstraint(bcur,
@@ -14201,6 +18054,9 @@ xmlSchemaCheckDerivationOKRestriction2to4(xmlSchemaParserCtxtPtr pctxt,
 				/* err = pctxt->err; */
 			    }
 			}
+			#ifdef FRCOV
+			}
+			#endif
 		    }
 		    break;
 		}
@@ -14245,8 +18101,23 @@ not_found:
     if (baseUses != NULL) {
 	for (j = 0; j < baseUses->nbItems; j++) {
 	    bcur = baseUses->items[j];
-	    if (bcur->occurs != XML_SCHEMAS_ATTR_USE_REQUIRED)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2429]) {
+	      if ((bcur -> occurs != 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2429\n");
+	      else
+	        fprintf(stderr, "reached bug index 2429\n");
+	    }
+	    if ((!FIXREVERTER[2429] && (bcur -> occurs != 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    found = 0;
 	    if (uses != NULL) {
 		for (i = 0; i < uses->nbItems; i++) {
@@ -14379,11 +18250,26 @@ xmlSchemaFixupTypeAttributeUses(xmlSchemaParserCtxtPtr pctxt,
     xmlSchemaAttributeUsePtr use;
     xmlSchemaItemListPtr uses, baseUses, prohibs = NULL;
 
-    if (type->baseType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2430]) {
+      if ((type -> baseType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2430\n");
+      else
+        fprintf(stderr, "reached bug index 2430\n");
+    }
+    if ((!FIXREVERTER[2430] && (type -> baseType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaFixupTypeAttributeUses",
 	    "no base type");
         return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     baseType = type->baseType;
     if (WXS_IS_TYPE_NOT_FIXED(baseType))
 	if (xmlSchemaTypeFixup(baseType, ACTXT_CAST pctxt) == -1)
@@ -14473,8 +18359,23 @@ xmlSchemaFixupTypeAttributeUses(xmlSchemaParserCtxtPtr pctxt,
 		}
 		if (uses == NULL) {
 		    type->attrUses = xmlSchemaItemListCreate();
-		    if (type->attrUses == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2431]) {
+		      if ((type -> attrUses == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2431\n");
+		      else
+		        fprintf(stderr, "reached bug index 2431\n");
+		    }
+		    if ((!FIXREVERTER[2431] && (type -> attrUses == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    uses = type->attrUses;
 		}
 		xmlSchemaItemListAddSize(uses, 2, use);
@@ -14486,8 +18387,23 @@ inherit_next: {}
 		use = baseUses->items[i];
 		if (uses == NULL) {
 		    type->attrUses = xmlSchemaItemListCreate();
-		    if (type->attrUses == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2432]) {
+		      if ((type -> attrUses == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2432\n");
+		      else
+		        fprintf(stderr, "reached bug index 2432\n");
+		    }
+		    if ((!FIXREVERTER[2432] && (type -> attrUses == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    uses = type->attrUses;
 		}
 		xmlSchemaItemListAddSize(uses, baseUses->nbItems, use);
@@ -14574,8 +18490,23 @@ exit_failure:
 static int
 xmlSchemaTypeFinalContains(xmlSchemaTypePtr type, int final)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2433]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2433\n");
+      else
+        fprintf(stderr, "reached bug index 2433\n");
+    }
+    if ((!FIXREVERTER[2433] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     if (type->flags & final)
 	return (1);
     else
@@ -14730,12 +18661,42 @@ xmlSchemaGetParticleEmptiable(xmlSchemaParticlePtr particle)
     xmlSchemaParticlePtr part;
     int emptiable;
 
-    if ((particle->children == NULL) || (particle->minOccurs == 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2434]) {
+      if ((particle -> children == (void *) 0 || particle -> minOccurs == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2434\n");
+      else
+        fprintf(stderr, "reached bug index 2434\n");
+    }
+    if ((!FIXREVERTER[2434] && (particle -> children == (void *) 0 || particle -> minOccurs == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (1);
+	#ifdef FRCOV
+	}
+	#endif
 
     part = (xmlSchemaParticlePtr) particle->children->children;
-    if (part == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2435]) {
+      if ((part == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2435\n");
+      else
+        fprintf(stderr, "reached bug index 2435\n");
+    }
+    if ((!FIXREVERTER[2435] && (part == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (1);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (part != NULL) {
         if ((part->children->type == XML_SCHEMA_TYPE_ELEMENT) ||
@@ -14775,9 +18736,23 @@ xmlSchemaIsParticleEmptiable(xmlSchemaParticlePtr particle)
     /*
     * SPEC (1) "Its {min occurs} is 0."
     */
-    if ((particle == NULL) || (particle->minOccurs == 0) ||
-	(particle->children == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2436]) {
+      if ((particle == (void *) 0 || particle -> minOccurs == 0 || particle -> children == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2436\n");
+      else
+        fprintf(stderr, "reached bug index 2436\n");
+    }
+    if ((!FIXREVERTER[2436] && (particle == (void *) 0 || particle -> minOccurs == 0 || particle -> children == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (1);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * SPEC (2) "Its {term} is a group and the minimum part of the
     * effective total range of that group, [...] is 0."
@@ -15026,8 +19001,23 @@ static void
 xmlSchemaResolveTypeReferences(xmlSchemaTypePtr typeDef,
 			 xmlSchemaParserCtxtPtr ctxt)
 {
-    if (typeDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2438]) {
+      if ((typeDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2438\n");
+      else
+        fprintf(stderr, "reached bug index 2438\n");
+    }
+    if ((!FIXREVERTER[2438] && (typeDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Resolve the base type.
@@ -15035,7 +19025,19 @@ xmlSchemaResolveTypeReferences(xmlSchemaTypePtr typeDef,
     if (typeDef->baseType == NULL) {
 	typeDef->baseType = xmlSchemaGetType(ctxt->schema,
 	    typeDef->base, typeDef->baseNs);
-	if (typeDef->baseType == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2439]) {
+	  if ((typeDef -> baseType == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2439\n");
+	  else
+	    fprintf(stderr, "reached bug index 2439\n");
+	}
+	if ((!FIXREVERTER[2439] && (typeDef -> baseType == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPResCompAttrErr(ctxt,
 		XML_SCHEMAP_SRC_RESOLVE,
 		WXS_BASIC_CAST typeDef, typeDef->node,
@@ -15043,6 +19045,9 @@ xmlSchemaResolveTypeReferences(xmlSchemaTypePtr typeDef,
 		XML_SCHEMA_TYPE_SIMPLE, NULL);
 	    return;
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     if (WXS_IS_SIMPLE(typeDef)) {
 	if (WXS_IS_UNION(typeDef)) {
@@ -15169,7 +19174,19 @@ xmlSchemaCheckSTPropsCorrect(xmlSchemaParserCtxtPtr ctxt,
     * then the Simple Type Definition component from which it is `derived`,
     * otherwise the Simple Type Definition for anySimpleType ($4.1.6).
     */
-    if (baseType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2440]) {
+      if ((baseType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2440\n");
+      else
+        fprintf(stderr, "reached bug index 2440\n");
+    }
+    if ((!FIXREVERTER[2440] && (baseType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* TODO: Think about: "modulo the impact of Missing
 	* Sub-components ($5.3)."
@@ -15181,6 +19198,9 @@ xmlSchemaCheckSTPropsCorrect(xmlSchemaParserCtxtPtr ctxt,
 	return (XML_SCHEMAP_ST_PROPS_CORRECT_1);
 
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (! WXS_IS_SIMPLE(baseType)) {
 	xmlSchemaPCustomErr(ctxt,
 	    XML_SCHEMAP_ST_PROPS_CORRECT_1,
@@ -15308,11 +19328,26 @@ xmlSchemaCheckCOSSTRestricts(xmlSchemaParserCtxtPtr pctxt,
 	    int ok = 1;
 
 	    primitive = xmlSchemaGetPrimitiveType(type);
-	    if (primitive == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2441]) {
+	      if ((primitive == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2441\n");
+	      else
+	        fprintf(stderr, "reached bug index 2441\n");
+	    }
+	    if ((!FIXREVERTER[2441] && (primitive == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		PERROR_INT("xmlSchemaCheckCOSSTRestricts",
 		    "failed to get primitive type");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    facet = type->facets;
 	    do {
 		if (xmlSchemaIsBuiltInTypeFacet(primitive, facet->type) == 0) {
@@ -15670,8 +19705,23 @@ xmlSchemaCheckCOSSTRestricts(xmlSchemaParserCtxtPtr pctxt,
 			    return (XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3);
 			}
 			member = member->next;
-                        if (baseMember != NULL)
+                        
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[2444]) {
+                          if ((baseMember != (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 2444\n");
+                          else
+                            fprintf(stderr, "reached bug index 2444\n");
+                        }
+                        if ((!FIXREVERTER[2444] && (baseMember != (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             baseMember = baseMember->next;
+                            #ifdef FRCOV
+                            }
+                            #endif
 		    }
 		}
 	    }
@@ -15762,7 +19812,19 @@ xmlSchemaCreateVCtxtOnPCtxt(xmlSchemaParserCtxtPtr ctxt)
 {
    if (ctxt->vctxt == NULL) {
 	ctxt->vctxt = xmlSchemaNewValidCtxt(NULL);
-	if (ctxt->vctxt == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2446]) {
+	  if ((ctxt -> vctxt == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2446\n");
+	  else
+	    fprintf(stderr, "reached bug index 2446\n");
+	}
+	if ((!FIXREVERTER[2446] && (ctxt -> vctxt == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErr(ctxt, NULL,
 		XML_SCHEMAP_INTERNAL,
 		"Internal error: xmlSchemaCreateVCtxtOnPCtxt, "
@@ -15770,6 +19832,9 @@ xmlSchemaCreateVCtxtOnPCtxt(xmlSchemaParserCtxtPtr ctxt)
 		NULL, NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/* TODO: Pass user data. */
 	xmlSchemaSetValidErrors(ctxt->vctxt,
 	    ctxt->error, ctxt->warning, ctxt->errCtxt);
@@ -16279,7 +20344,19 @@ xmlSchemaCheckCOSCTExtends(xmlSchemaParserCtxtPtr ctxt,
 	    /*
 	    * SPEC (1.4.3) "All of the following must be true:"
 	    */
-	    if (type->subtypes == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2448]) {
+	      if ((type -> subtypes == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2448\n");
+	      else
+	        fprintf(stderr, "reached bug index 2448\n");
+	    }
+	    if ((!FIXREVERTER[2448] && (type -> subtypes == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		/*
 		* SPEC 1.4.3.1 The {content type} of the complex type
 		* definition itself must specify a particle.
@@ -16290,6 +20367,9 @@ xmlSchemaCheckCOSCTExtends(xmlSchemaParserCtxtPtr ctxt,
 		    "The content type must specify a particle", NULL);
 		return (XML_SCHEMAP_COS_CT_EXTENDS_1_1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * SPEC (1.4.3.2) "One of the following must be true:"
 	    */
@@ -16673,7 +20753,19 @@ xmlSchemaCheckSRCCT(xmlSchemaParserCtxtPtr ctxt,
 		* simple type definition;
 		* PASS
 		*/
-		if (base->contentTypeDef == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2450]) {
+		  if ((base -> contentTypeDef == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2450\n");
+		  else
+		    fprintf(stderr, "reached bug index 2450\n");
+		}
+		if ((!FIXREVERTER[2450] && (base -> contentTypeDef == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaPCustomErr(ctxt, XML_SCHEMAP_INTERNAL,
 			WXS_BASIC_CAST type, NULL,
 			"Internal error: xmlSchemaCheckSRCCT, "
@@ -16681,6 +20773,9 @@ xmlSchemaCheckSRCCT(xmlSchemaParserCtxtPtr ctxt,
 			type->name);
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    } else if ((base->contentType == XML_SCHEMA_CONTENT_MIXED) &&
 		(WXS_IS_RESTRICTION(type))) {
 
@@ -17189,8 +21284,23 @@ xmlSchemaDeriveFacetErr(xmlSchemaParserCtxtPtr pctxt,
     msg = xmlStrdup(BAD_CAST "'");
     msg = xmlStrcat(msg, xmlSchemaFacetTypeToString(facet1->type));
     msg = xmlStrcat(msg, BAD_CAST "' has to be");
-    if (lessGreater == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2451]) {
+      if ((lessGreater == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2451\n");
+      else
+        fprintf(stderr, "reached bug index 2451\n");
+    }
+    if ((!FIXREVERTER[2451] && (lessGreater == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	msg = xmlStrcat(msg, BAD_CAST " equal to");
+	#ifdef FRCOV
+	}
+	#endif
     if (lessGreater == 1)
 	msg = xmlStrcat(msg, BAD_CAST " greater than");
     else
@@ -17736,10 +21846,25 @@ xmlSchemaDeriveAndValidateFacets(xmlSchemaParserCtxtPtr pctxt,
 	if (link == NULL) {
 	    link = (xmlSchemaFacetLinkPtr)
 		xmlMalloc(sizeof(xmlSchemaFacetLink));
-	    if (link == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2452]) {
+	      if ((link == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2452\n");
+	      else
+	        fprintf(stderr, "reached bug index 2452\n");
+	    }
+	    if ((!FIXREVERTER[2452] && (link == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaPErrMemory(pctxt);
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    link->facet = cur->facet;
 	    link->next = NULL;
 	    if (last == NULL)
@@ -17789,10 +21914,25 @@ xmlSchemaFinishMemberTypeDefinitionsProperty(xmlSchemaParserCtxtPtr pctxt,
 		    while (subLink != NULL) {
 			newLink = (xmlSchemaTypeLinkPtr)
 			    xmlMalloc(sizeof(xmlSchemaTypeLink));
-			if (newLink == NULL) {
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2453]) {
+			  if ((newLink == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 2453\n");
+			  else
+			    fprintf(stderr, "reached bug index 2453\n");
+			}
+			if ((!FIXREVERTER[2453] && (newLink == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			) {
 			    xmlSchemaPErrMemory(pctxt);
 			    return (-1);
 			}
+			#ifdef FRCOV
+			}
+			#endif
 			newLink->type = subLink->type;
 			prevLink->next = newLink;
 			prevLink = newLink;
@@ -17905,9 +22045,22 @@ xmlSchemaTypeFixupWhitespace(xmlSchemaTypePtr type)
     {
 	xmlSchemaTypePtr anc;
 
-	for (anc = type->baseType; anc != NULL &&
-		anc->builtInType != XML_SCHEMAS_ANYTYPE;
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2455])
+	  fprintf(stderr, "reached bug index 2455\n");
+	for (anc = type->baseType; (FIXREVERTER[2455] && (anc != (void *) 0 )) || (!FIXREVERTER[2455] && (anc != (void *) 0 && anc -> builtInType != XML_SCHEMAS_ANYTYPE ))
+	#else
+	for (anc = type->baseType; anc != (void *) 0 
+	#endif
+	;
 		anc = anc->baseType) {
+		  
+		#ifdef FRCOV
+		  if (!(anc -> builtInType != XML_SCHEMAS_ANYTYPE ))
+		    fprintf(stderr, "triggered bug index 2455\n");
+		  #endif
+		
 
 	    if (anc->type == XML_SCHEMA_TYPE_BASIC) {
 		if (anc->builtInType == XML_SCHEMAS_NORMSTRING) {
@@ -17922,6 +22075,9 @@ xmlSchemaTypeFixupWhitespace(xmlSchemaTypePtr type)
 		break;
 	    }
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     return (0);
 }
@@ -17940,7 +22096,19 @@ xmlSchemaFixupSimpleTypeStageOne(xmlSchemaParserCtxtPtr pctxt,
 	/*
 	* Corresponds to <simpleType><list>...
 	*/
-	if (type->subtypes == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2456]) {
+	  if ((type -> subtypes == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2456\n");
+	  else
+	    fprintf(stderr, "reached bug index 2456\n");
+	}
+	if ((!FIXREVERTER[2456] && (type -> subtypes == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	    * This one is really needed, so get out.
 	    */
@@ -17948,11 +22116,26 @@ xmlSchemaFixupSimpleTypeStageOne(xmlSchemaParserCtxtPtr pctxt,
 		"list type has no item-type assigned");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (WXS_IS_UNION(type)) {
 	/*
 	* Corresponds to <simpleType><union>...
 	*/
-	if (type->memberTypes == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2457]) {
+	  if ((type -> memberTypes == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2457\n");
+	  else
+	    fprintf(stderr, "reached bug index 2457\n");
+	}
+	if ((!FIXREVERTER[2457] && (type -> memberTypes == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	    * This one is really needed, so get out.
 	    */
@@ -17960,15 +22143,33 @@ xmlSchemaFixupSimpleTypeStageOne(xmlSchemaParserCtxtPtr pctxt,
 		"union type has no member-types assigned");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
 	/*
 	* Corresponds to <simpleType><restriction>...
 	*/
-	if (type->baseType == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2458]) {
+	  if ((type -> baseType == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2458\n");
+	  else
+	    fprintf(stderr, "reached bug index 2458\n");
+	}
+	if ((!FIXREVERTER[2458] && (type -> baseType == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    PERROR_INT("xmlSchemaFixupSimpleTypeStageOne",
 		"type has no base-type assigned");
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (WXS_IS_TYPE_NOT_FIXED_1(type->baseType))
 	    if (xmlSchemaFixupSimpleTypeStageOne(pctxt, type->baseType) == -1)
 		return(-1);
@@ -18015,11 +22216,26 @@ xmlSchemaFixupSimpleTypeStageTwo(xmlSchemaParserCtxtPtr pctxt,
     type->flags |= XML_SCHEMAS_TYPE_INTERNAL_RESOLVED;
     type->contentType = XML_SCHEMA_CONTENT_SIMPLE;
 
-    if (type->baseType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2459]) {
+      if ((type -> baseType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2459\n");
+      else
+        fprintf(stderr, "reached bug index 2459\n");
+    }
+    if ((!FIXREVERTER[2459] && (type -> baseType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaFixupSimpleTypeStageTwo",
 	    "missing baseType");
 	goto exit_failure;
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (WXS_IS_TYPE_NOT_FIXED(type->baseType))
 	xmlSchemaTypeFixup(type->baseType, ACTXT_CAST pctxt);
     /*
@@ -18079,8 +22295,23 @@ xmlSchemaFixupSimpleTypeStageTwo(xmlSchemaParserCtxtPtr pctxt,
     xmlSchemaTypeFixupOptimFacets(type);
 
 exit_error:
-    if (olderrs != pctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2460]) {
+      if ((olderrs != pctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 2460\n");
+      else
+        fprintf(stderr, "reached bug index 2460\n");
+    }
+    if ((!FIXREVERTER[2460] && (olderrs != pctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	return(pctxt->err);
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 
 exit_failure:
@@ -18097,11 +22328,26 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
     if (! WXS_IS_TYPE_NOT_FIXED(type))
 	return(0);
     type->flags |= XML_SCHEMAS_TYPE_INTERNAL_RESOLVED;
-    if (baseType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2461]) {
+      if ((baseType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2461\n");
+      else
+        fprintf(stderr, "reached bug index 2461\n");
+    }
+    if ((!FIXREVERTER[2461] && (baseType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaFixupComplexType",
 	    "missing baseType");
 	goto exit_failure;
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Fixup the base type.
     */
@@ -18176,8 +22422,23 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 		XML_SCHEMA_TYPE_SIMPLE, NULL, type->targetNamespace,
 		type->node, 0);
 #endif
-	    if (content == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2462]) {
+	      if ((content == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2462\n");
+	      else
+	        fprintf(stderr, "reached bug index 2462\n");
+	    }
+	    if ((!FIXREVERTER[2462] && (content == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto exit_failure;
+		#ifdef FRCOV
+		}
+		#endif
 	    /*
 	    * We will use the same node as for the <complexType>
 	    * to have it somehow anchored in the schema doc.
@@ -18233,7 +22494,19 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 	    * <simpleType> content, "...then the {content type} of that
 	    * complex type definition"
 	    */
-	    if (baseType->contentTypeDef == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2463]) {
+	      if ((baseType -> contentTypeDef == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2463\n");
+	      else
+	        fprintf(stderr, "reached bug index 2463\n");
+	    }
+	    if ((!FIXREVERTER[2463] && (baseType -> contentTypeDef == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		/*
 		* TODO: Check if this ever happens. xmlSchemaCheckSRCCT
 		* should have caught this already.
@@ -18247,6 +22520,9 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 		    type->name);
 		goto exit_failure;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    type->contentTypeDef = baseType->contentTypeDef;
 	} else if ((WXS_IS_SIMPLE(baseType)) && WXS_IS_EXTENSION(type)) {
 	    /*
@@ -18304,16 +22580,46 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 		    */
 		    particle = xmlSchemaAddParticle(pctxt,
 			type->node, 1, 1);
-		    if (particle == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2464]) {
+		      if ((particle == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2464\n");
+		      else
+		        fprintf(stderr, "reached bug index 2464\n");
+		    }
+		    if ((!FIXREVERTER[2464] && (particle == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * Create the model group.
 		    */ /* URGENT TODO: avoid adding to pending items. */
 		    particle->children = (xmlSchemaTreeItemPtr)
 			xmlSchemaAddModelGroup(pctxt, pctxt->schema,
 			XML_SCHEMA_TYPE_SEQUENCE, type->node);
-		    if (particle->children == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2465]) {
+		      if ((particle -> children == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2465\n");
+		      else
+		        fprintf(stderr, "reached bug index 2465\n");
+		    }
+		    if ((!FIXREVERTER[2465] && (particle -> children == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 
 		    type->subtypes = (xmlSchemaTypePtr) particle;
 		}
@@ -18429,16 +22735,46 @@ xmlSchemaFixupComplexType(xmlSchemaParserCtxtPtr pctxt,
 		    */
 		    particle = xmlSchemaAddParticle(pctxt,
 			type->node, 1, 1);
-		    if (particle == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2466]) {
+		      if ((particle == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2466\n");
+		      else
+		        fprintf(stderr, "reached bug index 2466\n");
+		    }
+		    if ((!FIXREVERTER[2466] && (particle == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * Create the "sequence" model group.
 		    */
 		    particle->children = (xmlSchemaTreeItemPtr)
 			xmlSchemaAddModelGroup(pctxt, pctxt->schema,
 			XML_SCHEMA_TYPE_SEQUENCE, type->node);
-		    if (particle->children == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2467]) {
+		      if ((particle -> children == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2467\n");
+		      else
+		        fprintf(stderr, "reached bug index 2467\n");
+		    }
+		    if ((!FIXREVERTER[2467] && (particle -> children == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			goto exit_failure;
+			#ifdef FRCOV
+			}
+			#endif
 		    WXS_TYPE_CONTENTTYPE(type) = (xmlSchemaTypePtr) particle;
 		    /*
 		    * SPEC "the particle of the {content type} of
@@ -18532,13 +22868,43 @@ static int
 xmlSchemaTypeFixup(xmlSchemaTypePtr type,
                    xmlSchemaAbstractCtxtPtr actxt)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2468]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2468\n");
+      else
+        fprintf(stderr, "reached bug index 2468\n");
+    }
+    if ((!FIXREVERTER[2468] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(0);
-    if (actxt->type != XML_SCHEMA_CTXT_PARSER) {
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2469]) {
+      if ((actxt -> type != 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 2469\n");
+      else
+        fprintf(stderr, "reached bug index 2469\n");
+    }
+    if ((!FIXREVERTER[2469] && (actxt -> type != 1 ))
+    #else
+    if (0
+    #endif
+    ) {
 	AERROR_INT("xmlSchemaTypeFixup",
 	    "this function needs a parser context");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (! WXS_IS_TYPE_NOT_FIXED(type))
 	return(0);
     if (type->type == XML_SCHEMA_TYPE_COMPLEX)
@@ -18568,8 +22934,23 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 {
     int ret = 0, ctxtGiven;
 
-    if ((facet == NULL) || (typeDecl == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2470]) {
+      if ((facet == (void *) 0 || typeDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2470\n");
+      else
+        fprintf(stderr, "reached bug index 2470\n");
+    }
+    if ((!FIXREVERTER[2470] && (facet == (void *) 0 || typeDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * TODO: will the parser context be given if used from
     * the relaxNG module?
@@ -18611,11 +22992,26 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		*/
 		if (typeDecl->type != XML_SCHEMA_TYPE_BASIC) {
 		    base = typeDecl->baseType;
-		    if (base == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2471]) {
+		      if ((base == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2471\n");
+		      else
+		        fprintf(stderr, "reached bug index 2471\n");
+		    }
+		    if ((!FIXREVERTER[2471] && (base == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			PERROR_INT("xmlSchemaCheckFacet",
 			    "a type user derived type has no base type");
 			return (-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		} else
 		    base = typeDecl;
 
@@ -18624,8 +23020,23 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		    * A context is needed if called from RelaxNG.
 		    */
 		    pctxt = xmlSchemaNewParserCtxt("*");
-		    if (pctxt == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2472]) {
+		      if ((pctxt == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2472\n");
+		      else
+		        fprintf(stderr, "reached bug index 2472\n");
+		    }
+		    if ((!FIXREVERTER[2472] && (pctxt == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return (-1);
+			#ifdef FRCOV
+			}
+			#endif
 		}
 		/*
 		* NOTE: This call does not check the content nodes,
@@ -18638,7 +23049,19 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		    ACTXT_CAST pctxt, facet->node, base,
 		    facet->value, &(facet->val), 1, 1, 0);
                 if (ret != 0) {
-		    if (ret < 0) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2473]) {
+		      if ((ret < 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2473\n");
+		      else
+		        fprintf(stderr, "reached bug index 2473\n");
+		    }
+		    if ((!FIXREVERTER[2473] && (ret < 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			/* No error message for RelaxNG. */
 			if (ctxtGiven) {
 			    xmlSchemaCustomErr(ACTXT_CAST pctxt,
@@ -18650,6 +23073,9 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 			}
 			goto internal_error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    ret = XML_SCHEMAP_INVALID_FACET_VALUE;
 		    /* No error message for RelaxNG. */
 		    if (ctxtGiven) {
@@ -18704,7 +23130,19 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		    facet->value, &(facet->val));
 	    }
 	    if (ret != 0) {
-		if (ret < 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2474]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2474\n");
+		  else
+		    fprintf(stderr, "reached bug index 2474\n");
+		}
+		if ((!FIXREVERTER[2474] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    /* No error message for RelaxNG. */
 		    if (ctxtGiven) {
 			PERROR_INT("xmlSchemaCheckFacet",
@@ -18712,6 +23150,9 @@ xmlSchemaCheckFacet(xmlSchemaFacetPtr facet,
 		    }
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = XML_SCHEMAP_INVALID_FACET_VALUE;
 		/* No error message for RelaxNG. */
 		if (ctxtGiven) {
@@ -18797,8 +23238,23 @@ xmlSchemaCheckFacetValues(xmlSchemaTypePtr typeDecl,
 	}
 	pctxt->vctxt->schema = NULL;
     }
-    if (olderrs != pctxt->nberrors)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2475]) {
+      if ((olderrs != pctxt -> nberrors ) && !(0))
+        fprintf(stderr, "triggered bug index 2475\n");
+      else
+        fprintf(stderr, "reached bug index 2475\n");
+    }
+    if ((!FIXREVERTER[2475] && (olderrs != pctxt -> nberrors ))
+    #else
+    if (0
+    #endif
+    )
 	return(pctxt->err);
+	#ifdef FRCOV
+	}
+	#endif
     return(0);
 exit_failure:
     return(-1);
@@ -18826,8 +23282,23 @@ xmlSchemaGetCircModelGrDefRef(xmlSchemaModelGroupDefPtr groupDef,
 
     for (; particle != NULL; particle = particle->next) {
 	term = particle->children;
-	if (term == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2476]) {
+	  if ((term == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2476\n");
+	  else
+	    fprintf(stderr, "reached bug index 2476\n");
+	}
+	if ((!FIXREVERTER[2476] && (term == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	switch (term->type) {
 	    case XML_SCHEMA_TYPE_GROUP:
 		gdef = (xmlSchemaModelGroupDefPtr) term;
@@ -19108,11 +23579,26 @@ xmlSchemaExpandAttributeGroupRefs(xmlSchemaParserCtxtPtr pctxt,
 	use = list->items[i];
 
 	if (use->type == XML_SCHEMA_EXTRA_ATTR_USE_PROHIB) {
-	    if (prohibs == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2477]) {
+	      if ((prohibs == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2477\n");
+	      else
+	        fprintf(stderr, "reached bug index 2477\n");
+	    }
+	    if ((!FIXREVERTER[2477] && (prohibs == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		PERROR_INT("xmlSchemaExpandAttributeGroupRefs",
 		    "unexpected attr prohibition found");
 		return(-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * Remove from attribute uses.
 	    */
@@ -19166,8 +23652,23 @@ xmlSchemaExpandAttributeGroupRefs(xmlSchemaParserCtxtPtr pctxt,
 			tmpWild =  xmlSchemaAddWildcard(pctxt, pctxt->schema,
 			    XML_SCHEMA_TYPE_ANY_ATTRIBUTE,
 			    WXS_ITEM_NODE(item));
-			if (tmpWild == NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[2478]) {
+			  if ((tmpWild == (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 2478\n");
+			  else
+			    fprintf(stderr, "reached bug index 2478\n");
+			}
+			if ((!FIXREVERTER[2478] && (tmpWild == (void *) 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    return(-1);
+			    #ifdef FRCOV
+			    }
+			    #endif
 			if (xmlSchemaCloneWildcardNsConstraints(pctxt,
 			    tmpWild, *completeWild) == -1)
 			    return (-1);
@@ -19186,12 +23687,27 @@ xmlSchemaExpandAttributeGroupRefs(xmlSchemaParserCtxtPtr pctxt,
 	    * contain any attribute uses.
 	    */
 	    sublist = ((xmlSchemaItemListPtr) gr->attrUses);
-	    if ((sublist == NULL) || sublist->nbItems == 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2479]) {
+	      if ((sublist == (void *) 0 || sublist -> nbItems == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2479\n");
+	      else
+	        fprintf(stderr, "reached bug index 2479\n");
+	    }
+	    if ((!FIXREVERTER[2479] && (sublist == (void *) 0 || sublist -> nbItems == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		if (xmlSchemaItemListRemove(list, i) == -1)
 		    return(-1);
 		i--;
 		continue;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * Add the attribute uses.
 	    */
@@ -19392,7 +23908,19 @@ xmlSchemaResolveAttrGroupReferences(xmlSchemaQNameRefPtr ref,
     group = xmlSchemaGetAttributeGroup(ctxt->schema,
 	ref->name,
 	ref->targetNamespace);
-    if (group == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2480]) {
+      if ((group == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2480\n");
+      else
+        fprintf(stderr, "reached bug index 2480\n");
+    }
+    if ((!FIXREVERTER[2480] && (group == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaPResCompAttrErr(ctxt,
 	    XML_SCHEMAP_SRC_RESOLVE,
 	    NULL, ref->node,
@@ -19400,6 +23928,9 @@ xmlSchemaResolveAttrGroupReferences(xmlSchemaQNameRefPtr ref,
 	    ref->itemType, NULL);
 	return(ctxt->err);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ref->item = WXS_BASIC_CAST group;
     return(0);
 }
@@ -19431,8 +23962,23 @@ xmlSchemaCheckAttrPropsCorrect(xmlSchemaParserCtxtPtr pctxt,
     * Missing Sub-components ($5.3)."
     */
 
-    if (WXS_ATTR_TYPEDEF(attr) == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2481]) {
+      if ((attr -> subtypes == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2481\n");
+      else
+        fprintf(stderr, "reached bug index 2481\n");
+    }
+    if ((!FIXREVERTER[2481] && (attr -> subtypes == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (attr->defValue != NULL) {
 	int ret;
@@ -19489,8 +24035,23 @@ xmlSchemaCheckSubstGroupCircular(xmlSchemaElementPtr elemDecl,
 {
     xmlSchemaElementPtr ret;
 
-    if (WXS_SUBST_HEAD(ancestor) == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2484]) {
+      if ((ancestor -> refDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2484\n");
+      else
+        fprintf(stderr, "reached bug index 2484\n");
+    }
+    if ((!FIXREVERTER[2484] && (ancestor -> refDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     if (WXS_SUBST_HEAD(ancestor) == elemDecl)
 	return (ancestor);
 
@@ -19647,7 +24208,19 @@ xmlSchemaCheckElemPropsCorrect(xmlSchemaParserCtxtPtr pctxt,
 	* {type definition} as defined in Element Default Valid (Immediate)
 	* ($3.3.6)."
 	*/
-	if (typeDef == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2485]) {
+	  if ((typeDef == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2485\n");
+	  else
+	    fprintf(stderr, "reached bug index 2485\n");
+	}
+	if ((!FIXREVERTER[2485] && (typeDef == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPErr(pctxt, elemDecl->node,
 		XML_SCHEMAP_INTERNAL,
 		"Internal error: xmlSchemaCheckElemPropsCorrect, "
@@ -19655,6 +24228,9 @@ xmlSchemaCheckElemPropsCorrect(xmlSchemaParserCtxtPtr pctxt,
 		"the value constraint", NULL, NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (elemDecl->node != NULL) {
 	    if (elemDecl->flags & XML_SCHEMAS_ELEM_FIXED)
 		node = (xmlNodePtr) xmlHasProp(elemDecl->node,
@@ -19928,8 +24504,23 @@ static void
 xmlSchemaCheckElementDeclComponent(xmlSchemaElementPtr elemDecl,
 				   xmlSchemaParserCtxtPtr ctxt)
 {
-    if (elemDecl == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2488]) {
+      if ((elemDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2488\n");
+      else
+        fprintf(stderr, "reached bug index 2488\n");
+    }
+    if ((!FIXREVERTER[2488] && (elemDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if (elemDecl->flags & XML_SCHEMAS_ELEM_INTERNAL_CHECKED)
 	return;
     elemDecl->flags |= XML_SCHEMAS_ELEM_INTERNAL_CHECKED;
@@ -19977,13 +24568,28 @@ xmlSchemaResolveModelGroupParticleReferences(
 
 	refItem = xmlSchemaGetNamedComponent(ctxt->schema,
 	    ref->itemType, ref->name, ref->targetNamespace);
-	if (refItem == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2489]) {
+	  if ((refItem == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2489\n");
+	  else
+	    fprintf(stderr, "reached bug index 2489\n");
+	}
+	if ((!FIXREVERTER[2489] && (refItem == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaPResCompAttrErr(ctxt, XML_SCHEMAP_SRC_RESOLVE,
 		NULL, WXS_ITEM_NODE(particle), "ref", ref->name,
 		ref->targetNamespace, ref->itemType, NULL);
 	    /* TODO: remove the particle. */
 	    goto next_particle;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (refItem->type == XML_SCHEMA_TYPE_GROUP) {
 	    if (WXS_MODELGROUPDEF_MODEL(refItem) == NULL)
 		/* TODO: remove the particle. */
@@ -20080,8 +24686,23 @@ xmlSchemaAreValuesEqual(xmlSchemaValPtr x,
 	x = xmlSchemaValueGetNext(x);
 	if (x != NULL) {
 	    y = xmlSchemaValueGetNext(y);
-	    if (y == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2491]) {
+	      if ((y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2491\n");
+	      else
+	        fprintf(stderr, "reached bug index 2491\n");
+	    }
+	    if ((!FIXREVERTER[2491] && (y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (0);
+		#ifdef FRCOV
+		}
+		#endif
 	} else if (xmlSchemaValueGetNext(y) != NULL)
 	    return (0);
 	else
@@ -20101,8 +24722,23 @@ static int
 xmlSchemaResolveAttrUseReferences(xmlSchemaAttributeUsePtr ause,
 				  xmlSchemaParserCtxtPtr ctxt)
 {
-    if ((ctxt == NULL) || (ause == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2492]) {
+      if ((ctxt == (void *) 0 || ause == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2492\n");
+      else
+        fprintf(stderr, "reached bug index 2492\n");
+    }
+    if ((!FIXREVERTER[2492] && (ctxt == (void *) 0 || ause == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if ((ause->attrDecl == NULL) ||
 	(ause->attrDecl->type != XML_SCHEMA_EXTRA_QNAMEREF))
 	return(0);
@@ -20141,8 +24777,23 @@ static int
 xmlSchemaCheckAttrUsePropsCorrect(xmlSchemaParserCtxtPtr ctxt,
 			     xmlSchemaAttributeUsePtr use)
 {
-    if ((ctxt == NULL) || (use == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2493]) {
+      if ((ctxt == (void *) 0 || use == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2493\n");
+      else
+        fprintf(stderr, "reached bug index 2493\n");
+    }
+    if ((!FIXREVERTER[2493] && (ctxt == (void *) 0 || use == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if ((use->defValue == NULL) || (WXS_ATTRUSE_DECL(use) == NULL) ||
 	((WXS_ATTRUSE_DECL(use))->type != XML_SCHEMA_TYPE_ATTRIBUTE))
 	return(0);
@@ -20391,8 +25042,23 @@ xmlSchemaCheckSRCRedefineFirst(xmlSchemaParserCtxtPtr pctxt)
     xmlSchemaBasicItemPtr prev, item;
     int wasRedefined;
 
-    if (redef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2496]) {
+      if ((redef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2496\n");
+      else
+        fprintf(stderr, "reached bug index 2496\n");
+    }
+    if ((!FIXREVERTER[2496] && (redef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     do {
 	item = redef->item;
@@ -20565,14 +25231,44 @@ xmlSchemaCheckSRCRedefineSecond(xmlSchemaParserCtxtPtr pctxt)
     xmlSchemaRedefPtr redef = WXS_CONSTRUCTOR(pctxt)->redefs;
     xmlSchemaBasicItemPtr item;
 
-    if (redef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2497]) {
+      if ((redef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2497\n");
+      else
+        fprintf(stderr, "reached bug index 2497\n");
+    }
+    if ((!FIXREVERTER[2497] && (redef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
 
     do {
-	if (redef->target == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2498]) {
+	  if ((redef -> target == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2498\n");
+	  else
+	    fprintf(stderr, "reached bug index 2498\n");
+	}
+	if ((!FIXREVERTER[2498] && (redef -> target == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    redef = redef->next;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	item = redef->item;
 
 	switch (item->type) {
@@ -20662,8 +25358,23 @@ xmlSchemaAddComponents(xmlSchemaParserCtxtPtr pctxt,
     *   components as well to be able to catch clashing components.
     *   (I hope I'll still know what this means after some months :-()
     */
-    if (bucket == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2499]) {
+      if ((bucket == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2499\n");
+      else
+        fprintf(stderr, "reached bug index 2499\n");
+    }
+    if ((!FIXREVERTER[2499] && (bucket == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (bucket->flags & XML_SCHEMA_BUCKET_COMPS_ADDED)
 	return(0);
     bucket->flags |= XML_SCHEMA_BUCKET_COMPS_ADDED;
@@ -20776,8 +25487,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
     * a bucket.
     * TODO: Think about storing locals _only_ on the main bucket.
     */
-    if (con->bucket == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2500]) {
+      if ((con -> bucket == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2500\n");
+      else
+        fprintf(stderr, "reached bug index 2500\n");
+    }
+    if ((!FIXREVERTER[2500] && (con -> bucket == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	con->bucket = rootBucket;
+	#ifdef FRCOV
+	}
+	#endif
 
     /* TODO:
     * SPEC (src-redefine):
@@ -20886,8 +25612,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2501]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2501\n");
+      else
+        fprintf(stderr, "reached bug index 2501\n");
+    }
+    if ((!FIXREVERTER[2501] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Now that all references are resolved we
@@ -20908,29 +25649,89 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		xmlSchemaCheckTypeDefCircular(
 		    (xmlSchemaTypePtr) item, pctxt);
 		FIXHFAILURE;
-		if (pctxt->nberrors != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2502]) {
+		  if ((pctxt -> nberrors != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2502\n");
+		  else
+		    fprintf(stderr, "reached bug index 2502\n");
+		}
+		if ((!FIXREVERTER[2502] && (pctxt -> nberrors != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto exit_error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    case XML_SCHEMA_TYPE_GROUP:
 		xmlSchemaCheckGroupDefCircular(
 		    (xmlSchemaModelGroupDefPtr) item, pctxt);
 		FIXHFAILURE;
-		if (pctxt->nberrors != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2503]) {
+		  if ((pctxt -> nberrors != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2503\n");
+		  else
+		    fprintf(stderr, "reached bug index 2503\n");
+		}
+		if ((!FIXREVERTER[2503] && (pctxt -> nberrors != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto exit_error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    case XML_SCHEMA_TYPE_ATTRIBUTEGROUP:
 		xmlSchemaCheckAttrGroupCircular(
 		    (xmlSchemaAttributeGroupPtr) item, pctxt);
 		FIXHFAILURE;
-		if (pctxt->nberrors != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2504]) {
+		  if ((pctxt -> nberrors != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2504\n");
+		  else
+		    fprintf(stderr, "reached bug index 2504\n");
+		}
+		if ((!FIXREVERTER[2504] && (pctxt -> nberrors != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto exit_error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    default:
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2505]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2505\n");
+      else
+        fprintf(stderr, "reached bug index 2505\n");
+    }
+    if ((!FIXREVERTER[2505] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Model group definition references:
     * Such a reference is reflected by a particle at the component
@@ -20951,8 +25752,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2506]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2506\n");
+      else
+        fprintf(stderr, "reached bug index 2506\n");
+    }
+    if ((!FIXREVERTER[2506] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Expand attribute group references of attribute group definitions.
     */
@@ -20972,8 +25788,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2507]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2507\n");
+      else
+        fprintf(stderr, "reached bug index 2507\n");
+    }
+    if ((!FIXREVERTER[2507] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * First compute the variety of simple types. This is needed as
     * a separate step, since otherwise we won't be able to detect
@@ -20993,8 +25824,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2508]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2508\n");
+      else
+        fprintf(stderr, "reached bug index 2508\n");
+    }
+    if ((!FIXREVERTER[2508] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Detect circular union types. Note that this needs the variety to
     * be already computed.
@@ -21013,8 +25859,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2509]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2509\n");
+      else
+        fprintf(stderr, "reached bug index 2509\n");
+    }
+    if ((!FIXREVERTER[2509] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Do the complete type fixup for simple types.
@@ -21032,8 +25893,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2510]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2510\n");
+      else
+        fprintf(stderr, "reached bug index 2510\n");
+    }
+    if ((!FIXREVERTER[2510] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * At this point we need build and check all simple types.
     */
@@ -21051,8 +25927,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2511]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2511\n");
+      else
+        fprintf(stderr, "reached bug index 2511\n");
+    }
+    if ((!FIXREVERTER[2511] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Apply constraints for attribute uses.
     */
@@ -21070,8 +25961,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2512]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2512\n");
+      else
+        fprintf(stderr, "reached bug index 2512\n");
+    }
+    if ((!FIXREVERTER[2512] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Apply constraints for attribute group definitions.
@@ -21091,16 +25997,46 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 	    break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2513]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2513\n");
+      else
+        fprintf(stderr, "reached bug index 2513\n");
+    }
+    if ((!FIXREVERTER[2513] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Apply constraints for redefinitions.
     */
     if (WXS_CONSTRUCTOR(pctxt)->redefs != NULL)
 	xmlSchemaCheckSRCRedefineSecond(pctxt);
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2514]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2514\n");
+      else
+        fprintf(stderr, "reached bug index 2514\n");
+    }
+    if ((!FIXREVERTER[2514] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Complex types are built and checked.
@@ -21118,8 +26054,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2515]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2515\n");
+      else
+        fprintf(stderr, "reached bug index 2515\n");
+    }
+    if ((!FIXREVERTER[2515] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * The list could have changed, since xmlSchemaFixupComplexType()
@@ -21164,8 +26115,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2516]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2516\n");
+      else
+        fprintf(stderr, "reached bug index 2516\n");
+    }
+    if ((!FIXREVERTER[2516] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Finally we can build the automaton from the content model of
@@ -21183,8 +26149,23 @@ xmlSchemaFixupComponents(xmlSchemaParserCtxtPtr pctxt,
 		break;
 	}
     }
-    if (pctxt->nberrors != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2517]) {
+      if ((pctxt -> nberrors != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2517\n");
+      else
+        fprintf(stderr, "reached bug index 2517\n");
+    }
+    if ((!FIXREVERTER[2517] && (pctxt -> nberrors != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto exit_error;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * URGENT TODO: cos-element-consistent
     */
@@ -21356,8 +26337,23 @@ xmlSchemaSetParserErrors(xmlSchemaParserCtxtPtr ctxt,
                          xmlSchemaValidityErrorFunc err,
                          xmlSchemaValidityWarningFunc warn, void *ctx)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2524]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2524\n");
+      else
+        fprintf(stderr, "reached bug index 2524\n");
+    }
+    if ((!FIXREVERTER[2524] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->error = err;
     ctxt->warning = warn;
     ctxt->errCtxt = ctx;
@@ -21378,8 +26374,23 @@ xmlSchemaSetParserStructuredErrors(xmlSchemaParserCtxtPtr ctxt,
 				   xmlStructuredErrorFunc serror,
 				   void *ctx)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2525]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2525\n");
+      else
+        fprintf(stderr, "reached bug index 2525\n");
+    }
+    if ((!FIXREVERTER[2525] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     ctxt->serror = serror;
     ctxt->errCtxt = ctx;
     if (ctxt->vctxt != NULL)
@@ -21537,20 +26548,65 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaParserCtxtPtr pctxt;
     xmlSchemaBucketPtr bucket = NULL;
 
-    if ((vctxt == NULL) || (schema == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2527]) {
+      if ((vctxt == (void *) 0 || schema == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2527\n");
+      else
+        fprintf(stderr, "reached bug index 2527\n");
+    }
+    if ((!FIXREVERTER[2527] && (vctxt == (void *) 0 || schema == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
-
-    if (vctxt->pctxt == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2528]) {
+      if ((vctxt -> pctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2528\n");
+      else
+        fprintf(stderr, "reached bug index 2528\n");
+    }
+    if ((!FIXREVERTER[2528] && (vctxt -> pctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaAssembleByLocation",
 	    "no parser context available");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     pctxt = vctxt->pctxt;
-    if (pctxt->constructor == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2529]) {
+      if ((pctxt -> constructor == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2529\n");
+      else
+        fprintf(stderr, "reached bug index 2529\n");
+    }
+    if ((!FIXREVERTER[2529] && (pctxt -> constructor == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	PERROR_INT("xmlSchemaAssembleByLocation",
 	    "no constructor");
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Acquire the schema document.
     */
@@ -21564,9 +26620,36 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
     ret = xmlSchemaAddSchemaDoc(pctxt, XML_SCHEMA_SCHEMA_IMPORT,
 	location, NULL, NULL, 0, node, NULL, nsName,
 	&bucket);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2530]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2530\n");
+      else
+        fprintf(stderr, "reached bug index 2530\n");
+    }
+    if ((!FIXREVERTER[2530] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(ret);
-    if (bucket == NULL) {
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2531]) {
+      if ((bucket == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2531\n");
+      else
+        fprintf(stderr, "reached bug index 2531\n");
+    }
+    if ((!FIXREVERTER[2531] && (bucket == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* Generate a warning that the document could not be located.
 	*/
@@ -21576,6 +26659,9 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
 	    location, NULL, NULL);
 	return(ret);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * The first located schema will be handled as if all other
     * schemas imported by XSI were imported by this first schema.
@@ -21603,8 +26689,25 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
 	goto exit_failure;
     }
     /* Paranoid error channelling. */
-    if ((ret == 0) && (pctxt->nberrors != 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2532]) {
+      fprintf(stderr, "reached bug index 2532\n");
+    }
+    if ((FIXREVERTER[2532] && (ret == 0 )) || (!FIXREVERTER[2532] && (ret == 0 && pctxt -> nberrors != 0 ))
+    #else
+    if (ret == 0 
+    #endif
+    )
+	
+	#ifdef FRCOV
+	{if (!(pctxt -> nberrors != 0 ))
+	  fprintf(stderr, "triggered bug index 2532\n");
+	#endif
 	ret = pctxt->err;
+	#ifdef FRCOV
+	}}
+	#endif
     if (pctxt->nberrors == 0) {
 	/*
 	* Only bother to fixup pending components, if there was
@@ -21618,8 +26721,25 @@ xmlSchemaAssembleByLocation(xmlSchemaValidCtxtPtr vctxt,
 	* Not nice, but we need somehow to channel the schema parser
 	* error to the validation context.
 	*/
-	if ((ret != 0) && (vctxt->err == 0))
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2533]) {
+	  fprintf(stderr, "reached bug index 2533\n");
+	}
+	if ((FIXREVERTER[2533] && (ret != 0 )) || (!FIXREVERTER[2533] && (ret != 0 && vctxt -> err == 0  ))
+	#else
+	if (ret != 0 
+	#endif
+	)
+	    
+	    #ifdef FRCOV
+	    {if (!(vctxt -> err == 0  ))
+	      fprintf(stderr, "triggered bug index 2533\n");
+	    #endif
 	    vctxt->err = ret;
+	    #ifdef FRCOV
+	    }}
+	    #endif
 	vctxt->nberrors += pctxt->nberrors;
     } else {
 	/* Add to validation error sum. */
@@ -21636,16 +26756,46 @@ static xmlSchemaAttrInfoPtr
 xmlSchemaGetMetaAttrInfo(xmlSchemaValidCtxtPtr vctxt,
 			 int metaType)
 {
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2534]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2534\n");
+      else
+        fprintf(stderr, "reached bug index 2534\n");
+    }
+    if ((!FIXREVERTER[2534] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     {
 	int i;
 	xmlSchemaAttrInfoPtr iattr;
 
 	for (i = 0; i < vctxt->nbAttrInfos; i++) {
 	    iattr = vctxt->attrInfos[i];
-	    if (iattr->metaType == metaType)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2535]) {
+	      if ((iattr -> metaType == metaType ) && !(0))
+	        fprintf(stderr, "triggered bug index 2535\n");
+	      else
+	        fprintf(stderr, "reached bug index 2535\n");
+	    }
+	    if ((!FIXREVERTER[2535] && (iattr -> metaType == metaType ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return (iattr);
+		#ifdef FRCOV
+		}
+		#endif
 	}
 
     }
@@ -21682,11 +26832,41 @@ xmlSchemaAssembleByXSI(xmlSchemaValidCtxtPtr vctxt)
     */
     iattr = xmlSchemaGetMetaAttrInfo(vctxt,
 	XML_SCHEMA_ATTR_INFO_META_XSI_SCHEMA_LOC);
-    if (iattr == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2536]) {
+      if ((iattr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2536\n");
+      else
+        fprintf(stderr, "reached bug index 2536\n");
+    }
+    if ((!FIXREVERTER[2536] && (iattr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	iattr = xmlSchemaGetMetaAttrInfo(vctxt,
 	XML_SCHEMA_ATTR_INFO_META_XSI_NO_NS_SCHEMA_LOC);
-    if (iattr == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2537]) {
+      if ((iattr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2537\n");
+      else
+        fprintf(stderr, "reached bug index 2537\n");
+    }
+    if ((!FIXREVERTER[2537] && (iattr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     cur = iattr->value;
     do {
 	/*
@@ -21821,8 +27001,23 @@ xmlSchemaValidateNotation(xmlSchemaValidCtxtPtr vctxt,
 	return (-1);
     }
     ret = xmlValidateQName(value, 1);
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2538]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2538\n");
+      else
+        fprintf(stderr, "reached bug index 2538\n");
+    }
+    if ((!FIXREVERTER[2538] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (ret);
+	#ifdef FRCOV
+	}
+	#endif
     {
 	xmlChar *localName = NULL;
 	xmlChar *prefix = NULL;
@@ -21835,18 +27030,48 @@ xmlSchemaValidateNotation(xmlSchemaValidCtxtPtr vctxt,
 		nsName = xmlSchemaLookupNamespace(vctxt, BAD_CAST prefix);
 	    else if (node != NULL) {
 		xmlNsPtr ns = xmlSearchNs(node->doc, node, prefix);
-		if (ns != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2539]) {
+		  if ((ns != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2539\n");
+		  else
+		    fprintf(stderr, "reached bug index 2539\n");
+		}
+		if ((!FIXREVERTER[2539] && (ns != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    nsName = ns->href;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    } else {
 		xmlFree(prefix);
 		xmlFree(localName);
 		return (1);
 	    }
-	    if (nsName == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2540]) {
+	      if ((nsName == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2540\n");
+	      else
+	        fprintf(stderr, "reached bug index 2540\n");
+	    }
+	    if ((!FIXREVERTER[2540] && (nsName == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlFree(prefix);
 		xmlFree(localName);
 		return (1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (xmlSchemaGetNotation(schema, localName, nsName) != NULL) {
 		if ((valNeeded) && (val != NULL)) {
 		    (*val) = xmlSchemaNewNOTATIONValue(xmlStrdup(localName),
@@ -21881,12 +27106,42 @@ xmlSchemaVAddNodeQName(xmlSchemaValidCtxtPtr vctxt,
     int i;
 
     lname = xmlDictLookup(vctxt->dict, lname, -1);
-    if (lname == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2541]) {
+      if ((lname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2541\n");
+      else
+        fprintf(stderr, "reached bug index 2541\n");
+    }
+    if ((!FIXREVERTER[2541] && (lname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (nsname != NULL) {
 	nsname = xmlDictLookup(vctxt->dict, nsname, -1);
-	if (nsname == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2542]) {
+	  if ((nsname == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2542\n");
+	  else
+	    fprintf(stderr, "reached bug index 2542\n");
+	}
+	if ((!FIXREVERTER[2542] && (nsname == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return(-1);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
     for (i = 0; i < vctxt->nodeQNames->nbItems; i += 2) {
 	if ((vctxt->nodeQNames->items [i] == lname) &&
@@ -21924,10 +27179,25 @@ xmlSchemaAugmentIDC(void *payload, void *data,
     xmlSchemaIDCAugPtr aidc;
 
     aidc = (xmlSchemaIDCAugPtr) xmlMalloc(sizeof(xmlSchemaIDCAug));
-    if (aidc == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2543]) {
+      if ((aidc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2543\n");
+      else
+        fprintf(stderr, "reached bug index 2543\n");
+    }
+    if ((!FIXREVERTER[2543] && (aidc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaVErrMemory(vctxt);
 	return;
     }
+    #ifdef FRCOV
+    }
+    #endif
     aidc->keyrefDepth = -1;
     aidc->def = idcDef;
     aidc->next = NULL;
@@ -21976,10 +27246,25 @@ xmlSchemaIDCNewBinding(xmlSchemaIDCPtr idcDef)
 
     ret = (xmlSchemaPSVIIDCBindingPtr) xmlMalloc(
 	    sizeof(xmlSchemaPSVIIDCBinding));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2544]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2544\n");
+      else
+        fprintf(stderr, "reached bug index 2544\n");
+    }
+    if ((!FIXREVERTER[2544] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaVErrMemory(NULL);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaPSVIIDCBinding));
     ret->definition = idcDef;
     return (ret);
@@ -22006,20 +27291,50 @@ xmlSchemaIDCStoreNodeTableItem(xmlSchemaValidCtxtPtr vctxt,
     if (vctxt->idcNodes == NULL) {
 	vctxt->idcNodes = (xmlSchemaPSVIIDCNodePtr *)
 	    xmlMalloc(20 * sizeof(xmlSchemaPSVIIDCNodePtr));
-	if (vctxt->idcNodes == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2545]) {
+	  if ((vctxt -> idcNodes == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2545\n");
+	  else
+	    fprintf(stderr, "reached bug index 2545\n");
+	}
+	if ((!FIXREVERTER[2545] && (vctxt -> idcNodes == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	vctxt->sizeIdcNodes = 20;
     } else if (vctxt->sizeIdcNodes <= vctxt->nbIdcNodes) {
 	vctxt->sizeIdcNodes *= 2;
 	vctxt->idcNodes = (xmlSchemaPSVIIDCNodePtr *)
 	    xmlRealloc(vctxt->idcNodes, vctxt->sizeIdcNodes *
 	    sizeof(xmlSchemaPSVIIDCNodePtr));
-	if (vctxt->idcNodes == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2546]) {
+	  if ((vctxt -> idcNodes == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2546\n");
+	  else
+	    fprintf(stderr, "reached bug index 2546\n");
+	}
+	if ((!FIXREVERTER[2546] && (vctxt -> idcNodes == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     vctxt->idcNodes[vctxt->nbIdcNodes++] = item;
 
@@ -22045,20 +27360,50 @@ xmlSchemaIDCStoreKey(xmlSchemaValidCtxtPtr vctxt,
     if (vctxt->idcKeys == NULL) {
 	vctxt->idcKeys = (xmlSchemaPSVIIDCKeyPtr *)
 	    xmlMalloc(40 * sizeof(xmlSchemaPSVIIDCKeyPtr));
-	if (vctxt->idcKeys == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2547]) {
+	  if ((vctxt -> idcKeys == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2547\n");
+	  else
+	    fprintf(stderr, "reached bug index 2547\n");
+	}
+	if ((!FIXREVERTER[2547] && (vctxt -> idcKeys == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	vctxt->sizeIdcKeys = 40;
     } else if (vctxt->sizeIdcKeys <= vctxt->nbIdcKeys) {
 	vctxt->sizeIdcKeys *= 2;
 	vctxt->idcKeys = (xmlSchemaPSVIIDCKeyPtr *)
 	    xmlRealloc(vctxt->idcKeys, vctxt->sizeIdcKeys *
 	    sizeof(xmlSchemaPSVIIDCKeyPtr));
-	if (vctxt->idcKeys == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2548]) {
+	  if ((vctxt -> idcKeys == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2548\n");
+	  else
+	    fprintf(stderr, "reached bug index 2548\n");
+	}
+	if ((!FIXREVERTER[2548] && (vctxt -> idcKeys == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     vctxt->idcKeys[vctxt->nbIdcKeys++] = key;
 
@@ -22082,19 +27427,49 @@ xmlSchemaIDCAppendNodeTableItem(xmlSchemaPSVIIDCBindingPtr bind,
 	bind->sizeNodes = 10;
 	bind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 	    xmlMalloc(10 * sizeof(xmlSchemaPSVIIDCNodePtr));
-	if (bind->nodeTable == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2549]) {
+	  if ((bind -> nodeTable == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2549\n");
+	  else
+	    fprintf(stderr, "reached bug index 2549\n");
+	}
+	if ((!FIXREVERTER[2549] && (bind -> nodeTable == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (bind->sizeNodes <= bind->nbNodes) {
 	bind->sizeNodes *= 2;
 	bind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 	    xmlRealloc(bind->nodeTable, bind->sizeNodes *
 		sizeof(xmlSchemaPSVIIDCNodePtr));
-	if (bind->nodeTable == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2550]) {
+	  if ((bind -> nodeTable == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2550\n");
+	  else
+	    fprintf(stderr, "reached bug index 2550\n");
+	}
+	if ((!FIXREVERTER[2550] && (bind -> nodeTable == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(NULL);
 	    return(-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     }
     bind->nodeTable[bind->nbNodes++] = ntItem;
     return(0);
@@ -22121,8 +27496,23 @@ xmlSchemaIDCAcquireBinding(xmlSchemaValidCtxtPtr vctxt,
 
     if (ielem->idcTable == NULL) {
 	ielem->idcTable = xmlSchemaIDCNewBinding(matcher->aidc->def);
-	if (ielem->idcTable == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2551]) {
+	  if ((ielem -> idcTable == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2551\n");
+	  else
+	    fprintf(stderr, "reached bug index 2551\n");
+	}
+	if ((!FIXREVERTER[2551] && (ielem -> idcTable == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    return (NULL);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	return(ielem->idcTable);
     } else {
 	xmlSchemaPSVIIDCBindingPtr bind = NULL;
@@ -22131,12 +27521,42 @@ xmlSchemaIDCAcquireBinding(xmlSchemaValidCtxtPtr vctxt,
 	do {
 	    if (bind->definition == matcher->aidc->def)
 		return(bind);
-	    if (bind->next == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2553]) {
+	      if ((bind -> next == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2553\n");
+	      else
+	        fprintf(stderr, "reached bug index 2553\n");
+	    }
+	    if ((!FIXREVERTER[2553] && (bind -> next == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		bind->next = xmlSchemaIDCNewBinding(matcher->aidc->def);
-		if (bind->next == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2552]) {
+		  if ((bind -> next == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2552\n");
+		  else
+		    fprintf(stderr, "reached bug index 2552\n");
+		}
+		if ((!FIXREVERTER[2552] && (bind -> next == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return (NULL);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		return(bind->next);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    bind = bind->next;
 	} while (bind != NULL);
     }
@@ -22147,8 +27567,23 @@ static xmlSchemaItemListPtr
 xmlSchemaIDCAcquireTargetList(xmlSchemaValidCtxtPtr vctxt ATTRIBUTE_UNUSED,
 			     xmlSchemaIDCMatcherPtr matcher)
 {
-    if (matcher->targets == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2554]) {
+      if ((matcher -> targets == (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2554\n");
+      else
+        fprintf(stderr, "reached bug index 2554\n");
+    }
+    if ((!FIXREVERTER[2554] && (matcher -> targets == (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	matcher->targets = xmlSchemaItemListCreate();
+	#ifdef FRCOV
+	}
+	#endif
     return(matcher->targets);
 }
 
@@ -22309,8 +27744,23 @@ xmlSchemaIDCReleaseMatcherList(xmlSchemaValidCtxtPtr vctxt,
 	/*
 	* Cache the matcher.
 	*/
-	if (vctxt->idcMatcherCache != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2555]) {
+	  if ((vctxt -> idcMatcherCache != (void *) 0  ) && !(0))
+	    fprintf(stderr, "triggered bug index 2555\n");
+	  else
+	    fprintf(stderr, "reached bug index 2555\n");
+	}
+	if ((!FIXREVERTER[2555] && (vctxt -> idcMatcherCache != (void *) 0  ))
+	#else
+	if (0
+	#endif
+	)
 	    matcher->nextCached = vctxt->idcMatcherCache;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	vctxt->idcMatcherCache = matcher;
 
 	matcher = next;
@@ -22351,17 +27801,47 @@ xmlSchemaIDCAddStateObject(xmlSchemaValidCtxtPtr vctxt,
 	* Create a new state object.
 	*/
 	sto = (xmlSchemaIDCStateObjPtr) xmlMalloc(sizeof(xmlSchemaIDCStateObj));
-	if (sto == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2556]) {
+	  if ((sto == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2556\n");
+	  else
+	    fprintf(stderr, "reached bug index 2556\n");
+	}
+	if ((!FIXREVERTER[2556] && (sto == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(NULL);
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(sto, 0, sizeof(xmlSchemaIDCStateObj));
     }
     /*
     * Add to global list.
     */
-    if (vctxt->xpathStates != NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2557]) {
+      if ((vctxt -> xpathStates != (void *) 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2557\n");
+      else
+        fprintf(stderr, "reached bug index 2557\n");
+    }
+    if ((!FIXREVERTER[2557] && (vctxt -> xpathStates != (void *) 0  ))
+    #else
+    if (0
+    #endif
+    )
 	sto->next = vctxt->xpathStates;
+	#ifdef FRCOV
+	}
+	#endif
     vctxt->xpathStates = sto;
 
     /*
@@ -22375,11 +27855,26 @@ xmlSchemaIDCAddStateObject(xmlSchemaValidCtxtPtr vctxt,
     */
     sto->xpathCtxt = (void *) xmlPatternGetStreamCtxt(
 	(xmlPatternPtr) sel->xpathComp);
-    if (sto->xpathCtxt == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2558]) {
+      if ((sto -> xpathCtxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2558\n");
+      else
+        fprintf(stderr, "reached bug index 2558\n");
+    }
+    if ((!FIXREVERTER[2558] && (sto -> xpathCtxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaIDCAddStateObject",
 	    "failed to create an XPath validation context");
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     sto->type = type;
     sto->depth = vctxt->depth;
     sto->matcher = matcher;
@@ -22406,8 +27901,23 @@ xmlSchemaXPathEvaluate(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaIDCStateObjPtr sto, head = NULL, first;
     int res, resolved = 0, depth = vctxt->depth;
 
-    if (vctxt->xpathStates == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2559]) {
+      if ((vctxt -> xpathStates == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2559\n");
+      else
+        fprintf(stderr, "reached bug index 2559\n");
+    }
+    if ((!FIXREVERTER[2559] && (vctxt -> xpathStates == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (nodeType == XML_ATTRIBUTE_NODE)
 	depth++;
@@ -22439,19 +27949,49 @@ xmlSchemaXPathEvaluate(xmlSchemaValidCtxtPtr vctxt,
 	*/
 	if (sto->history == NULL) {
 	    sto->history = (int *) xmlMalloc(5 * sizeof(int));
-	    if (sto->history == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2561]) {
+	      if ((sto -> history == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2561\n");
+	      else
+	        fprintf(stderr, "reached bug index 2561\n");
+	    }
+	    if ((!FIXREVERTER[2561] && (sto -> history == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaVErrMemory(NULL);
 		return(-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    sto->sizeHistory = 5;
 	} else if (sto->sizeHistory <= sto->nbHistory) {
 	    sto->sizeHistory *= 2;
 	    sto->history = (int *) xmlRealloc(sto->history,
 		sto->sizeHistory * sizeof(int));
-	    if (sto->history == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2562]) {
+	      if ((sto -> history == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2562\n");
+	      else
+	        fprintf(stderr, "reached bug index 2562\n");
+	    }
+	    if ((!FIXREVERTER[2562] && (sto -> history == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaVErrMemory(NULL);
 		return(-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	}
 	sto->history[sto->nbHistory++] = depth;
 
@@ -22568,8 +28108,23 @@ xmlSchemaXPathPop(xmlSchemaValidCtxtPtr vctxt)
     xmlSchemaIDCStateObjPtr sto;
     int res;
 
-    if (vctxt->xpathStates == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2563]) {
+      if ((vctxt -> xpathStates == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2563\n");
+      else
+        fprintf(stderr, "reached bug index 2563\n");
+    }
+    if ((!FIXREVERTER[2563] && (vctxt -> xpathStates == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(0);
+	#ifdef FRCOV
+	}
+	#endif
     sto = vctxt->xpathStates;
     do {
 	res = xmlStreamPop((xmlStreamCtxtPtr) sto->xpathCtxt);
@@ -22600,8 +28155,23 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaPSVIIDCKeyPtr key = NULL;
     xmlSchemaTypePtr type = vctxt->inode->typeDef, simpleType = NULL;
 
-    if (vctxt->xpathStates == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2564]) {
+      if ((vctxt -> xpathStates == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2564\n");
+      else
+        fprintf(stderr, "reached bug index 2564\n");
+    }
+    if ((!FIXREVERTER[2564] && (vctxt -> xpathStates == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     sto = vctxt->xpathStates;
 
     /*
@@ -22614,18 +28184,48 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
 		"calling xmlStreamPop()");
 	    return (-1);
 	}
-	if (sto->nbHistory == 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2565]) {
+	  if ((sto -> nbHistory == 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2565\n");
+	  else
+	    fprintf(stderr, "reached bug index 2565\n");
+	}
+	if ((!FIXREVERTER[2565] && (sto -> nbHistory == 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto deregister_check;
+	    #ifdef FRCOV
+	    }
+	    #endif
 
 	matchDepth = sto->history[sto->nbHistory -1];
 
 	/*
 	* Only matches at the current depth are of interest.
 	*/
-	if (matchDepth != depth) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2566]) {
+	  if ((matchDepth != depth ) && !(0))
+	    fprintf(stderr, "triggered bug index 2566\n");
+	  else
+	    fprintf(stderr, "reached bug index 2566\n");
+	}
+	if ((!FIXREVERTER[2566] && (matchDepth != depth ))
+	#else
+	if (0
+	#endif
+	) {
 	    sto = sto->next;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (sto->type == XPATH_STATE_OBJ_TYPE_IDC_FIELD) {
 	    /*
 	    * NOTE: According to
@@ -22639,12 +28239,27 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
 		    * Sanity check for complex types with simple content.
 		    */
 		    simpleType = type->contentTypeDef;
-		    if (simpleType == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2567]) {
+		      if ((simpleType == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2567\n");
+		      else
+		        fprintf(stderr, "reached bug index 2567\n");
+		    }
+		    if ((!FIXREVERTER[2567] && (simpleType == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			VERROR_INT("xmlSchemaXPathProcessHistory",
 			    "field resolves to a CT with simple content "
 			    "but the CT is missing the ST definition");
 			return (-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		} else
 		    simpleType = NULL;
 	    } else
@@ -22716,10 +28331,25 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
 		    matcher->keySeqs = (xmlSchemaPSVIIDCKeyPtr **)
 			xmlMalloc(matcher->sizeKeySeqs *
 			sizeof(xmlSchemaPSVIIDCKeyPtr *));
-		    if (matcher->keySeqs == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2568]) {
+		      if ((matcher -> keySeqs == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2568\n");
+		      else
+		        fprintf(stderr, "reached bug index 2568\n");
+		    }
+		    if ((!FIXREVERTER[2568] && (matcher -> keySeqs == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlSchemaVErrMemory(NULL);
 			return(-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    memset(matcher->keySeqs, 0,
 			matcher->sizeKeySeqs *
 			sizeof(xmlSchemaPSVIIDCKeyPtr *));
@@ -22731,10 +28361,25 @@ xmlSchemaXPathProcessHistory(xmlSchemaValidCtxtPtr vctxt,
 			xmlRealloc(matcher->keySeqs,
 			matcher->sizeKeySeqs *
 			sizeof(xmlSchemaPSVIIDCKeyPtr *));
-		    if (matcher->keySeqs == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2569]) {
+		      if ((matcher -> keySeqs == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2569\n");
+		      else
+		        fprintf(stderr, "reached bug index 2569\n");
+		    }
+		    if ((!FIXREVERTER[2569] && (matcher -> keySeqs == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlSchemaVErrMemory(NULL);
 			return (-1);
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    /*
 		    * The array needs to be NULLed.
 		    * TODO: Use memset?
@@ -22781,10 +28426,25 @@ create_sequence:
 		keySeq = (xmlSchemaPSVIIDCKeyPtr *) xmlMalloc(
 		    matcher->aidc->def->nbFields *
 		    sizeof(xmlSchemaPSVIIDCKeyPtr));
-		if (keySeq == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2570]) {
+		  if ((keySeq == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2570\n");
+		  else
+		    fprintf(stderr, "reached bug index 2570\n");
+		}
+		if ((!FIXREVERTER[2570] && (keySeq == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaVErrMemory(NULL);
 		    return(-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		memset(keySeq, 0, matcher->aidc->def->nbFields *
 		    sizeof(xmlSchemaPSVIIDCKeyPtr));
 		matcher->keySeqs[pos] = keySeq;
@@ -23106,8 +28766,23 @@ xmlSchemaIDCRegisterMatchers(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaIDCAugPtr aidc;
 
     idc = (xmlSchemaIDCPtr) elemDecl->idcs;
-    if (idc == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2573]) {
+      if ((idc == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2573\n");
+      else
+        fprintf(stderr, "reached bug index 2573\n");
+    }
+    if ((!FIXREVERTER[2573] && (idc == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
 
     if (vctxt->inode->idcMatchers != NULL) {
 	VERROR_INT("xmlSchemaIDCRegisterMatchers",
@@ -23138,12 +28813,27 @@ xmlSchemaIDCRegisterMatchers(xmlSchemaValidCtxtPtr vctxt,
 			break;
 		    aidc = aidc->next;
 		}
-		if (aidc == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2574]) {
+		  if ((aidc == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2574\n");
+		  else
+		    fprintf(stderr, "reached bug index 2574\n");
+		}
+		if ((!FIXREVERTER[2574] && (aidc == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaIDCRegisterMatchers",
 			"Could not find an augmented IDC item for an IDC "
 			"definition");
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		if ((aidc->keyrefDepth == -1) ||
 		    (vctxt->depth < aidc->keyrefDepth))
 		    aidc->keyrefDepth = vctxt->depth;
@@ -23158,11 +28848,26 @@ xmlSchemaIDCRegisterMatchers(xmlSchemaValidCtxtPtr vctxt,
 		break;
 	    aidc = aidc->next;
 	}
-	if (aidc == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2575]) {
+	  if ((aidc == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2575\n");
+	  else
+	    fprintf(stderr, "reached bug index 2575\n");
+	}
+	if ((!FIXREVERTER[2575] && (aidc == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    VERROR_INT("xmlSchemaIDCRegisterMatchers",
 		"Could not find an augmented IDC item for an IDC definition");
 	    return (-1);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Create an IDC matcher for every IDC definition.
 	*/
@@ -23176,10 +28881,25 @@ xmlSchemaIDCRegisterMatchers(xmlSchemaValidCtxtPtr vctxt,
 	} else {
 	    matcher = (xmlSchemaIDCMatcherPtr)
 		xmlMalloc(sizeof(xmlSchemaIDCMatcher));
-	    if (matcher == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2576]) {
+	      if ((matcher == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2576\n");
+	      else
+	        fprintf(stderr, "reached bug index 2576\n");
+	    }
+	    if ((!FIXREVERTER[2576] && (matcher == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaVErrMemory(vctxt);
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    memset(matcher, 0, sizeof(xmlSchemaIDCMatcher));
 	}
 	if (last == NULL)
@@ -23240,8 +28960,23 @@ xmlSchemaIDCFillNodeTables(xmlSchemaValidCtxtPtr vctxt,
 	* Get/create the IDC binding on this element for the IDC definition.
 	*/
 	bind = xmlSchemaIDCAcquireBinding(vctxt, matcher);
-	if (bind == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2577]) {
+	  if ((bind == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2577\n");
+	  else
+	    fprintf(stderr, "reached bug index 2577\n");
+	}
+	if ((!FIXREVERTER[2577] && (bind == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	   goto internal_error;
+	   #ifdef FRCOV
+	   }
+	   #endif
 
 	if (! WXS_ILIST_IS_EMPTY(bind->dupls)) {
 	    dupls = (xmlSchemaPSVIIDCNodePtr *) bind->dupls->items;
@@ -23359,8 +29094,23 @@ xmlSchemaIDCFillNodeTables(xmlSchemaValidCtxtPtr vctxt,
 			*/
 			if (bind->dupls == NULL) {
 			    bind->dupls = xmlSchemaItemListCreate();
-			    if (bind->dupls == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[2583]) {
+			      if ((bind -> dupls == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 2583\n");
+			      else
+			        fprintf(stderr, "reached bug index 2583\n");
+			    }
+			    if ((!FIXREVERTER[2583] && (bind -> dupls == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				goto internal_error;
+				#ifdef FRCOV
+				}
+				#endif
 			}
 			if (xmlSchemaItemListAdd(bind->dupls, bind->nodeTable[j]) == -1)
 			    goto internal_error;
@@ -23416,10 +29166,25 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
     int i, j, k, ret = 0, nbFields, oldNum, oldDupls;
 
     bind = vctxt->inode->idcTable;
-    if (bind == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2585]) {
+      if ((bind == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2585\n");
+      else
+        fprintf(stderr, "reached bug index 2585\n");
+    }
+    if ((!FIXREVERTER[2585] && (bind == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/* Fine, no table, no bubbles. */
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     parTable = &(vctxt->elemInfos[vctxt->depth -1]->idcTable);
     /*
@@ -23447,8 +29212,23 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 	    } while (aidc != NULL);
 	}
 
-	if (parTable != NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2586]) {
+	  if ((parTable != (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2586\n");
+	  else
+	    fprintf(stderr, "reached bug index 2586\n");
+	}
+	if ((!FIXREVERTER[2586] && (parTable != (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    parBind = *parTable;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* Search a matching parent binding for the
 	* IDC definition.
@@ -23479,8 +29259,23 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 
 	    for (i = 0; i < bind->nbNodes; i++) {
 		node = bind->nodeTable[i];
-		if (node == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2587]) {
+		  if ((node == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2587\n");
+		  else
+		    fprintf(stderr, "reached bug index 2587\n");
+		}
+		if ((!FIXREVERTER[2587] && (node == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    continue;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		/*
 		* ...with every key-sequence of the parent node, already
 		* evaluated to be a duplicate key-sequence.
@@ -23515,10 +29310,25 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 			    break;
 			j++;
 		    }
-		    if (j != oldDupls) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2591]) {
+		      if ((j != oldDupls ) && !(0))
+		        fprintf(stderr, "triggered bug index 2591\n");
+		      else
+		        fprintf(stderr, "reached bug index 2591\n");
+		    }
+		    if ((!FIXREVERTER[2591] && (j != oldDupls ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			/* Duplicate found. Skip this entry. */
 			continue;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		}
 		/*
 		* ... and with every key-sequence of the parent node.
@@ -23576,8 +29386,23 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 			}
 			if (parBind->dupls == NULL) {
 			    parBind->dupls = xmlSchemaItemListCreate();
-			    if (parBind->dupls == NULL)
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[2595]) {
+			      if ((parBind -> dupls == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 2595\n");
+			      else
+			        fprintf(stderr, "reached bug index 2595\n");
+			    }
+			    if ((!FIXREVERTER[2595] && (parBind -> dupls == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    )
 				goto internal_error;
+				#ifdef FRCOV
+				}
+				#endif
 			}
 			xmlSchemaItemListAdd(parBind->dupls, parNode);
 		    } else {
@@ -23588,20 +29413,50 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 			if (parBind->nodeTable == NULL) {
 			    parBind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 				xmlMalloc(10 * sizeof(xmlSchemaPSVIIDCNodePtr));
-			    if (parBind->nodeTable == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[2596]) {
+			      if ((parBind -> nodeTable == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 2596\n");
+			      else
+			        fprintf(stderr, "reached bug index 2596\n");
+			    }
+			    if ((!FIXREVERTER[2596] && (parBind -> nodeTable == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 				xmlSchemaVErrMemory(NULL);
 				goto internal_error;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
 			    parBind->sizeNodes = 1;
 			} else if (parBind->nbNodes >= parBind->sizeNodes) {
 			    parBind->sizeNodes *= 2;
 			    parBind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 				xmlRealloc(parBind->nodeTable, parBind->sizeNodes *
 				sizeof(xmlSchemaPSVIIDCNodePtr));
-			    if (parBind->nodeTable == NULL) {
+			    
+			    #ifdef FRCOV
+			    {if (FIXREVERTER[2597]) {
+			      if ((parBind -> nodeTable == (void *) 0 ) && !(0))
+			        fprintf(stderr, "triggered bug index 2597\n");
+			      else
+			        fprintf(stderr, "reached bug index 2597\n");
+			    }
+			    if ((!FIXREVERTER[2597] && (parBind -> nodeTable == (void *) 0 ))
+			    #else
+			    if (0
+			    #endif
+			    ) {
 				xmlSchemaVErrMemory(NULL);
 				goto internal_error;
 			    }
+			    #ifdef FRCOV
+			    }
+			    #endif
 			}
 			parNodes = parBind->nodeTable;
 			/*
@@ -23620,8 +29475,23 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 	    * copy all node-tables.
 	    */
 	    parBind = xmlSchemaIDCNewBinding(bind->definition);
-	    if (parBind == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2598]) {
+	      if ((parBind == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2598\n");
+	      else
+	        fprintf(stderr, "reached bug index 2598\n");
+	    }
+	    if ((!FIXREVERTER[2598] && (parBind == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		goto internal_error;
+		#ifdef FRCOV
+		}
+		#endif
 
 	    /*
 	    * TODO: Hmm, how to optimize the initial number of
@@ -23651,11 +29521,26 @@ xmlSchemaBubbleIDCNodeTables(xmlSchemaValidCtxtPtr vctxt)
 		    parBind->nodeTable = (xmlSchemaPSVIIDCNodePtr *)
 			xmlMalloc(bind->nbNodes *
 			sizeof(xmlSchemaPSVIIDCNodePtr));
-		    if (parBind->nodeTable == NULL) {
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[2599]) {
+		      if ((parBind -> nodeTable == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 2599\n");
+		      else
+		        fprintf(stderr, "reached bug index 2599\n");
+		    }
+		    if ((!FIXREVERTER[2599] && (parBind -> nodeTable == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    ) {
 			xmlSchemaVErrMemory(NULL);
 			xmlSchemaIDCFreeBinding(parBind);
 			goto internal_error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    parBind->sizeNodes = bind->nbNodes;
 		    parBind->nbNodes = bind->nbNodes;
 		    memcpy(parBind->nodeTable, bind->nodeTable,
@@ -23860,19 +29745,49 @@ xmlSchemaGetFreshAttrInfo(xmlSchemaValidCtxtPtr vctxt)
 	vctxt->attrInfos = (xmlSchemaAttrInfoPtr *)
 	    xmlMalloc(sizeof(xmlSchemaAttrInfoPtr));
 	vctxt->sizeAttrInfos = 1;
-	if (vctxt->attrInfos == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2601]) {
+	  if ((vctxt -> attrInfos == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2601\n");
+	  else
+	    fprintf(stderr, "reached bug index 2601\n");
+	}
+	if ((!FIXREVERTER[2601] && (vctxt -> attrInfos == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else if (vctxt->sizeAttrInfos <= vctxt->nbAttrInfos) {
 	vctxt->sizeAttrInfos++;
 	vctxt->attrInfos = (xmlSchemaAttrInfoPtr *)
 	    xmlRealloc(vctxt->attrInfos,
 		vctxt->sizeAttrInfos * sizeof(xmlSchemaAttrInfoPtr));
-	if (vctxt->attrInfos == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2602]) {
+	  if ((vctxt -> attrInfos == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2602\n");
+	  else
+	    fprintf(stderr, "reached bug index 2602\n");
+	}
+	if ((!FIXREVERTER[2602] && (vctxt -> attrInfos == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
     } else {
 	iattr = vctxt->attrInfos[vctxt->nbAttrInfos++];
 	if (iattr->localName != NULL) {
@@ -23888,10 +29803,25 @@ xmlSchemaGetFreshAttrInfo(xmlSchemaValidCtxtPtr vctxt)
     */
     iattr = (xmlSchemaAttrInfoPtr)
 	xmlMalloc(sizeof(xmlSchemaAttrInfo));
-    if (iattr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2603]) {
+      if ((iattr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2603\n");
+      else
+        fprintf(stderr, "reached bug index 2603\n");
+    }
+    if ((!FIXREVERTER[2603] && (iattr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaVErrMemory(vctxt);
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(iattr, 0, sizeof(xmlSchemaAttrInfo));
     iattr->nodeType = XML_ATTRIBUTE_NODE;
     vctxt->attrInfos[vctxt->nbAttrInfos++] = iattr;
@@ -23912,11 +29842,26 @@ xmlSchemaValidatorPushAttribute(xmlSchemaValidCtxtPtr vctxt,
     xmlSchemaAttrInfoPtr attr;
 
     attr = xmlSchemaGetFreshAttrInfo(vctxt);
-    if (attr == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2604]) {
+      if ((attr == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2604\n");
+      else
+        fprintf(stderr, "reached bug index 2604\n");
+    }
+    if ((!FIXREVERTER[2604] && (attr == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaPushAttribute",
 	    "calling xmlSchemaGetFreshAttrInfo()");
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     attr->node = attrNode;
     attr->nodeLine = nodeLine;
     attr->state = XML_SCHEMAS_ATTR_UNKNOWN;
@@ -23951,8 +29896,23 @@ xmlSchemaValidatorPushAttribute(xmlSchemaValidCtxtPtr vctxt,
     attr->value = value;
     if (ownedValue)
 	attr->flags |= XML_SCHEMA_NODE_INFO_FLAG_OWNED_VALUES;
-    if (attr->metaType != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2605]) {
+      if ((attr -> metaType != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2605\n");
+      else
+        fprintf(stderr, "reached bug index 2605\n");
+    }
+    if ((!FIXREVERTER[2605] && (attr -> metaType != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	attr->state = XML_SCHEMAS_ATTR_META;
+	#ifdef FRCOV
+	}
+	#endif
     return (0);
 }
 
@@ -24031,18 +29991,48 @@ xmlSchemaGetFreshElemInfo(xmlSchemaValidCtxtPtr vctxt)
 {
     xmlSchemaNodeInfoPtr info = NULL;
 
-    if (vctxt->depth > vctxt->sizeElemInfos) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2606]) {
+      if ((vctxt -> depth > vctxt -> sizeElemInfos ) && !(0))
+        fprintf(stderr, "triggered bug index 2606\n");
+      else
+        fprintf(stderr, "reached bug index 2606\n");
+    }
+    if ((!FIXREVERTER[2606] && (vctxt -> depth > vctxt -> sizeElemInfos ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaGetFreshElemInfo",
 	    "inconsistent depth encountered");
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (vctxt->elemInfos == NULL) {
 	vctxt->elemInfos = (xmlSchemaNodeInfoPtr *)
 	    xmlMalloc(10 * sizeof(xmlSchemaNodeInfoPtr));
-	if (vctxt->elemInfos == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2607]) {
+	  if ((vctxt -> elemInfos == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2607\n");
+	  else
+	    fprintf(stderr, "reached bug index 2607\n");
+	}
+	if ((!FIXREVERTER[2607] && (vctxt -> elemInfos == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(vctxt->elemInfos, 0, 10 * sizeof(xmlSchemaNodeInfoPtr));
 	vctxt->sizeElemInfos = 10;
     } else if (vctxt->sizeElemInfos <= vctxt->depth) {
@@ -24052,10 +30042,25 @@ xmlSchemaGetFreshElemInfo(xmlSchemaValidCtxtPtr vctxt)
 	vctxt->elemInfos = (xmlSchemaNodeInfoPtr *)
 	    xmlRealloc(vctxt->elemInfos, vctxt->sizeElemInfos *
 	    sizeof(xmlSchemaNodeInfoPtr));
-	if (vctxt->elemInfos == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2608]) {
+	  if ((vctxt -> elemInfos == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2608\n");
+	  else
+	    fprintf(stderr, "reached bug index 2608\n");
+	}
+	if ((!FIXREVERTER[2608] && (vctxt -> elemInfos == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* We need the new memory to be NULLed.
 	* TODO: Use memset instead?
@@ -24068,10 +30073,25 @@ xmlSchemaGetFreshElemInfo(xmlSchemaValidCtxtPtr vctxt)
     if (info == NULL) {
 	info = (xmlSchemaNodeInfoPtr)
 	    xmlMalloc(sizeof(xmlSchemaNodeInfo));
-	if (info == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2609]) {
+	  if ((info == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2609\n");
+	  else
+	    fprintf(stderr, "reached bug index 2609\n");
+	}
+	if ((!FIXREVERTER[2609] && (info == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaVErrMemory(vctxt);
 	    return (NULL);
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	vctxt->elemInfos[vctxt->depth] = info;
     } else {
 	if (info->localName != NULL) {
@@ -24120,8 +30140,23 @@ xmlSchemaValidateFacets(xmlSchemaAbstractCtxtPtr actxt,
     * empty: until now, "pattern" and "enumeration" facets of the
     * *base types* need to be checked as well.
     */
-    if (type->facetSet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2610]) {
+      if ((type -> facetSet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2610\n");
+      else
+        fprintf(stderr, "reached bug index 2610\n");
+    }
+    if ((!FIXREVERTER[2610] && (type -> facetSet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	goto pattern_and_enum;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (! WXS_IS_ATOMIC(type)) {
 	if (WXS_IS_LIST(type))
@@ -24182,8 +30217,23 @@ xmlSchemaValidateFacets(xmlSchemaAbstractCtxtPtr actxt,
 		value, len, type, facetLink->facet, NULL, NULL, NULL);
 	    else
 		return (ret);
-	    if (error == 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2611]) {
+	      if ((error == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2611\n");
+	      else
+	        fprintf(stderr, "reached bug index 2611\n");
+	    }
+	    if ((!FIXREVERTER[2611] && (error == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		error = ret;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	ret = 0;
     }
@@ -24218,8 +30268,23 @@ WXS_IS_LIST:
 		value, length, type, facetLink->facet, NULL, NULL, NULL);
 	    else
 		return (ret);
-	    if (error == 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2612]) {
+	      if ((error == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2612\n");
+	      else
+	        fprintf(stderr, "reached bug index 2612\n");
+	    }
+	    if ((!FIXREVERTER[2612] && (error == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		error = ret;
+		#ifdef FRCOV
+		}
+		#endif
 	}
 	ret = 0;
     }
@@ -24243,14 +30308,44 @@ pattern_and_enum:
             ret = xmlSchemaAreValuesEqual(facet->val, val);
             if (ret == 1)
                 break;
-            else if (ret < 0) {
+            else 
+            #ifdef FRCOV
+            {if (FIXREVERTER[2613]) {
+              if ((ret < 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2613\n");
+              else
+                fprintf(stderr, "reached bug index 2613\n");
+            }
+            if ((!FIXREVERTER[2613] && (ret < 0 ))
+            #else
+            if (0
+            #endif
+            ) {
                 AERROR_INT("xmlSchemaValidateFacets",
                     "validating against an enumeration facet");
                 return (-1);
             }
+            #ifdef FRCOV
+            }
+            #endif
+        }
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2614]) {
+          if ((ret != 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2614\n");
+          else
+            fprintf(stderr, "reached bug index 2614\n");
         }
-        if (ret != 0)
+        if ((!FIXREVERTER[2614] && (ret != 0 ))
+        #else
+        if (0
+        #endif
+        )
             break;
+            #ifdef FRCOV
+            }
+            #endif
         /*
         * Break on the first set of enumerations. Any additional
         *  enumerations which might be existent on the ancestors
@@ -24269,8 +30364,23 @@ pattern_and_enum:
                 value, 0, type, NULL, NULL, NULL, NULL);
         } else
             return (ret);
-        if (error == 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[2615]) {
+          if ((error == 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 2615\n");
+          else
+            fprintf(stderr, "reached bug index 2615\n");
+        }
+        if ((!FIXREVERTER[2615] && (error == 0 ))
+        #else
+        if (0
+        #endif
+        )
             error = ret;
+            #ifdef FRCOV
+            }
+            #endif
     }
 
     /*
@@ -24311,8 +30421,23 @@ pattern_and_enum:
                     value, 0, type, facet, NULL, NULL, NULL);
             } else
                 return (ret);
-            if (error == 0)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[2616]) {
+              if ((error == 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 2616\n");
+              else
+                fprintf(stderr, "reached bug index 2616\n");
+            }
+            if ((!FIXREVERTER[2616] && (error == 0 ))
+            #else
+            if (0
+            #endif
+            )
                 error = ret;
+                #ifdef FRCOV
+                }
+                #endif
             break;
         }
         tmpType = tmpType->baseType;
@@ -24347,7 +30472,19 @@ xmlSchemaValidateQName(xmlSchemaValidCtxtPtr vctxt,
     xmlChar *local, *prefix = NULL;
 
     ret = xmlValidateQName(value, 1);
-    if (ret != 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2617]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2617\n");
+      else
+        fprintf(stderr, "reached bug index 2617\n");
+    }
+    if ((!FIXREVERTER[2617] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	if (ret == -1) {
 	    VERROR_INT("xmlSchemaValidateQName",
 		"calling xmlValidateQName()");
@@ -24355,6 +30492,9 @@ xmlSchemaValidateQName(xmlSchemaValidCtxtPtr vctxt,
 	}
 	return( XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * NOTE: xmlSplitQName2 will always return a duplicated
     * strings.
@@ -24363,8 +30503,23 @@ xmlSchemaValidateQName(xmlSchemaValidCtxtPtr vctxt,
     stripped = xmlSchemaCollapseString(value);
     local = xmlSplitQName2(stripped ? stripped : value, &prefix);
     xmlFree(stripped);
-    if (local == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2618]) {
+      if ((local == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2618\n");
+      else
+        fprintf(stderr, "reached bug index 2618\n");
+    }
+    if ((!FIXREVERTER[2618] && (local == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	local = xmlStrdup(value);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * OPTIMIZE TODO: Use flags for:
     *  - is there any namespace binding?
@@ -24457,8 +30612,23 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
     */
     if ((! valNeeded) && (type->flags & XML_SCHEMAS_TYPE_FACETSNEEDVALUE))
 	valNeeded = 1;
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2619]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2619\n");
+      else
+        fprintf(stderr, "reached bug index 2619\n");
+    }
+    if ((!FIXREVERTER[2619] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	value = BAD_CAST "";
+	#ifdef FRCOV
+	}
+	#endif
     if (WXS_IS_ANY_SIMPLE_TYPE(type) || WXS_IS_ATOMIC(type)) {
 	xmlSchemaTypePtr biType; /* The built-in type. */
 	/*
@@ -24478,11 +30648,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		(biType->type != XML_SCHEMA_TYPE_BASIC))
 		biType = biType->baseType;
 
-	    if (biType == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2620]) {
+	      if ((biType == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2620\n");
+	      else
+	        fprintf(stderr, "reached bug index 2620\n");
+	    }
+	    if ((!FIXREVERTER[2620] && (biType == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 		    "could not get the built-in type");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	} else
 	    biType = type;
 	/*
@@ -24535,11 +30720,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 	    goto internal_error;
 	}
 	if (ret != 0) {
-	    if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2621]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2621\n");
+	      else
+	        fprintf(stderr, "reached bug index 2621\n");
+	    }
+	    if ((!FIXREVERTER[2621] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 		    "validating against a built-in type");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (WXS_IS_LIST(type))
 		ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
 	    else
@@ -24553,11 +30753,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		(xmlSchemaValType) biType->builtInType, value, val,
 		0, fireErrors);
 	    if (ret != 0) {
-		if (ret < 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2622]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2622\n");
+		  else
+		    fprintf(stderr, "reached bug index 2622\n");
+		}
+		if ((!FIXREVERTER[2622] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 			"validating facets of atomic simple type");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		if (WXS_IS_LIST(type))
 		    ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
 		else
@@ -24617,15 +30832,45 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		prevVal = curVal;
 		curVal = NULL;
 	    }
-	    if (ret != 0) {
-		if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2624]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2624\n");
+	      else
+	        fprintf(stderr, "reached bug index 2624\n");
+	    }
+	    if ((!FIXREVERTER[2624] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2623]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2623\n");
+		  else
+		    fprintf(stderr, "reached bug index 2623\n");
+		}
+		if ((!FIXREVERTER[2623] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 			"validating an item of list simple type");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
 		break;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    cur = end;
 	} while (*cur != 0);
 	FREE_AND_NULL(tmpValue);
@@ -24637,11 +30882,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		XML_SCHEMAS_UNKNOWN, value, val,
 		len, fireErrors);
 	    if (ret != 0) {
-		if (ret < 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2625]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2625\n");
+		  else
+		    fprintf(stderr, "reached bug index 2625\n");
+		}
+		if ((!FIXREVERTER[2625] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 			"validating facets of list simple type");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
 	    }
 	}
@@ -24672,11 +30932,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 	* {member type definitions}
 	*/
 	memberLink = xmlSchemaGetUnionSimpleTypeMemberTypes(type);
-	if (memberLink == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2626]) {
+	  if ((memberLink == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2626\n");
+	  else
+	    fprintf(stderr, "reached bug index 2626\n");
+	}
+	if ((!FIXREVERTER[2626] && (memberLink == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 		"union simple type has no member types");
 	    goto internal_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Always normalize union type values, since we currently
 	* cannot store the whitespace information with the value
@@ -24690,16 +30965,46 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 	    else
 		ret = xmlSchemaVCheckCVCSimpleType(actxt, node,
 		    memberLink->type, value, NULL, 0, 1, 0);
-	    if (ret <= 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2627]) {
+	      if ((ret <= 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2627\n");
+	      else
+	        fprintf(stderr, "reached bug index 2627\n");
+	    }
+	    if ((!FIXREVERTER[2627] && (ret <= 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    memberLink = memberLink->next;
 	}
 	if (ret != 0) {
-	    if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2628]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2628\n");
+	      else
+	        fprintf(stderr, "reached bug index 2628\n");
+	    }
+	    if ((!FIXREVERTER[2628] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 		    "validating members of union simple type");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3;
 	}
 	/*
@@ -24716,11 +31021,26 @@ xmlSchemaVCheckCVCSimpleType(xmlSchemaAbstractCtxtPtr actxt,
 		XML_SCHEMAS_UNKNOWN, value, val,
 		0, fireErrors);
 	    if (ret != 0) {
-		if (ret < 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2629]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2629\n");
+		  else
+		    fprintf(stderr, "reached bug index 2629\n");
+		}
+		if ((!FIXREVERTER[2629] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    AERROR_INT("xmlSchemaVCheckCVCSimpleType",
 			"validating facets of union simple type");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ret = XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3;
 	    }
 	}
@@ -24754,8 +31074,23 @@ xmlSchemaVExpandQName(xmlSchemaValidCtxtPtr vctxt,
 {
     int ret = 0;
 
-    if ((nsName == NULL) || (localName == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2630]) {
+      if ((nsName == (void *) 0 || localName == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2630\n");
+      else
+        fprintf(stderr, "reached bug index 2630\n");
+    }
+    if ((!FIXREVERTER[2630] && (nsName == (void *) 0 || localName == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     *nsName = NULL;
     *localName = NULL;
 
@@ -24819,8 +31154,23 @@ xmlSchemaProcessXSIType(xmlSchemaValidCtxtPtr vctxt,
     *   (1.2.1.2.1) - (1.2.1.2.4)
     * Handle 'xsi:type'.
     */
-    if (localType == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2632]) {
+      if ((localType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2632\n");
+      else
+        fprintf(stderr, "reached bug index 2632\n");
+    }
+    if ((!FIXREVERTER[2632] && (localType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     *localType = NULL;
     if (iattr == NULL)
 	return (0);
@@ -24837,15 +31187,45 @@ xmlSchemaProcessXSIType(xmlSchemaValidCtxtPtr vctxt,
 	*/
 	ret = xmlSchemaVExpandQName(vctxt, iattr->value,
 	    &nsName, &local);
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2634]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2634\n");
+	  else
+	    fprintf(stderr, "reached bug index 2634\n");
+	}
+	if ((!FIXREVERTER[2634] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2633]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2633\n");
+	      else
+	        fprintf(stderr, "reached bug index 2633\n");
+	    }
+	    if ((!FIXREVERTER[2633] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateElementByDeclaration",
 		    "calling xmlSchemaQNameExpand() to validate the "
 		    "attribute 'xsi:type'");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto exit;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* (cvc-elt) (3.3.4) : (4.2)
 	* (cvc-assess-elt) (1.2.1.2.3)
@@ -24944,11 +31324,26 @@ xmlSchemaValidateElemDecl(xmlSchemaValidCtxtPtr vctxt)
     /*
     * cvc-elt (3.3.4) : 1
     */
-    if (elemDecl == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2635]) {
+      if ((elemDecl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2635\n");
+      else
+        fprintf(stderr, "reached bug index 2635\n");
+    }
+    if ((!FIXREVERTER[2635] && (elemDecl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR(XML_SCHEMAV_CVC_ELT_1, NULL,
 	    "No matching declaration available");
         return (vctxt->err);
     }
+    #ifdef FRCOV
+    }
+    #endif
     actualType = WXS_ELEM_TYPEDEF(elemDecl);
     /*
     * cvc-elt (3.3.4) : 2
@@ -24958,11 +31353,26 @@ xmlSchemaValidateElemDecl(xmlSchemaValidCtxtPtr vctxt)
 	    "The element declaration is abstract");
         return (vctxt->err);
     }
-    if (actualType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2636]) {
+      if ((actualType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2636\n");
+      else
+        fprintf(stderr, "reached bug index 2636\n");
+    }
+    if ((!FIXREVERTER[2636] && (actualType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR(XML_SCHEMAV_CVC_TYPE_1, NULL,
 	    "The type definition is absent");
 	return (XML_SCHEMAV_CVC_TYPE_1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (vctxt->nbAttrInfos != 0) {
 	int ret;
 	xmlSchemaAttrInfoPtr iattr;
@@ -25050,11 +31460,26 @@ xmlSchemaValidateElemDecl(xmlSchemaValidCtxtPtr vctxt)
     /*
     * No actual type definition.
     */
-    if (actualType == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2638]) {
+      if ((actualType == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2638\n");
+      else
+        fprintf(stderr, "reached bug index 2638\n");
+    }
+    if ((!FIXREVERTER[2638] && (actualType == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR(XML_SCHEMAV_CVC_TYPE_1, NULL,
 	    "The type definition is absent");
 	return (XML_SCHEMAV_CVC_TYPE_1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Remember the actual type definition.
     */
@@ -25076,8 +31501,23 @@ xmlSchemaVAttributesSimple(xmlSchemaValidCtxtPtr vctxt)
     * whose local name is one of type, nil, schemaLocation or
     * noNamespaceSchemaLocation."
     */
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2639]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2639\n");
+      else
+        fprintf(stderr, "reached bug index 2639\n");
+    }
+    if ((!FIXREVERTER[2639] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     for (i = 0; i < vctxt->nbAttrInfos; i++) {
 	iattr = vctxt->attrInfos[i];
 	if (! iattr->metaType) {
@@ -25100,8 +31540,23 @@ xmlSchemaClearAttrInfos(xmlSchemaValidCtxtPtr vctxt)
     int i;
     xmlSchemaAttrInfoPtr attr;
 
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2640]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2640\n");
+      else
+        fprintf(stderr, "reached bug index 2640\n");
+    }
+    if ((!FIXREVERTER[2640] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     for (i = 0; i < vctxt->nbAttrInfos; i++) {
 	attr = vctxt->attrInfos[i];
 	if (attr->flags & XML_SCHEMA_NODE_INFO_FLAG_OWNED_NAMES) {
@@ -25232,12 +31687,27 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    * item's [attributes] as per clause 3.1 above."
 	    */
 	    tmpiattr = xmlSchemaGetFreshAttrInfo(vctxt);
-	    if (tmpiattr == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2641]) {
+	      if ((tmpiattr == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2641\n");
+	      else
+	        fprintf(stderr, "reached bug index 2641\n");
+	    }
+	    if ((!FIXREVERTER[2641] && (tmpiattr == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT(
 		    "xmlSchemaVAttributesComplex",
 		    "calling xmlSchemaGetFreshAttrInfo()");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    tmpiattr->state = XML_SCHEMAS_ATTR_ERR_MISSING;
 	    tmpiattr->use = attrUse;
 	    tmpiattr->decl = attrDecl;
@@ -25248,12 +31718,27 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    * Handle non-existent, optional, default/fixed attributes.
 	    */
 	    tmpiattr = xmlSchemaGetFreshAttrInfo(vctxt);
-	    if (tmpiattr == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2642]) {
+	      if ((tmpiattr == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2642\n");
+	      else
+	        fprintf(stderr, "reached bug index 2642\n");
+	    }
+	    if ((!FIXREVERTER[2642] && (tmpiattr == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT(
 		    "xmlSchemaVAttributesComplex",
 		    "calling xmlSchemaGetFreshAttrInfo()");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    tmpiattr->state = XML_SCHEMAS_ATTR_DEFAULT;
 	    tmpiattr->use = attrUse;
 	    tmpiattr->decl = attrDecl;
@@ -25263,8 +31748,23 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	}
     }
 
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2643]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2643\n");
+      else
+        fprintf(stderr, "reached bug index 2643\n");
+    }
+    if ((!FIXREVERTER[2643] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Validate against the wildcard.
     */
@@ -25279,8 +31779,23 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    * SPEC (cvc-complex-type) (3)
 	    * Skip meta attributes.
 	    */
-	    if (iattr->state != XML_SCHEMAS_ATTR_UNKNOWN)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2644]) {
+	      if ((iattr -> state != 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2644\n");
+	      else
+	        fprintf(stderr, "reached bug index 2644\n");
+	    }
+	    if ((!FIXREVERTER[2644] && (iattr -> state != 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		continue;
+		#ifdef FRCOV
+		}
+		#endif
 	    /*
 	    * SPEC (cvc-complex-type)
 	    * (3.2.2) "The attribute information item must be `valid` with
@@ -25381,8 +31896,23 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	}
     }
 
-    if (vctxt->nbAttrInfos == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2646]) {
+      if ((vctxt -> nbAttrInfos == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2646\n");
+      else
+        fprintf(stderr, "reached bug index 2646\n");
+    }
+    if ((!FIXREVERTER[2646] && (vctxt -> nbAttrInfos == 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (0);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
     * Get the owner element; needed for creation of default attributes.
@@ -25409,10 +31939,25 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	/*
 	* VAL TODO: What to do if the type definition is missing?
 	*/
-	if (iattr->typeDef == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2647]) {
+	  if ((iattr -> typeDef == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2647\n");
+	  else
+	    fprintf(stderr, "reached bug index 2647\n");
+	}
+	if ((!FIXREVERTER[2647] && (iattr -> typeDef == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    iattr->state = XML_SCHEMAS_ATTR_ERR_NO_TYPE;
 	    continue;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 	ACTIVATE_ATTRIBUTE(iattr);
 	fixed = 0;
@@ -25431,7 +31976,19 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    }
 	}
 
-	if (iattr->state == XML_SCHEMAS_ATTR_DEFAULT) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2651]) {
+	  if ((iattr -> state == 8 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2651\n");
+	  else
+	    fprintf(stderr, "reached bug index 2651\n");
+	}
+	if ((!FIXREVERTER[2651] && (iattr -> state == 8 ))
+	#else
+	if (0
+	#endif
+	) {
 	    /*
 	    * Default/fixed attributes.
 	    * We need the value only if we need to resolve IDCs or
@@ -25449,18 +32006,48 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 		* IDCs will consume the precomputed default value,
 		* so we need to clone it.
 		*/
-		if (iattr->val == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2648]) {
+		  if ((iattr -> val == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2648\n");
+		  else
+		    fprintf(stderr, "reached bug index 2648\n");
+		}
+		if ((!FIXREVERTER[2648] && (iattr -> val == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaVAttributesComplex",
 			"default/fixed value on an attribute use was "
 			"not precomputed");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		iattr->val = xmlSchemaCopyValue(iattr->val);
-		if (iattr->val == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2649]) {
+		  if ((iattr -> val == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2649\n");
+		  else
+		    fprintf(stderr, "reached bug index 2649\n");
+		}
+		if ((!FIXREVERTER[2649] && (iattr -> val == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaVAttributesComplex",
 			"calling xmlSchemaCopyValue()");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 	    /*
 	    * PSVI: Add the default attribute to the current element.
@@ -25478,8 +32065,23 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 		*/
 		normValue = xmlSchemaNormalizeValue(iattr->typeDef,
 		    iattr->value);
-		if (normValue != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2650]) {
+		  if ((normValue != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2650\n");
+		  else
+		    fprintf(stderr, "reached bug index 2650\n");
+		}
+		if ((!FIXREVERTER[2650] && (normValue != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    value = BAD_CAST normValue;
+		    #ifdef FRCOV
+		    }
+		    #endif
 
 		if (iattr->nsName == NULL) {
 		    if (xmlNewProp(defAttrOwnerElem,
@@ -25536,6 +32138,9 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    */
 	    goto eval_idcs;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* Validate the value.
 	*/
@@ -25612,10 +32217,25 @@ xmlSchemaVAttributesComplex(xmlSchemaValidCtxtPtr vctxt)
 	    * (4) "The item's *actual* value must match the *value* of
 	    * the {value constraint}, if it is present and fixed."
 	    */
-	    if (iattr->val == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2653]) {
+	      if ((iattr -> val == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2653\n");
+	      else
+	        fprintf(stderr, "reached bug index 2653\n");
+	    }
+	    if ((!FIXREVERTER[2653] && (iattr -> val == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		/* VAL TODO: A value was not precomputed. */
 		goto eval_idcs;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if ((iattr->use != NULL) &&
 		(iattr->use->defValue != NULL)) {
 		if (iattr->use->defVal == NULL) {
@@ -25670,11 +32290,23 @@ eval_idcs:
     */
     for (i = 0; i < vctxt->nbAttrInfos; i++) {
 	iattr = vctxt->attrInfos[i];
-	if ((iattr->state == XML_SCHEMAS_ATTR_META) ||
-	    (iattr->state == XML_SCHEMAS_ATTR_ASSESSED) ||
-	    (iattr->state == XML_SCHEMAS_ATTR_WILD_SKIP) ||
-	    (iattr->state == XML_SCHEMAS_ATTR_WILD_LAX_NO_DECL))
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2654]) {
+	  if ((iattr -> state == 17 || iattr -> state == 2 || iattr -> state == 13 || iattr -> state == 14 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2654\n");
+	  else
+	    fprintf(stderr, "reached bug index 2654\n");
+	}
+	if ((!FIXREVERTER[2654] && (iattr -> state == 17 || iattr -> state == 2 || iattr -> state == 13 || iattr -> state == 14 ))
+	#else
+	if (0
+	#endif
+	)
 	    continue;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	ACTIVATE_ATTRIBUTE(iattr);
 	switch (iattr->state) {
 	    case XML_SCHEMAS_ATTR_ERR_MISSING: {
@@ -25749,7 +32381,19 @@ xmlSchemaValidateElemWildcard(xmlSchemaValidCtxtPtr vctxt,
 	return (-1);
     }
     *skip = 0;
-    if (wild->processContents == XML_SCHEMAS_ANY_SKIP) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2655]) {
+      if ((wild -> processContents == 1 ) && !(0))
+        fprintf(stderr, "triggered bug index 2655\n");
+      else
+        fprintf(stderr, "reached bug index 2655\n");
+    }
+    if ((!FIXREVERTER[2655] && (wild -> processContents == 1 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* URGENT VAL TODO: Either we need to position the stream to the
 	* next sibling, or walk the whole subtree.
@@ -25757,6 +32401,9 @@ xmlSchemaValidateElemWildcard(xmlSchemaValidCtxtPtr vctxt,
 	*skip = 1;
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     {
 	xmlSchemaElementPtr decl = NULL;
 
@@ -25767,13 +32414,28 @@ xmlSchemaValidateElemWildcard(xmlSchemaValidCtxtPtr vctxt,
 	    return (0);
 	}
     }
-    if (wild->processContents == XML_SCHEMAS_ANY_STRICT) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2656]) {
+      if ((wild -> processContents == 3 ) && !(0))
+        fprintf(stderr, "triggered bug index 2656\n");
+      else
+        fprintf(stderr, "reached bug index 2656\n");
+    }
+    if ((!FIXREVERTER[2656] && (wild -> processContents == 3 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/* VAL TODO: Change to proper error code. */
 	VERROR(XML_SCHEMAV_CVC_ELT_1, NULL, /* WXS_BASIC_CAST wild */
 	    "No matching global element declaration available, but "
 	    "demanded by the strict wildcard");
 	return (vctxt->err);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (vctxt->nbAttrInfos != 0) {
 	xmlSchemaAttrInfoPtr iattr;
 	/*
@@ -25893,11 +32555,26 @@ static int
 xmlSchemaValidatorPushElem(xmlSchemaValidCtxtPtr vctxt)
 {
     vctxt->inode = xmlSchemaGetFreshElemInfo(vctxt);
-    if (vctxt->inode == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2657]) {
+      if ((vctxt -> inode == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2657\n");
+      else
+        fprintf(stderr, "reached bug index 2657\n");
+    }
+    if ((!FIXREVERTER[2657] && (vctxt -> inode == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaValidatorPushElem",
 	    "calling xmlSchemaGetFreshElemInfo()");
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     vctxt->nbAttrInfos = 0;
     return (0);
 }
@@ -25972,11 +32649,26 @@ xmlSchemaValidatorPopElem(xmlSchemaValidCtxtPtr vctxt)
 		inode->regexCtxt =
 		    xmlRegNewExecCtxt(inode->typeDef->contModel,
 		    xmlSchemaVContentModelCallback, vctxt);
-		if (inode->regexCtxt == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2658]) {
+		  if ((inode -> regexCtxt == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2658\n");
+		  else
+		    fprintf(stderr, "reached bug index 2658\n");
+		}
+		if ((!FIXREVERTER[2658] && (inode -> regexCtxt == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaValidatorPopElem",
 			"failed to create a regex context");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 
 	    /*
@@ -26029,7 +32721,19 @@ character_content:
     /*
     * Check character content.
     */
-    if (inode->decl == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2660]) {
+      if ((inode -> decl == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2660\n");
+      else
+        fprintf(stderr, "reached bug index 2660\n");
+    }
+    if ((!FIXREVERTER[2660] && (inode -> decl == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* Speedup if no declaration exists.
 	*/
@@ -26041,13 +32745,31 @@ character_content:
 		inode, inode->typeDef->contentTypeDef,
 		inode->value);
 	}
-	if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2659]) {
+	  if ((ret < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2659\n");
+	  else
+	    fprintf(stderr, "reached bug index 2659\n");
+	}
+	if ((!FIXREVERTER[2659] && (ret < 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    VERROR_INT("xmlSchemaValidatorPopElem",
 		"calling xmlSchemaVCheckCVCSimpleType()");
 	    goto internal_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	goto end_elem;
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * cvc-elt (3.3.4) : 5
     * The appropriate case among the following must be true:
@@ -26078,14 +32800,44 @@ character_content:
 
 	    ret = xmlSchemaCheckCOSValidDefault(vctxt,
 		inode->decl->value, &(inode->val));
-	    if (ret != 0) {
-		if (ret < 0) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2662]) {
+	      if ((ret != 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2662\n");
+	      else
+	        fprintf(stderr, "reached bug index 2662\n");
+	    }
+	    if ((!FIXREVERTER[2662] && (ret != 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2661]) {
+		  if ((ret < 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2661\n");
+		  else
+		    fprintf(stderr, "reached bug index 2661\n");
+		}
+		if ((!FIXREVERTER[2661] && (ret < 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaValidatorPopElem",
 			"calling xmlSchemaCheckCOSValidDefault()");
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		goto end_elem;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * Stop here, to avoid redundant validation of the value
 	    * (see following).
@@ -26108,14 +32860,44 @@ character_content:
 		inode, inode->typeDef->contentTypeDef,
 		inode->decl->value);
 	}
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2664]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2664\n");
+	  else
+	    fprintf(stderr, "reached bug index 2664\n");
+	}
+	if ((!FIXREVERTER[2664] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2663]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2663\n");
+	      else
+	        fprintf(stderr, "reached bug index 2663\n");
+	    }
+	    if ((!FIXREVERTER[2663] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidatorPopElem",
 		    "calling xmlSchemaVCheckCVCSimpleType()");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto end_elem;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 
 default_psvi:
 	/*
@@ -26178,14 +32960,44 @@ default_psvi:
 	    ret = xmlSchemaVCheckINodeDataType(vctxt,
 		inode, inode->typeDef->contentTypeDef, inode->value);
 	}
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2666]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2666\n");
+	  else
+	    fprintf(stderr, "reached bug index 2666\n");
+	}
+	if ((!FIXREVERTER[2666] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2665]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2665\n");
+	      else
+	        fprintf(stderr, "reached bug index 2665\n");
+	    }
+	    if ((!FIXREVERTER[2665] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidatorPopElem",
 		    "calling xmlSchemaVCheckCVCSimpleType()");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto end_elem;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	/*
 	* 5.2.2 If there is a fixed {value constraint} and clause 3.2 has
 	* not applied, all of the following must be true:
@@ -26268,12 +33080,42 @@ default_psvi:
     }
 
 end_elem:
-    if (vctxt->depth < 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2667]) {
+      if ((vctxt -> depth < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2667\n");
+      else
+        fprintf(stderr, "reached bug index 2667\n");
+    }
+    if ((!FIXREVERTER[2667] && (vctxt -> depth < 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	/* TODO: raise error? */
 	return (0);
     }
-    if (vctxt->depth == vctxt->skipDepth)
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2668]) {
+      if ((vctxt -> depth == vctxt -> skipDepth  ) && !(0))
+        fprintf(stderr, "triggered bug index 2668\n");
+      else
+        fprintf(stderr, "reached bug index 2668\n");
+    }
+    if ((!FIXREVERTER[2668] && (vctxt -> depth == vctxt -> skipDepth  ))
+    #else
+    if (0
+    #endif
+    )
 	vctxt->skipDepth = -1;
+	#ifdef FRCOV
+	}
+	#endif
     /*
     * Evaluate the history of XPath state objects.
     */
@@ -26331,11 +33173,26 @@ end_elem:
     /*
     * Skip further processing if we are on the validation root.
     */
-    if (vctxt->depth == 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2669]) {
+      if ((vctxt -> depth == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2669\n");
+      else
+        fprintf(stderr, "reached bug index 2669\n");
+    }
+    if ((!FIXREVERTER[2669] && (vctxt -> depth == 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	vctxt->depth--;
 	vctxt->inode = NULL;
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Reset the keyrefDepth if needed.
     */
@@ -26377,11 +33234,26 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
     xmlSchemaTypePtr ptype;
     int ret = 0;
 
-    if (vctxt->depth <= 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2670]) {
+      if ((vctxt -> depth <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2670\n");
+      else
+        fprintf(stderr, "reached bug index 2670\n");
+    }
+    if ((!FIXREVERTER[2670] && (vctxt -> depth <= 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	VERROR_INT("xmlSchemaValidateChildElem",
 	    "not intended for the validation root");
 	return (-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     pielem = vctxt->elemInfos[vctxt->depth -1];
     if (pielem->flags & XML_SCHEMA_ELEM_INFO_EMPTY)
 	pielem->flags ^= XML_SCHEMA_ELEM_INFO_EMPTY;
@@ -26403,7 +33275,19 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 
     ptype = pielem->typeDef;
 
-    if (ptype->builtInType == XML_SCHEMAS_ANYTYPE) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2672]) {
+      if ((ptype -> builtInType == XML_SCHEMAS_ANYTYPE ) && !(0))
+        fprintf(stderr, "triggered bug index 2672\n");
+      else
+        fprintf(stderr, "reached bug index 2672\n");
+    }
+    if ((!FIXREVERTER[2672] && (ptype -> builtInType == XML_SCHEMAS_ANYTYPE ))
+    #else
+    if (0
+    #endif
+    ) {
 	/*
 	* Workaround for "anyType": we have currently no content model
 	* assigned for "anyType", so handle it explicitly.
@@ -26424,7 +33308,19 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 	    if (iattr != NULL) {
 		ret = xmlSchemaProcessXSIType(vctxt, iattr,
 		    &(vctxt->inode->typeDef), NULL);
-		if (ret != 0) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2671]) {
+		  if ((ret != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2671\n");
+		  else
+		    fprintf(stderr, "reached bug index 2671\n");
+		}
+		if ((!FIXREVERTER[2671] && (ret != 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    if (ret == -1) {
 			VERROR_INT("xmlSchemaValidateChildElem",
 			    "calling xmlSchemaProcessXSIType() to "
@@ -26433,6 +33329,9 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 		    }
 		    return (ret);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    } else {
 		 /*
 		 * Fallback to "anyType".
@@ -26450,6 +33349,9 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 	}
 	return (0);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     switch (ptype->contentType) {
 	case XML_SCHEMA_CONTENT_EMPTY:
@@ -26475,11 +33377,26 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 
 	    /* VAL TODO: Optimized "anyType" validation.*/
 
-	    if (ptype->contModel == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2673]) {
+	      if ((ptype -> contModel == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2673\n");
+	      else
+	        fprintf(stderr, "reached bug index 2673\n");
+	    }
+	    if ((!FIXREVERTER[2673] && (ptype -> contModel == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateChildElem",
 		    "type has elem content but no content model");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    /*
 	    * Safety belt for evaluation if the cont. model was already
 	    * examined to be invalid.
@@ -26497,11 +33414,26 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 		*/
 		regexCtxt = xmlRegNewExecCtxt(ptype->contModel,
 		    xmlSchemaVContentModelCallback, vctxt);
-		if (regexCtxt == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2674]) {
+		  if ((regexCtxt == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2674\n");
+		  else
+		    fprintf(stderr, "reached bug index 2674\n");
+		}
+		if ((!FIXREVERTER[2674] && (regexCtxt == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    VERROR_INT("xmlSchemaValidateChildElem",
 			"failed to create a regex context");
 		    return (-1);
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		pielem->regexCtxt = regexCtxt;
 	    }
 
@@ -26517,11 +33449,26 @@ xmlSchemaValidateChildElem(xmlSchemaValidCtxtPtr vctxt)
 		vctxt->inode->localName,
 		vctxt->inode->nsName,
 		vctxt->inode);
-	    if (vctxt->err == XML_SCHEMAV_INTERNAL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2675]) {
+	      if ((vctxt -> err == XML_SCHEMAV_INTERNAL ) && !(0))
+	        fprintf(stderr, "triggered bug index 2675\n");
+	      else
+	        fprintf(stderr, "reached bug index 2675\n");
+	    }
+	    if ((!FIXREVERTER[2675] && (vctxt -> err == XML_SCHEMAV_INTERNAL ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateChildElem",
 		    "calling xmlRegExecPushString2()");
 		return (-1);
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    if (ret < 0) {
 		xmlRegExecErrInfo(regexCtxt, NULL, &nbval, &nbneg,
 		    &values[0], &terminal);
@@ -26691,8 +33638,23 @@ xmlSchemaVPushText(xmlSchemaValidCtxtPtr vctxt,
 		break;
 	}
     } else {
-	if (len < 0)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2676]) {
+	  if ((len < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2676\n");
+	  else
+	    fprintf(stderr, "reached bug index 2676\n");
+	}
+	if ((!FIXREVERTER[2676] && (len < 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    len = xmlStrlen(value);
+	    #ifdef FRCOV
+	    }
+	    #endif
 	/*
 	* Concat the value.
 	*/
@@ -26732,12 +33694,27 @@ xmlSchemaValidateElem(xmlSchemaValidCtxtPtr vctxt)
 	*   instantly stop the validation.
 	*/
 	ret = xmlSchemaAssembleByXSI(vctxt);
-	if (ret != 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2677]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2677\n");
+	  else
+	    fprintf(stderr, "reached bug index 2677\n");
+	}
+	if ((!FIXREVERTER[2677] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    if (ret == -1)
 		goto internal_error;
 	    vctxt->skipDepth = 0;
 	    return(ret);
 	}
+	#ifdef FRCOV
+	}
+	#endif
         /*
          * Augment the IDC definitions for the main schema and all imported ones
          * NOTE: main schema is the first in the imported list
@@ -26751,16 +33728,61 @@ xmlSchemaValidateElem(xmlSchemaValidCtxtPtr vctxt)
 	* of the parent.
 	*/
 	ret = xmlSchemaValidateChildElem(vctxt);
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2679]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2679\n");
+	  else
+	    fprintf(stderr, "reached bug index 2679\n");
+	}
+	if ((!FIXREVERTER[2679] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2678]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2678\n");
+	      else
+	        fprintf(stderr, "reached bug index 2678\n");
+	    }
+	    if ((!FIXREVERTER[2678] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateElem",
 		    "calling xmlSchemaStreamValidateChildElement()");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto exit;
 	}
-	if (vctxt->depth == vctxt->skipDepth)
+	#ifdef FRCOV
+	}
+	#endif
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2680]) {
+	  if ((vctxt -> depth == vctxt -> skipDepth ) && !(0))
+	    fprintf(stderr, "triggered bug index 2680\n");
+	  else
+	    fprintf(stderr, "reached bug index 2680\n");
+	}
+	if ((!FIXREVERTER[2680] && (vctxt -> depth == vctxt -> skipDepth ))
+	#else
+	if (0
+	#endif
+	)
 	    goto exit;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	if ((vctxt->inode->decl == NULL) &&
 	    (vctxt->inode->typeDef == NULL)) {
 	    VERROR_INT("xmlSchemaValidateElem",
@@ -26793,14 +33815,44 @@ xmlSchemaValidateElem(xmlSchemaValidCtxtPtr vctxt)
 	* Wildcards.
 	*/
 	ret = xmlSchemaValidateElemWildcard(vctxt, &skip);
-	if (ret != 0) {
-	    if (ret < 0) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2682]) {
+	  if ((ret != 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2682\n");
+	  else
+	    fprintf(stderr, "reached bug index 2682\n");
+	}
+	if ((!FIXREVERTER[2682] && (ret != 0 ))
+	#else
+	if (0
+	#endif
+	) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2681]) {
+	      if ((ret < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2681\n");
+	      else
+	        fprintf(stderr, "reached bug index 2681\n");
+	    }
+	    if ((!FIXREVERTER[2681] && (ret < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		VERROR_INT("xmlSchemaValidateElem",
 		    "calling xmlSchemaValidateElemWildcard()");
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    goto exit;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	if (skip) {
 	    vctxt->skipDepth = vctxt->depth;
 	    goto exit;
@@ -26821,14 +33873,44 @@ xmlSchemaValidateElem(xmlSchemaValidCtxtPtr vctxt)
     * Validate against the declaration.
     */
     ret = xmlSchemaValidateElemDecl(vctxt);
-    if (ret != 0) {
-	if (ret < 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2684]) {
+      if ((ret != 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2684\n");
+      else
+        fprintf(stderr, "reached bug index 2684\n");
+    }
+    if ((!FIXREVERTER[2684] && (ret != 0 ))
+    #else
+    if (0
+    #endif
+    ) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[2683]) {
+	  if ((ret < 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 2683\n");
+	  else
+	    fprintf(stderr, "reached bug index 2683\n");
+	}
+	if ((!FIXREVERTER[2683] && (ret < 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    VERROR_INT("xmlSchemaValidateElem",
 		"calling xmlSchemaValidateElemDecl()");
 	    goto internal_error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	goto exit;
     }
+    #ifdef FRCOV
+    }
+    #endif
     /*
     * Validate against the type definition.
     */
@@ -26891,8 +33973,23 @@ type_validation:
     ret = 0;
 
 exit:
-    if (ret != 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2685]) {
+      if ((ret != 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 2685\n");
+      else
+        fprintf(stderr, "reached bug index 2685\n");
+    }
+    if ((!FIXREVERTER[2685] && (ret != 0  ))
+    #else
+    if (0
+    #endif
+    )
 	vctxt->skipDepth = vctxt->depth;
+	#ifdef FRCOV
+	}
+	#endif
     return (ret);
 internal_error:
     return (-1);
@@ -27107,8 +34204,23 @@ xmlSchemaSAXHandleText(void *ctx,
 {
     xmlSchemaValidCtxtPtr vctxt = (xmlSchemaValidCtxtPtr) ctx;
 
-    if (vctxt->depth < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2686]) {
+      if ((vctxt -> depth < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2686\n");
+      else
+        fprintf(stderr, "reached bug index 2686\n");
+    }
+    if ((!FIXREVERTER[2686] && (vctxt -> depth < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((vctxt->skipDepth != -1) && (vctxt->depth >= vctxt->skipDepth))
 	return;
     if (vctxt->inode->flags & XML_SCHEMA_ELEM_INFO_EMPTY)
@@ -27132,8 +34244,23 @@ xmlSchemaSAXHandleCDataSection(void *ctx,
 {
     xmlSchemaValidCtxtPtr vctxt = (xmlSchemaValidCtxtPtr) ctx;
 
-    if (vctxt->depth < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2687]) {
+      if ((vctxt -> depth < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2687\n");
+      else
+        fprintf(stderr, "reached bug index 2687\n");
+    }
+    if ((!FIXREVERTER[2687] && (vctxt -> depth < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((vctxt->skipDepth != -1) && (vctxt->depth >= vctxt->skipDepth))
 	return;
     if (vctxt->inode->flags & XML_SCHEMA_ELEM_INFO_EMPTY)
@@ -27153,8 +34280,23 @@ xmlSchemaSAXHandleReference(void *ctx ATTRIBUTE_UNUSED,
 {
     xmlSchemaValidCtxtPtr vctxt = (xmlSchemaValidCtxtPtr) ctx;
 
-    if (vctxt->depth < 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2688]) {
+      if ((vctxt -> depth < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2688\n");
+      else
+        fprintf(stderr, "reached bug index 2688\n");
+    }
+    if ((!FIXREVERTER[2688] && (vctxt -> depth < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return;
+	#ifdef FRCOV
+	}
+	#endif
     if ((vctxt->skipDepth != -1) && (vctxt->depth >= vctxt->skipDepth))
 	return;
     /* SAX VAL TODO: What to do here? */
@@ -27217,10 +34359,25 @@ xmlSchemaSAXHandleStartElementNs(void *ctx,
 		ielem->nsBindings =
 		    (const xmlChar **) xmlMalloc(10 *
 			sizeof(const xmlChar *));
-		if (ielem->nsBindings == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2689]) {
+		  if ((ielem -> nsBindings == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2689\n");
+		  else
+		    fprintf(stderr, "reached bug index 2689\n");
+		}
+		if ((!FIXREVERTER[2689] && (ielem -> nsBindings == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaVErrMemory(vctxt);
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 		ielem->nbNsBindings = 0;
 		ielem->sizeNsBindings = 5;
 	    } else if (ielem->sizeNsBindings <= ielem->nbNsBindings) {
@@ -27229,10 +34386,25 @@ xmlSchemaSAXHandleStartElementNs(void *ctx,
 		    (const xmlChar **) xmlRealloc(
 			(void *) ielem->nsBindings,
 			ielem->sizeNsBindings * 2 * sizeof(const xmlChar *));
-		if (ielem->nsBindings == NULL) {
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[2690]) {
+		  if ((ielem -> nsBindings == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 2690\n");
+		  else
+		    fprintf(stderr, "reached bug index 2690\n");
+		}
+		if ((!FIXREVERTER[2690] && (ielem -> nsBindings == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		) {
 		    xmlSchemaVErrMemory(vctxt);
 		    goto internal_error;
 		}
+		#ifdef FRCOV
+		}
+		#endif
 	    }
 
 	    ielem->nsBindings[ielem->nbNsBindings * 2] = namespaces[j];
@@ -27267,10 +34439,25 @@ xmlSchemaSAXHandleStartElementNs(void *ctx,
 	    */
 	    valueLen = attributes[j+4] - attributes[j+3];
 	    value = xmlMallocAtomic(valueLen + 1);
-	    if (value == NULL) {
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2691]) {
+	      if ((value == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2691\n");
+	      else
+	        fprintf(stderr, "reached bug index 2691\n");
+	    }
+	    if ((!FIXREVERTER[2691] && (value == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    ) {
 		xmlSchemaVErrMemory(vctxt);
 		goto internal_error;
 	    }
+	    #ifdef FRCOV
+	    }
+	    #endif
 	    for (k = 0, l = 0; k < valueLen; l++) {
 		if (k < valueLen - 4 &&
 		    attributes[j+3][k+0] == '&' &&
@@ -27384,10 +34571,25 @@ xmlSchemaNewValidCtxt(xmlSchemaPtr schema)
     xmlSchemaValidCtxtPtr ret;
 
     ret = (xmlSchemaValidCtxtPtr) xmlMalloc(sizeof(xmlSchemaValidCtxt));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2695]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2695\n");
+      else
+        fprintf(stderr, "reached bug index 2695\n");
+    }
+    if ((!FIXREVERTER[2695] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaVErrMemory(NULL);
         return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaValidCtxt));
     ret->type = XML_SCHEMA_CTXT_VALIDATOR;
     ret->dict = xmlDictCreate();
@@ -27550,8 +34752,23 @@ xmlSchemaClearValidCtxt(xmlSchemaValidCtxtPtr vctxt)
 void
 xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr ctxt)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2699]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2699\n");
+      else
+        fprintf(stderr, "reached bug index 2699\n");
+    }
+    if ((!FIXREVERTER[2699] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if (ctxt->value != NULL)
         xmlSchemaFreeValue(ctxt->value);
     if (ctxt->pctxt != NULL)
@@ -27613,8 +34830,23 @@ xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr ctxt)
 
 	for (i = 0; i < ctxt->sizeElemInfos; i++) {
 	    ei = ctxt->elemInfos[i];
-	    if (ei == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[2700]) {
+	      if ((ei == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 2700\n");
+	      else
+	        fprintf(stderr, "reached bug index 2700\n");
+	    }
+	    if ((!FIXREVERTER[2700] && (ei == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		break;
+		#ifdef FRCOV
+		}
+		#endif
 	    xmlSchemaClearElemInfo(ctxt, ei);
 	    xmlFree(ei);
 	}
@@ -27662,8 +34894,23 @@ xmlSchemaSetValidErrors(xmlSchemaValidCtxtPtr ctxt,
                         xmlSchemaValidityErrorFunc err,
                         xmlSchemaValidityWarningFunc warn, void *ctx)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2702]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2702\n");
+      else
+        fprintf(stderr, "reached bug index 2702\n");
+    }
+    if ((!FIXREVERTER[2702] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->error = err;
     ctxt->warning = warn;
     ctxt->errCtxt = ctx;
@@ -27683,8 +34930,23 @@ void
 xmlSchemaSetValidStructuredErrors(xmlSchemaValidCtxtPtr ctxt,
 				  xmlStructuredErrorFunc serror, void *ctx)
 {
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2703]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2703\n");
+      else
+        fprintf(stderr, "reached bug index 2703\n");
+    }
+    if ((!FIXREVERTER[2703] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     ctxt->serror = serror;
     ctxt->error = NULL;
     ctxt->warning = NULL;
@@ -28363,8 +35625,23 @@ static void
 charactersSplit(void *ctx, const xmlChar *ch, int len)
 {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2718]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2718\n");
+      else
+        fprintf(stderr, "reached bug index 2718\n");
+    }
+    if ((!FIXREVERTER[2718] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) && (ctxt->user_sax->characters != NULL))
 	ctxt->user_sax->characters(ctxt->user_data, ch, len);
     if (ctxt->ctxt != NULL)
@@ -28375,8 +35652,23 @@ static void
 ignorableWhitespaceSplit(void *ctx, const xmlChar *ch, int len)
 {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2719]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2719\n");
+      else
+        fprintf(stderr, "reached bug index 2719\n");
+    }
+    if ((!FIXREVERTER[2719] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) &&
         (ctxt->user_sax->ignorableWhitespace != NULL))
 	ctxt->user_sax->ignorableWhitespace(ctxt->user_data, ch, len);
@@ -28388,8 +35680,23 @@ static void
 cdataBlockSplit(void *ctx, const xmlChar *value, int len)
 {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2720]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2720\n");
+      else
+        fprintf(stderr, "reached bug index 2720\n");
+    }
+    if ((!FIXREVERTER[2720] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) &&
         (ctxt->user_sax->cdataBlock != NULL))
 	ctxt->user_sax->cdataBlock(ctxt->user_data, value, len);
@@ -28401,8 +35708,23 @@ static void
 referenceSplit(void *ctx, const xmlChar *name)
 {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2721]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2721\n");
+      else
+        fprintf(stderr, "reached bug index 2721\n");
+    }
+    if ((!FIXREVERTER[2721] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt != NULL) && (ctxt->user_sax != NULL) &&
         (ctxt->user_sax->reference != NULL))
 	ctxt->user_sax->reference(ctxt->user_data, name);
@@ -28417,8 +35739,23 @@ startElementNsSplit(void *ctx, const xmlChar * localname,
 		    int nb_attributes, int nb_defaulted,
 		    const xmlChar ** attributes) {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2722]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2722\n");
+      else
+        fprintf(stderr, "reached bug index 2722\n");
+    }
+    if ((!FIXREVERTER[2722] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) &&
         (ctxt->user_sax->startElementNs != NULL))
 	ctxt->user_sax->startElementNs(ctxt->user_data, localname, prefix,
@@ -28436,8 +35773,23 @@ static void
 endElementNsSplit(void *ctx, const xmlChar * localname,
 		    const xmlChar * prefix, const xmlChar * URI) {
     xmlSchemaSAXPlugPtr ctxt = (xmlSchemaSAXPlugPtr) ctx;
-    if (ctxt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[2723]) {
+      if ((ctxt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 2723\n");
+      else
+        fprintf(stderr, "reached bug index 2723\n");
+    }
+    if ((!FIXREVERTER[2723] && (ctxt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return;
+        #ifdef FRCOV
+        }
+        #endif
     if ((ctxt->user_sax != NULL) &&
         (ctxt->user_sax->endElementNs != NULL))
 	ctxt->user_sax->endElementNs(ctxt->user_data, localname, prefix, URI);
diff --git a/xmlschemastypes.c b/xmlschemastypes.c
index 5c6db292..816200a6 100644
--- a/xmlschemastypes.c
+++ b/xmlschemastypes.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * schemastypes.c : implementation of the XML Schema Datatypes
  *             definition and validity checking
@@ -216,9 +220,24 @@ xmlSchemaNewValue(xmlSchemaValType type) {
     xmlSchemaValPtr value;
 
     value = (xmlSchemaValPtr) xmlMalloc(sizeof(xmlSchemaVal));
-    if (value == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[646]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 646\n");
+      else
+        fprintf(stderr, "reached bug index 646\n");
+    }
+    if ((!FIXREVERTER[646] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(value, 0, sizeof(xmlSchemaVal));
     value->type = type;
     return(value);
@@ -232,23 +251,68 @@ xmlSchemaNewMinLengthFacet(int value)
     xmlSchemaValDecimal *decimal;
 
     ret = xmlSchemaNewFacet();
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[647]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 647\n");
+      else
+        fprintf(stderr, "reached bug index 647\n");
+    }
+    if ((!FIXREVERTER[647] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     ret->type = XML_SCHEMA_FACET_MINLENGTH;
     ret->val = xmlSchemaNewValue(XML_SCHEMAS_NNINTEGER);
-    if (ret->val == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[648]) {
+      if ((ret -> val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 648\n");
+      else
+        fprintf(stderr, "reached bug index 648\n");
+    }
+    if ((!FIXREVERTER[648] && (ret -> val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(ret);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     bufsize = snprintf(NULL, 0, "%+d.0", value) + 1;
     decimal = &ret->val->value.decimal;
     decimal->str = xmlMalloc(bufsize);
-    if (decimal->str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[649]) {
+      if ((decimal -> str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 649\n");
+      else
+        fprintf(stderr, "reached bug index 649\n");
+    }
+    if ((!FIXREVERTER[649] && (decimal -> str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
     {
         xmlSchemaFreeFacet(ret);
         return NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
     snprintf((char *)decimal->str, bufsize, "%+d.0", value);
     decimal->integralPlaces = bufsize - 4;
     decimal->fractionalPlaces = 1;
@@ -268,10 +332,25 @@ xmlSchemaInitBasicType(const char *name, xmlSchemaValType type,
     xmlSchemaTypePtr ret;
 
     ret = (xmlSchemaTypePtr) xmlMalloc(sizeof(xmlSchemaType));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[650]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 650\n");
+      else
+        fprintf(stderr, "reached bug index 650\n");
+    }
+    if ((!FIXREVERTER[650] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaTypeErrMemory();
 	return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaType));
     ret->name = (const xmlChar *)name;
     ret->targetNamespace = XML_SCHEMAS_NAMESPACE_NAME;
@@ -388,10 +467,25 @@ static int xmlSchemaValDecimalCompare(const xmlSchemaValDecimal *lhs, const xmlS
         sign = -1;
     }
     /* internal representation never contains leading zeroes, longer decimal representation = larger number */
-    if(lhs->integralPlaces != rhs->integralPlaces)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[652]) {
+      if ((lhs -> integralPlaces != rhs -> integralPlaces ) && !(0))
+        fprintf(stderr, "triggered bug index 652\n");
+      else
+        fprintf(stderr, "reached bug index 652\n");
+    }
+    if ((!FIXREVERTER[652] && (lhs -> integralPlaces != rhs -> integralPlaces ))
+    #else
+    if (0
+    #endif
+    )
     {
         return ((int)lhs->integralPlaces-(int)rhs->integralPlaces)*sign;
     }
+    #ifdef FRCOV
+    }
+    #endif
     /* same length, only digits => lexicographical sorting == numerical sorting.
        If integral parts are equal it will compare compare fractional parts. Again, lexicographical is good enough,
        length doesn't matter. We'll be starting from 0.1, always comparing like to like, and NULL < '0'
@@ -460,10 +554,25 @@ xmlSchemaAddParticle(void)
 
     ret = (xmlSchemaParticlePtr)
 	xmlMalloc(sizeof(xmlSchemaParticle));
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[653]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 653\n");
+      else
+        fprintf(stderr, "reached bug index 653\n");
+    }
+    if ((!FIXREVERTER[653] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlSchemaTypeErrMemory();
 	return (NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memset(ret, 0, sizeof(xmlSchemaParticle));
     ret->type = XML_SCHEMA_TYPE_PARTICLE;
     ret->minOccurs = 1;
@@ -533,8 +642,23 @@ xmlSchemaInitTypes(void)
     xmlSchemaTypeAnyTypeDef = xmlSchemaInitBasicType("anyType",
                                                      XML_SCHEMAS_ANYTYPE,
 						     NULL);
-    if (xmlSchemaTypeAnyTypeDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[656]) {
+      if ((xmlSchemaTypeAnyTypeDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 656\n");
+      else
+        fprintf(stderr, "reached bug index 656\n");
+    }
+    if ((!FIXREVERTER[656] && (xmlSchemaTypeAnyTypeDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeAnyTypeDef->baseType = xmlSchemaTypeAnyTypeDef;
     xmlSchemaTypeAnyTypeDef->contentType = XML_SCHEMA_CONTENT_MIXED;
     /*
@@ -547,32 +671,92 @@ xmlSchemaInitTypes(void)
 	xmlSchemaWildcardPtr wild;
 	/* First particle. */
 	particle = xmlSchemaAddParticle();
-	if (particle == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[657]) {
+	  if ((particle == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 657\n");
+	  else
+	    fprintf(stderr, "reached bug index 657\n");
+	}
+	if ((!FIXREVERTER[657] && (particle == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	xmlSchemaTypeAnyTypeDef->subtypes = (xmlSchemaTypePtr) particle;
 	/* Sequence model group. */
 	sequence = (xmlSchemaModelGroupPtr)
 	    xmlMalloc(sizeof(xmlSchemaModelGroup));
-	if (sequence == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[658]) {
+	  if ((sequence == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 658\n");
+	  else
+	    fprintf(stderr, "reached bug index 658\n");
+	}
+	if ((!FIXREVERTER[658] && (sequence == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaTypeErrMemory();
 	    goto error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(sequence, 0, sizeof(xmlSchemaModelGroup));
 	sequence->type = XML_SCHEMA_TYPE_SEQUENCE;
 	particle->children = (xmlSchemaTreeItemPtr) sequence;
 	/* Second particle. */
 	particle = xmlSchemaAddParticle();
-	if (particle == NULL)
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[659]) {
+	  if ((particle == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 659\n");
+	  else
+	    fprintf(stderr, "reached bug index 659\n");
+	}
+	if ((!FIXREVERTER[659] && (particle == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	)
 	    goto error;
+	    #ifdef FRCOV
+	    }
+	    #endif
 	particle->minOccurs = 0;
 	particle->maxOccurs = UNBOUNDED;
 	sequence->children = (xmlSchemaTreeItemPtr) particle;
 	/* The wildcard */
 	wild = (xmlSchemaWildcardPtr) xmlMalloc(sizeof(xmlSchemaWildcard));
-	if (wild == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[660]) {
+	  if ((wild == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 660\n");
+	  else
+	    fprintf(stderr, "reached bug index 660\n");
+	}
+	if ((!FIXREVERTER[660] && (wild == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaTypeErrMemory();
 	    goto error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(wild, 0, sizeof(xmlSchemaWildcard));
 	wild->type = XML_SCHEMA_TYPE_ANY;
 	wild->any = 1;
@@ -582,10 +766,25 @@ xmlSchemaInitTypes(void)
 	* Create the attribute wildcard.
 	*/
 	wild = (xmlSchemaWildcardPtr) xmlMalloc(sizeof(xmlSchemaWildcard));
-	if (wild == NULL) {
+	
+	#ifdef FRCOV
+	{if (FIXREVERTER[661]) {
+	  if ((wild == (void *) 0 ) && !(0))
+	    fprintf(stderr, "triggered bug index 661\n");
+	  else
+	    fprintf(stderr, "reached bug index 661\n");
+	}
+	if ((!FIXREVERTER[661] && (wild == (void *) 0 ))
+	#else
+	if (0
+	#endif
+	) {
 	    xmlSchemaTypeErrMemory();
 	    goto error;
 	}
+	#ifdef FRCOV
+	}
+	#endif
 	memset(wild, 0, sizeof(xmlSchemaWildcard));
 	wild->any = 1;
 	wild->processContents = XML_SCHEMAS_ANY_LAX;
@@ -594,21 +793,66 @@ xmlSchemaInitTypes(void)
     xmlSchemaTypeAnySimpleTypeDef = xmlSchemaInitBasicType("anySimpleType",
                                                            XML_SCHEMAS_ANYSIMPLETYPE,
 							   xmlSchemaTypeAnyTypeDef);
-    if (xmlSchemaTypeAnySimpleTypeDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[662]) {
+      if ((xmlSchemaTypeAnySimpleTypeDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 662\n");
+      else
+        fprintf(stderr, "reached bug index 662\n");
+    }
+    if ((!FIXREVERTER[662] && (xmlSchemaTypeAnySimpleTypeDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * primitive datatypes
     */
     xmlSchemaTypeStringDef = xmlSchemaInitBasicType("string",
                                                     XML_SCHEMAS_STRING,
 						    xmlSchemaTypeAnySimpleTypeDef);
-    if (xmlSchemaTypeStringDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[663]) {
+      if ((xmlSchemaTypeStringDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 663\n");
+      else
+        fprintf(stderr, "reached bug index 663\n");
+    }
+    if ((!FIXREVERTER[663] && (xmlSchemaTypeStringDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeDecimalDef = xmlSchemaInitBasicType("decimal",
                                                      XML_SCHEMAS_DECIMAL,
 						     xmlSchemaTypeAnySimpleTypeDef);
-    if (xmlSchemaTypeDecimalDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[664]) {
+      if ((xmlSchemaTypeDecimalDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 664\n");
+      else
+        fprintf(stderr, "reached bug index 664\n");
+    }
+    if ((!FIXREVERTER[664] && (xmlSchemaTypeDecimalDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeDateDef = xmlSchemaInitBasicType("date",
                                                   XML_SCHEMAS_DATE,
 						  xmlSchemaTypeAnySimpleTypeDef);
@@ -701,14 +945,44 @@ xmlSchemaInitTypes(void)
     xmlSchemaTypeIntegerDef = xmlSchemaInitBasicType("integer",
                                                      XML_SCHEMAS_INTEGER,
 						     xmlSchemaTypeDecimalDef);
-    if (xmlSchemaTypeIntegerDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[682]) {
+      if ((xmlSchemaTypeIntegerDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 682\n");
+      else
+        fprintf(stderr, "reached bug index 682\n");
+    }
+    if ((!FIXREVERTER[682] && (xmlSchemaTypeIntegerDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeNonPositiveIntegerDef =
         xmlSchemaInitBasicType("nonPositiveInteger",
                                XML_SCHEMAS_NPINTEGER,
 			       xmlSchemaTypeIntegerDef);
-    if (xmlSchemaTypeNonPositiveIntegerDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[683]) {
+      if ((xmlSchemaTypeNonPositiveIntegerDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 683\n");
+      else
+        fprintf(stderr, "reached bug index 683\n");
+    }
+    if ((!FIXREVERTER[683] && (xmlSchemaTypeNonPositiveIntegerDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeNegativeIntegerDef =
         xmlSchemaInitBasicType("negativeInteger", XML_SCHEMAS_NINTEGER,
 	xmlSchemaTypeNonPositiveIntegerDef);
@@ -717,17 +991,62 @@ xmlSchemaInitTypes(void)
     xmlSchemaTypeLongDef =
         xmlSchemaInitBasicType("long", XML_SCHEMAS_LONG,
 	xmlSchemaTypeIntegerDef);
-    if (xmlSchemaTypeLongDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[685]) {
+      if ((xmlSchemaTypeLongDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 685\n");
+      else
+        fprintf(stderr, "reached bug index 685\n");
+    }
+    if ((!FIXREVERTER[685] && (xmlSchemaTypeLongDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeIntDef = xmlSchemaInitBasicType("int", XML_SCHEMAS_INT,
 	xmlSchemaTypeLongDef);
-    if (xmlSchemaTypeIntDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[686]) {
+      if ((xmlSchemaTypeIntDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 686\n");
+      else
+        fprintf(stderr, "reached bug index 686\n");
+    }
+    if ((!FIXREVERTER[686] && (xmlSchemaTypeIntDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeShortDef = xmlSchemaInitBasicType("short",
                                                    XML_SCHEMAS_SHORT,
 						   xmlSchemaTypeIntDef);
-    if (xmlSchemaTypeShortDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[687]) {
+      if ((xmlSchemaTypeShortDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 687\n");
+      else
+        fprintf(stderr, "reached bug index 687\n");
+    }
+    if ((!FIXREVERTER[687] && (xmlSchemaTypeShortDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeByteDef = xmlSchemaInitBasicType("byte",
                                                   XML_SCHEMAS_BYTE,
 						  xmlSchemaTypeShortDef);
@@ -737,23 +1056,83 @@ xmlSchemaInitTypes(void)
         xmlSchemaInitBasicType("nonNegativeInteger",
                                XML_SCHEMAS_NNINTEGER,
 			       xmlSchemaTypeIntegerDef);
-    if (xmlSchemaTypeNonNegativeIntegerDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[689]) {
+      if ((xmlSchemaTypeNonNegativeIntegerDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 689\n");
+      else
+        fprintf(stderr, "reached bug index 689\n");
+    }
+    if ((!FIXREVERTER[689] && (xmlSchemaTypeNonNegativeIntegerDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeUnsignedLongDef =
         xmlSchemaInitBasicType("unsignedLong", XML_SCHEMAS_ULONG,
 	xmlSchemaTypeNonNegativeIntegerDef);
-    if (xmlSchemaTypeUnsignedLongDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[690]) {
+      if ((xmlSchemaTypeUnsignedLongDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 690\n");
+      else
+        fprintf(stderr, "reached bug index 690\n");
+    }
+    if ((!FIXREVERTER[690] && (xmlSchemaTypeUnsignedLongDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeUnsignedIntDef =
         xmlSchemaInitBasicType("unsignedInt", XML_SCHEMAS_UINT,
 	xmlSchemaTypeUnsignedLongDef);
-    if (xmlSchemaTypeUnsignedIntDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[691]) {
+      if ((xmlSchemaTypeUnsignedIntDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 691\n");
+      else
+        fprintf(stderr, "reached bug index 691\n");
+    }
+    if ((!FIXREVERTER[691] && (xmlSchemaTypeUnsignedIntDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeUnsignedShortDef =
         xmlSchemaInitBasicType("unsignedShort", XML_SCHEMAS_USHORT,
 	xmlSchemaTypeUnsignedIntDef);
-    if (xmlSchemaTypeUnsignedShortDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[692]) {
+      if ((xmlSchemaTypeUnsignedShortDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 692\n");
+      else
+        fprintf(stderr, "reached bug index 692\n");
+    }
+    if ((!FIXREVERTER[692] && (xmlSchemaTypeUnsignedShortDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeUnsignedByteDef =
         xmlSchemaInitBasicType("unsignedByte", XML_SCHEMAS_UBYTE,
 	xmlSchemaTypeUnsignedShortDef);
@@ -767,13 +1146,43 @@ xmlSchemaInitTypes(void)
     xmlSchemaTypeNormStringDef = xmlSchemaInitBasicType("normalizedString",
                                                         XML_SCHEMAS_NORMSTRING,
 							xmlSchemaTypeStringDef);
-    if (xmlSchemaTypeNormStringDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[695]) {
+      if ((xmlSchemaTypeNormStringDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 695\n");
+      else
+        fprintf(stderr, "reached bug index 695\n");
+    }
+    if ((!FIXREVERTER[695] && (xmlSchemaTypeNormStringDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeTokenDef = xmlSchemaInitBasicType("token",
                                                    XML_SCHEMAS_TOKEN,
 						   xmlSchemaTypeNormStringDef);
-    if (xmlSchemaTypeTokenDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[696]) {
+      if ((xmlSchemaTypeTokenDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 696\n");
+      else
+        fprintf(stderr, "reached bug index 696\n");
+    }
+    if ((!FIXREVERTER[696] && (xmlSchemaTypeTokenDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeLanguageDef = xmlSchemaInitBasicType("language",
                                                       XML_SCHEMAS_LANGUAGE,
 						      xmlSchemaTypeTokenDef);
@@ -782,18 +1191,63 @@ xmlSchemaInitTypes(void)
     xmlSchemaTypeNameDef = xmlSchemaInitBasicType("Name",
                                                   XML_SCHEMAS_NAME,
 						  xmlSchemaTypeTokenDef);
-    if (xmlSchemaTypeNameDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[698]) {
+      if ((xmlSchemaTypeNameDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 698\n");
+      else
+        fprintf(stderr, "reached bug index 698\n");
+    }
+    if ((!FIXREVERTER[698] && (xmlSchemaTypeNameDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeNmtokenDef = xmlSchemaInitBasicType("NMTOKEN",
                                                      XML_SCHEMAS_NMTOKEN,
 						     xmlSchemaTypeTokenDef);
-    if (xmlSchemaTypeNmtokenDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[699]) {
+      if ((xmlSchemaTypeNmtokenDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 699\n");
+      else
+        fprintf(stderr, "reached bug index 699\n");
+    }
+    if ((!FIXREVERTER[699] && (xmlSchemaTypeNmtokenDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeNCNameDef = xmlSchemaInitBasicType("NCName",
                                                     XML_SCHEMAS_NCNAME,
 						    xmlSchemaTypeNameDef);
-    if (xmlSchemaTypeNCNameDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[700]) {
+      if ((xmlSchemaTypeNCNameDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 700\n");
+      else
+        fprintf(stderr, "reached bug index 700\n");
+    }
+    if ((!FIXREVERTER[700] && (xmlSchemaTypeNCNameDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeIdDef = xmlSchemaInitBasicType("ID", XML_SCHEMAS_ID,
 						    xmlSchemaTypeNCNameDef);
     if (xmlSchemaTypeIdDef == NULL)
@@ -801,13 +1255,43 @@ xmlSchemaInitTypes(void)
     xmlSchemaTypeIdrefDef = xmlSchemaInitBasicType("IDREF",
                                                    XML_SCHEMAS_IDREF,
 						   xmlSchemaTypeNCNameDef);
-    if (xmlSchemaTypeIdrefDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[702]) {
+      if ((xmlSchemaTypeIdrefDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 702\n");
+      else
+        fprintf(stderr, "reached bug index 702\n");
+    }
+    if ((!FIXREVERTER[702] && (xmlSchemaTypeIdrefDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeEntityDef = xmlSchemaInitBasicType("ENTITY",
                                                     XML_SCHEMAS_ENTITY,
 						    xmlSchemaTypeNCNameDef);
-    if (xmlSchemaTypeEntityDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[703]) {
+      if ((xmlSchemaTypeEntityDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 703\n");
+      else
+        fprintf(stderr, "reached bug index 703\n");
+    }
+    if ((!FIXREVERTER[703] && (xmlSchemaTypeEntityDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * Derived list types.
     */
@@ -815,23 +1299,68 @@ xmlSchemaInitTypes(void)
     xmlSchemaTypeEntitiesDef = xmlSchemaInitBasicType("ENTITIES",
                                                       XML_SCHEMAS_ENTITIES,
 						      xmlSchemaTypeAnySimpleTypeDef);
-    if (xmlSchemaTypeEntitiesDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[704]) {
+      if ((xmlSchemaTypeEntitiesDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 704\n");
+      else
+        fprintf(stderr, "reached bug index 704\n");
+    }
+    if ((!FIXREVERTER[704] && (xmlSchemaTypeEntitiesDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeEntitiesDef->subtypes = xmlSchemaTypeEntityDef;
     /* IDREFS */
     xmlSchemaTypeIdrefsDef = xmlSchemaInitBasicType("IDREFS",
                                                     XML_SCHEMAS_IDREFS,
 						    xmlSchemaTypeAnySimpleTypeDef);
-    if (xmlSchemaTypeIdrefsDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[705]) {
+      if ((xmlSchemaTypeIdrefsDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 705\n");
+      else
+        fprintf(stderr, "reached bug index 705\n");
+    }
+    if ((!FIXREVERTER[705] && (xmlSchemaTypeIdrefsDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeIdrefsDef->subtypes = xmlSchemaTypeIdrefDef;
 
     /* NMTOKENS */
     xmlSchemaTypeNmtokensDef = xmlSchemaInitBasicType("NMTOKENS",
                                                       XML_SCHEMAS_NMTOKENS,
 						      xmlSchemaTypeAnySimpleTypeDef);
-    if (xmlSchemaTypeNmtokensDef == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[706]) {
+      if ((xmlSchemaTypeNmtokensDef == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 706\n");
+      else
+        fprintf(stderr, "reached bug index 706\n");
+    }
+    if ((!FIXREVERTER[706] && (xmlSchemaTypeNmtokensDef == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
     xmlSchemaTypeNmtokensDef->subtypes = xmlSchemaTypeNmtokenDef;
 
     xmlSchemaTypesInitialized = 1;
@@ -874,8 +1403,23 @@ xmlSchemaCleanupTypes(void) {
 int
 xmlSchemaIsBuiltInTypeFacet(xmlSchemaTypePtr type, int facetType)
 {
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[707]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 707\n");
+      else
+        fprintf(stderr, "reached bug index 707\n");
+    }
+    if ((!FIXREVERTER[707] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     if (type->type != XML_SCHEMA_TYPE_BASIC)
 	return (-1);
     switch (type->builtInType) {
@@ -1066,8 +1610,23 @@ xmlSchemaGetBuiltInType(xmlSchemaValType type)
 int
 xmlSchemaValueAppend(xmlSchemaValPtr prev, xmlSchemaValPtr cur) {
 
-    if ((prev == NULL) || (cur == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[708]) {
+      if ((prev == (void *) 0 || cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 708\n");
+      else
+        fprintf(stderr, "reached bug index 708\n");
+    }
+    if ((!FIXREVERTER[708] && (prev == (void *) 0 || cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     prev->next = cur;
     return (0);
 }
@@ -1084,8 +1643,23 @@ xmlSchemaValueAppend(xmlSchemaValPtr prev, xmlSchemaValPtr cur) {
 xmlSchemaValPtr
 xmlSchemaValueGetNext(xmlSchemaValPtr cur) {
 
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[709]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 709\n");
+      else
+        fprintf(stderr, "reached bug index 709\n");
+    }
+    if ((!FIXREVERTER[709] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return (cur->next);
 }
 
@@ -1101,8 +1675,23 @@ xmlSchemaValueGetNext(xmlSchemaValPtr cur) {
 const xmlChar *
 xmlSchemaValueGetAsString(xmlSchemaValPtr val)
 {
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[710]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 710\n");
+      else
+        fprintf(stderr, "reached bug index 710\n");
+    }
+    if ((!FIXREVERTER[710] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
     switch (val->type) {
 	case XML_SCHEMAS_STRING:
 	case XML_SCHEMAS_NORMSTRING:
@@ -1187,8 +1776,23 @@ xmlSchemaNewNOTATIONValue(const xmlChar *name,
     xmlSchemaValPtr val;
 
     val = xmlSchemaNewValue(XML_SCHEMAS_NOTATION);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[712]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 712\n");
+      else
+        fprintf(stderr, "reached bug index 712\n");
+    }
+    if ((!FIXREVERTER[712] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     val->value.qname.name = (xmlChar *)name;
     if (ns != NULL)
@@ -1213,8 +1817,23 @@ xmlSchemaNewQNameValue(const xmlChar *namespaceName,
     xmlSchemaValPtr val;
 
     val = xmlSchemaNewValue(XML_SCHEMAS_QNAME);
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[713]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 713\n");
+      else
+        fprintf(stderr, "reached bug index 713\n");
+    }
+    if ((!FIXREVERTER[713] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     val->value.qname.name = (xmlChar *) localName;
     val->value.qname.uri = (xmlChar *) namespaceName;
@@ -1306,8 +1925,23 @@ xmlSchemaGetPredefinedType(const xmlChar *name, const xmlChar *ns) {
     if ((xmlSchemaTypesInitialized == 0) &&
 	(xmlSchemaInitTypes() < 0))
         return (NULL);
-    if (name == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[714]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 714\n");
+      else
+        fprintf(stderr, "reached bug index 714\n");
+    }
+    if ((!FIXREVERTER[714] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
     return((xmlSchemaTypePtr) xmlHashLookup2(xmlSchemaTypesBank, name, ns));
 }
 
@@ -1432,11 +2066,41 @@ _xmlSchemaParseGYear (xmlSchemaValDatePtr dt, const xmlChar **str) {
     while ((*cur >= '0') && (*cur <= '9')) {
         int digit = *cur - '0';
 
-        if (dt->year > LONG_MAX / 10)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[715]) {
+          if ((dt -> year > 9223372036854775807 / 10 ) && !(0))
+            fprintf(stderr, "triggered bug index 715\n");
+          else
+            fprintf(stderr, "reached bug index 715\n");
+        }
+        if ((!FIXREVERTER[715] && (dt -> year > 9223372036854775807 / 10 ))
+        #else
+        if (0
+        #endif
+        )
             return 2;
+            #ifdef FRCOV
+            }
+            #endif
 	dt->year *= 10;
-        if (dt->year > LONG_MAX - digit)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[716]) {
+          if ((dt -> year > 9223372036854775807 - digit ) && !(0))
+            fprintf(stderr, "triggered bug index 716\n");
+          else
+            fprintf(stderr, "reached bug index 716\n");
+        }
+        if ((!FIXREVERTER[716] && (dt -> year > 9223372036854775807 - digit ))
+        #else
+        if (0
+        #endif
+        )
             return 2;
+            #ifdef FRCOV
+            }
+            #endif
         dt->year += digit;
 	cur++;
 	digcnt++;
@@ -1629,8 +2293,23 @@ _xmlSchemaParseTimeZone (xmlSchemaValDatePtr dt, const xmlChar **str) {
     const xmlChar *cur;
     int ret = 0;
 
-    if (str == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[722]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 722\n");
+      else
+        fprintf(stderr, "reached bug index 722\n");
+    }
+    if ((!FIXREVERTER[722] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
     cur = *str;
 
     switch (*cur) {
@@ -1794,8 +2473,23 @@ xmlSchemaValidateDates (xmlSchemaValType type,
 	}							\
     }
 
-    if (dateTime == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[725]) {
+      if ((dateTime == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 725\n");
+      else
+        fprintf(stderr, "reached bug index 725\n");
+    }
+    if ((!FIXREVERTER[725] && (dateTime == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (collapse)
 	while IS_WSP_BLANK_CH(*cur) cur++;
@@ -1804,8 +2498,23 @@ xmlSchemaValidateDates (xmlSchemaValType type,
 	return 1;
 
     dt = xmlSchemaNewValue(XML_SCHEMAS_UNKNOWN);
-    if (dt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[726]) {
+      if ((dt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 726\n");
+      else
+        fprintf(stderr, "reached bug index 726\n");
+    }
+    if ((!FIXREVERTER[726] && (dt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
 
     if ((cur[0] == '-') && (cur[1] == '-')) {
 	/*
@@ -2009,8 +2718,23 @@ xmlSchemaValidateDuration (xmlSchemaTypePtr type ATTRIBUTE_UNUSED,
     long days, secs = 0;
     double sec_frac = 0.0;
 
-    if (duration == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[732]) {
+      if ((duration == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 732\n");
+      else
+        fprintf(stderr, "reached bug index 732\n");
+    }
+    if ((!FIXREVERTER[732] && (duration == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
 
     if (collapse)
 	while IS_WSP_BLANK_CH(*cur) cur++;
@@ -2028,8 +2752,23 @@ xmlSchemaValidateDuration (xmlSchemaTypePtr type ATTRIBUTE_UNUSED,
 	return 1;
 
     dur = xmlSchemaNewValue(XML_SCHEMAS_DURATION);
-    if (dur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[733]) {
+      if ((dur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 733\n");
+      else
+        fprintf(stderr, "reached bug index 733\n");
+    }
+    if ((!FIXREVERTER[733] && (dur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return -1;
+	#ifdef FRCOV
+	}
+	#endif
 
     while (*cur != 0) {
         long           num = 0;
@@ -2043,22 +2782,82 @@ xmlSchemaValidateDuration (xmlSchemaTypePtr type ATTRIBUTE_UNUSED,
 
         /* T designator must be present for time items */
         if (*cur == 'T') {
-            if (seq > 3)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[734]) {
+              if ((seq > 3 ) && !(0))
+                fprintf(stderr, "triggered bug index 734\n");
+              else
+                fprintf(stderr, "reached bug index 734\n");
+            }
+            if ((!FIXREVERTER[734] && (seq > 3 ))
+            #else
+            if (0
+            #endif
+            )
                 goto error;
+                #ifdef FRCOV
+                }
+                #endif
             cur++;
             seq = 3;
-        } else if (seq == 3)
+        } else 
+        #ifdef FRCOV
+        {if (FIXREVERTER[735]) {
+          if ((seq == 3 ) && !(0))
+            fprintf(stderr, "triggered bug index 735\n");
+          else
+            fprintf(stderr, "reached bug index 735\n");
+        }
+        if ((!FIXREVERTER[735] && (seq == 3 ))
+        #else
+        if (0
+        #endif
+        )
             goto error;
+            #ifdef FRCOV
+            }
+            #endif
 
         /* Parse integral part. */
         while (*cur >= '0' && *cur <= '9') {
             long digit = *cur - '0';
 
-            if (num > LONG_MAX / 10)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[736]) {
+              if ((num > 9223372036854775807 / 10 ) && !(0))
+                fprintf(stderr, "triggered bug index 736\n");
+              else
+                fprintf(stderr, "reached bug index 736\n");
+            }
+            if ((!FIXREVERTER[736] && (num > 9223372036854775807 / 10 ))
+            #else
+            if (0
+            #endif
+            )
                 goto error;
+                #ifdef FRCOV
+                }
+                #endif
             num *= 10;
-            if (num > LONG_MAX - digit)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[737]) {
+              if ((num > 9223372036854775807 - digit ) && !(0))
+                fprintf(stderr, "triggered bug index 737\n");
+              else
+                fprintf(stderr, "reached bug index 737\n");
+            }
+            if ((!FIXREVERTER[737] && (num > 9223372036854775807 - digit ))
+            #else
+            if (0
+            #endif
+            )
                 goto error;
+                #ifdef FRCOV
+                }
+                #endif
             num += digit;
 
             has_digits = 1;
@@ -2092,8 +2891,23 @@ xmlSchemaValidateDuration (xmlSchemaTypePtr type ATTRIBUTE_UNUSED,
         switch (seq) {
             case 0:
                 /* Year */
-                if (num > LONG_MAX / 12)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[738]) {
+                  if ((num > 9223372036854775807 / 12 ) && !(0))
+                    fprintf(stderr, "triggered bug index 738\n");
+                  else
+                    fprintf(stderr, "reached bug index 738\n");
+                }
+                if ((!FIXREVERTER[738] && (num > 9223372036854775807 / 12 ))
+                #else
+                if (0
+                #endif
+                )
                     goto error;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 dur->value.dur.mon = num * 12;
                 break;
             case 1:
@@ -2172,7 +2986,22 @@ static xmlChar *
 xmlSchemaStrip(const xmlChar *value) {
     const xmlChar *start = value, *end, *f;
 
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[739]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 739\n");
+      else
+        fprintf(stderr, "reached bug index 739\n");
+    }
+    if ((!FIXREVERTER[739] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while ((*start != 0) && (IS_BLANK_CH(*start))) start++;
     end = start;
     while (*end != 0) end++;
@@ -2197,8 +3026,23 @@ xmlSchemaWhiteSpaceReplace(const xmlChar *value) {
     const xmlChar *cur = value;
     xmlChar *ret = NULL, *mcur;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[740]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 740\n");
+      else
+        fprintf(stderr, "reached bug index 740\n");
+    }
+    if ((!FIXREVERTER[740] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
+	#ifdef FRCOV
+	}
+	#endif
 
     while ((*cur != 0) &&
 	(((*cur) != 0xd) && ((*cur) != 0x9) && ((*cur) != 0xa))) {
@@ -2231,7 +3075,22 @@ xmlSchemaCollapseString(const xmlChar *value) {
     xmlChar *g;
     int col = 0;
 
-    if (value == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[741]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 741\n");
+      else
+        fprintf(stderr, "reached bug index 741\n");
+    }
+    if ((!FIXREVERTER[741] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while ((*start != 0) && (IS_BLANK_CH(*start))) start++;
     end = start;
     while (*end != 0) {
@@ -2253,7 +3112,22 @@ xmlSchemaCollapseString(const xmlChar *value) {
 	return(xmlStrndup(start, end - start));
     }
     start = xmlStrdup(start);
-    if (start == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[742]) {
+      if ((start == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 742\n");
+      else
+        fprintf(stderr, "reached bug index 742\n");
+    }
+    if ((!FIXREVERTER[742] && (start == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     g = (xmlChar *) (start + col);
     end = g;
     while (*end != 0) {
@@ -2289,13 +3163,43 @@ xmlSchemaValAtomicListNode(xmlSchemaTypePtr type, const xmlChar *value,
     int nb_values = 0;
     int tmp = 0;
 
-    if (value == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[743]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 743\n");
+      else
+        fprintf(stderr, "reached bug index 743\n");
+    }
+    if ((!FIXREVERTER[743] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     val = xmlStrdup(value);
-    if (val == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[744]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 744\n");
+      else
+        fprintf(stderr, "reached bug index 744\n");
+    }
+    if ((!FIXREVERTER[744] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	return(-1);
     }
+    #ifdef FRCOV
+    }
+    #endif
     if (ret != NULL) {
         *ret = NULL;
     }
@@ -2315,10 +3219,25 @@ xmlSchemaValAtomicListNode(xmlSchemaTypePtr type, const xmlChar *value,
 	    while ((*cur != 0) && (!IS_BLANK_CH(*cur))) cur++;
 	}
     }
-    if (nb_values == 0) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[745]) {
+      if ((nb_values == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 745\n");
+      else
+        fprintf(stderr, "reached bug index 745\n");
+    }
+    if ((!FIXREVERTER[745] && (nb_values == 0 ))
+    #else
+    if (0
+    #endif
+    ) {
 	xmlFree(val);
 	return(nb_values);
     }
+    #ifdef FRCOV
+    }
+    #endif
     endval = cur;
     cur = val;
     while ((*cur == 0) && (cur != endval)) cur++;
@@ -2399,8 +3318,23 @@ xmlSchemaCheckLanguageType(const xmlChar* value) {
     int first = 1, len = 0;
     const xmlChar* cur = value;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[748]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 748\n");
+      else
+        fprintf(stderr, "reached bug index 748\n");
+    }
+    if ((!FIXREVERTER[748] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (0);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (cur[0] != 0) {
         if (!( ((cur[0] >= 'a') && (cur[0] <= 'z')) || ((cur[0] >= 'A') && (cur[0] <= 'Z'))
@@ -2451,31 +3385,110 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
     if ((xmlSchemaTypesInitialized == 0) &&
 	(xmlSchemaInitTypes() < 0))
         return (-1);
-    if (type == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[751]) {
+      if ((type == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 751\n");
+      else
+        fprintf(stderr, "reached bug index 751\n");
+    }
+    if ((!FIXREVERTER[751] && (type == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     /*
      * validating a non existent text node is similar to validating
      * an empty one.
      */
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[752]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 752\n");
+      else
+        fprintf(stderr, "reached bug index 752\n");
+    }
+    if ((!FIXREVERTER[752] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         value = BAD_CAST "";
+        #ifdef FRCOV
+        }
+        #endif
 
     if (val != NULL)
         *val = NULL;
-    if ((flags == 0) && (value != NULL)) {
-
-        if ((type->builtInType != XML_SCHEMAS_STRING) &&
-	  (type->builtInType != XML_SCHEMAS_ANYTYPE) &&
-	  (type->builtInType != XML_SCHEMAS_ANYSIMPLETYPE)) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[755]) {
+      fprintf(stderr, "reached bug index 755\n");
+    }
+    if ((FIXREVERTER[755] && (flags == 0 )) || (!FIXREVERTER[755] && (flags == 0 && value != (void *) 0 ))
+    #else
+    if (flags == 0 
+    #endif
+    ) {
+      
+    #ifdef FRCOV
+      if (!(value != (void *) 0 ))
+        fprintf(stderr, "triggered bug index 755\n");
+      #endif
+    
+
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[754]) {
+          fprintf(stderr, "reached bug index 754\n");
+        }
+        if ((FIXREVERTER[754] && (type -> builtInType != XML_SCHEMAS_STRING && type -> builtInType != XML_SCHEMAS_ANYTYPE )) || (!FIXREVERTER[754] && (type -> builtInType != XML_SCHEMAS_STRING && type -> builtInType != XML_SCHEMAS_ANYTYPE && type -> builtInType != XML_SCHEMAS_ANYSIMPLETYPE ))
+        #else
+        if (type -> builtInType != XML_SCHEMAS_STRING && type -> builtInType != XML_SCHEMAS_ANYTYPE 
+        #endif
+        ) {
+	    
+	  #ifdef FRCOV
+	    if (!(type -> builtInType != XML_SCHEMAS_ANYSIMPLETYPE ))
+	      fprintf(stderr, "triggered bug index 754\n");
+	    #endif
+	  
 	    if (type->builtInType == XML_SCHEMAS_NORMSTRING)
 		norm = xmlSchemaWhiteSpaceReplace(value);
             else
 		norm = xmlSchemaCollapseString(value);
-            if (norm != NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[753]) {
+              if ((norm != (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 753\n");
+              else
+                fprintf(stderr, "reached bug index 753\n");
+            }
+            if ((!FIXREVERTER[753] && (norm != (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 value = norm;
+                #ifdef FRCOV
+                }
+                #endif
         }
+        #ifdef FRCOV
+        }
+        #endif
+    }
+    #ifdef FRCOV
     }
+    #endif
 
     switch (type->builtInType) {
         case XML_SCHEMAS_UNKNOWN:
@@ -2524,8 +3537,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 			norm = xmlSchemaCollapseString(value);
 		    else if (ws == XML_SCHEMA_WHITESPACE_REPLACE)
 			norm = xmlSchemaWhiteSpaceReplace(value);
-		    if (norm != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[756]) {
+		      if ((norm != (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 756\n");
+		      else
+		        fprintf(stderr, "reached bug index 756\n");
+		    }
+		    if ((!FIXREVERTER[756] && (norm != (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			value = norm;
+			#ifdef FRCOV
+			}
+			#endif
 		}
 		v = xmlSchemaNewValue(XML_SCHEMAS_STRING);
 		if (v != NULL) {
@@ -2543,8 +3571,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 			    norm = xmlSchemaCollapseString(value);
 			else
 			    norm = xmlSchemaWhiteSpaceReplace(value);
-			if (norm != NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[757]) {
+			  if ((norm != (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 757\n");
+			  else
+			    fprintf(stderr, "reached bug index 757\n");
+			}
+			if ((!FIXREVERTER[757] && (norm != (void *) 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    value = norm;
+			    #ifdef FRCOV
+			    }
+			    #endif
 		    }
 		} else {
 		    const xmlChar *cur = value;
@@ -2923,8 +3966,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
         case XML_SCHEMAS_LANGUAGE:
 	    if ((norm == NULL) && (normOnTheFly)) {
 		norm = xmlSchemaCollapseString(value);
-		if (norm != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[758]) {
+		  if ((norm != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 758\n");
+		  else
+		    fprintf(stderr, "reached bug index 758\n");
+		}
+		if ((!FIXREVERTER[758] && (norm != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    value = norm;
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 
             if (xmlSchemaCheckLanguageType(value) == 1) {
@@ -2964,7 +4022,22 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
             goto done;
         case XML_SCHEMAS_NAME:
             ret = xmlValidateName(value, 1);
-            if ((ret == 0) && (val != NULL) && (value != NULL)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[759]) {
+              fprintf(stderr, "reached bug index 759\n");
+            }
+            if ((FIXREVERTER[759] && (ret == 0 && val != (void *) 0 )) || (!FIXREVERTER[759] && (ret == 0 && val != (void *) 0 && value != (void *) 0 ))
+            #else
+            if (ret == 0 && val != (void *) 0 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(value != (void *) 0 ))
+                fprintf(stderr, "triggered bug index 759\n");
+              #endif
+            
 		v = xmlSchemaNewValue(XML_SCHEMAS_NAME);
 		if (v != NULL) {
 		     const xmlChar *start = value, *end;
@@ -2977,14 +4050,32 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 		    goto error;
 		}
             }
+            #ifdef FRCOV
+            }
+            #endif
             goto done;
         case XML_SCHEMAS_QNAME:{
                 const xmlChar *uri = NULL;
                 xmlChar *local = NULL;
 
                 ret = xmlValidateQName(value, 1);
-		if (ret != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[760]) {
+		  if ((ret != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 760\n");
+		  else
+		    fprintf(stderr, "reached bug index 760\n");
+		}
+		if ((!FIXREVERTER[760] && (ret != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto done;
+		    #ifdef FRCOV
+		    }
+		    #endif
                 if (node != NULL) {
                     xmlChar *prefix;
 		    xmlNsPtr ns;
@@ -2997,18 +4088,48 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 			    xmlFree(local);
 			goto return1;
 		    }
-		    if (ns != NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[761]) {
+		      if ((ns != (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 761\n");
+		      else
+		        fprintf(stderr, "reached bug index 761\n");
+		    }
+		    if ((!FIXREVERTER[761] && (ns != (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			uri = ns->href;
+			#ifdef FRCOV
+			}
+			#endif
                     if (prefix != NULL)
                         xmlFree(prefix);
                 }
                 if (val != NULL) {
                     v = xmlSchemaNewValue(XML_SCHEMAS_QNAME);
-                    if (v == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[762]) {
+                      if ((v == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 762\n");
+                      else
+                        fprintf(stderr, "reached bug index 762\n");
+                    }
+                    if ((!FIXREVERTER[762] && (v == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 			if (local != NULL)
 			    xmlFree(local);
 			goto error;
 		    }
+		    #ifdef FRCOV
+		    }
+		    #endif
 		    if (local != NULL)
 			v->value.qname.name = local;
 		    else
@@ -3023,7 +4144,22 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
             }
         case XML_SCHEMAS_NCNAME:
             ret = xmlValidateNCName(value, 1);
-            if ((ret == 0) && (val != NULL)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[763]) {
+              fprintf(stderr, "reached bug index 763\n");
+            }
+            if ((FIXREVERTER[763] && (ret == 0 )) || (!FIXREVERTER[763] && (ret == 0 && val != (void *) 0 ))
+            #else
+            if (ret == 0 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(val != (void *) 0 ))
+                fprintf(stderr, "triggered bug index 763\n");
+              #endif
+            
                 v = xmlSchemaNewValue(XML_SCHEMAS_NCNAME);
                 if (v != NULL) {
                     v->value.str = xmlStrdup(value);
@@ -3032,10 +4168,28 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                     goto error;
                 }
             }
+            #ifdef FRCOV
+            }
+            #endif
             goto done;
         case XML_SCHEMAS_ID:
             ret = xmlValidateNCName(value, 1);
-            if ((ret == 0) && (val != NULL)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[764]) {
+              fprintf(stderr, "reached bug index 764\n");
+            }
+            if ((FIXREVERTER[764] && (ret == 0 )) || (!FIXREVERTER[764] && (ret == 0 && val != (void *) 0 ))
+            #else
+            if (ret == 0 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(val != (void *) 0 ))
+                fprintf(stderr, "triggered bug index 764\n");
+              #endif
+            
                 v = xmlSchemaNewValue(XML_SCHEMAS_ID);
                 if (v != NULL) {
                     v->value.str = xmlStrdup(value);
@@ -3044,6 +4198,9 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                     goto error;
                 }
             }
+            #ifdef FRCOV
+            }
+            #endif
             if ((ret == 0) && (node != NULL) &&
                 (node->type == XML_ATTRIBUTE_NODE)) {
                 xmlAttrPtr attr = (xmlAttrPtr) node;
@@ -3071,13 +4228,46 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
             goto done;
         case XML_SCHEMAS_IDREF:
             ret = xmlValidateNCName(value, 1);
-            if ((ret == 0) && (val != NULL)) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[766]) {
+              fprintf(stderr, "reached bug index 766\n");
+            }
+            if ((FIXREVERTER[766] && (ret == 0 )) || (!FIXREVERTER[766] && (ret == 0 && val != (void *) 0 ))
+            #else
+            if (ret == 0 
+            #endif
+            ) {
+              
+            #ifdef FRCOV
+              if (!(val != (void *) 0 ))
+                fprintf(stderr, "triggered bug index 766\n");
+              #endif
+            
 		v = xmlSchemaNewValue(XML_SCHEMAS_IDREF);
-		if (v == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[765]) {
+		  if ((v == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 765\n");
+		  else
+		    fprintf(stderr, "reached bug index 765\n");
+		}
+		if ((!FIXREVERTER[765] && (v == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    goto error;
+		    #ifdef FRCOV
+		    }
+		    #endif
 		v->value.str = xmlStrdup(value);
 		*val = v;
             }
+            #ifdef FRCOV
+            }
+            #endif
             if ((ret == 0) && (node != NULL) &&
                 (node->type == XML_ATTRIBUTE_NODE)) {
                 xmlAttrPtr attr = (xmlAttrPtr) node;
@@ -3139,8 +4329,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 goto done;
             }
         case XML_SCHEMAS_ENTITIES:
-            if ((node == NULL) || (node->doc == NULL))
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[767]) {
+              if ((node == (void *) 0 || node -> doc == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 767\n");
+              else
+                fprintf(stderr, "reached bug index 767\n");
+            }
+            if ((!FIXREVERTER[767] && (node == (void *) 0 || node -> doc == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 goto return3;
+                #ifdef FRCOV
+                }
+                #endif
             ret = xmlSchemaValAtomicListNode(xmlSchemaTypeEntityDef,
                                              value, val, node);
             if (ret <= 0)
@@ -3159,7 +4364,22 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 xmlChar *local = NULL;
 
                 ret = xmlValidateQName(value, 1);
-                if ((ret == 0) && (node != NULL)) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[769]) {
+                  fprintf(stderr, "reached bug index 769\n");
+                }
+                if ((FIXREVERTER[769] && (ret == 0 )) || (!FIXREVERTER[769] && (ret == 0 && node != (void *) 0 ))
+                #else
+                if (ret == 0 
+                #endif
+                ) {
+                  
+                #ifdef FRCOV
+                  if (!(node != (void *) 0 ))
+                    fprintf(stderr, "triggered bug index 769\n");
+                  #endif
+                
                     xmlChar *prefix;
 
                     local = xmlSplitQName2(value, &prefix);
@@ -3169,14 +4389,32 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                         ns = xmlSearchNs(node->doc, node, prefix);
                         if (ns == NULL)
                             ret = 1;
-                        else if (val != NULL)
+                        else 
+                        #ifdef FRCOV
+                        {if (FIXREVERTER[768]) {
+                          if ((val != (void *) 0 ) && !(0))
+                            fprintf(stderr, "triggered bug index 768\n");
+                          else
+                            fprintf(stderr, "reached bug index 768\n");
+                        }
+                        if ((!FIXREVERTER[768] && (val != (void *) 0 ))
+                        #else
+                        if (0
+                        #endif
+                        )
                             uri = xmlStrdup(ns->href);
+                            #ifdef FRCOV
+                            }
+                            #endif
                     }
                     if ((local != NULL) && ((val == NULL) || (ret != 0)))
                         xmlFree(local);
                     if (prefix != NULL)
                         xmlFree(prefix);
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 if ((node == NULL) || (node->doc == NULL))
                     ret = 3;
                 if (ret == 0) {
@@ -3186,7 +4424,22 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                     else
                         ret = 1;
                 }
-                if ((ret == 0) && (val != NULL)) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[770]) {
+                  fprintf(stderr, "reached bug index 770\n");
+                }
+                if ((FIXREVERTER[770] && (ret == 0 )) || (!FIXREVERTER[770] && (ret == 0 && val != (void *) 0 ))
+                #else
+                if (ret == 0 
+                #endif
+                ) {
+                  
+                #ifdef FRCOV
+                  if (!(val != (void *) 0 ))
+                    fprintf(stderr, "triggered bug index 770\n");
+                  #endif
+                
                     v = xmlSchemaNewValue(XML_SCHEMAS_NOTATION);
                     if (v != NULL) {
                         if (local != NULL)
@@ -3205,6 +4458,9 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                         goto error;
                     }
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 goto done;
             }
         case XML_SCHEMAS_ANYURI:{
@@ -3213,12 +4469,42 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 		    xmlChar *tmpval, *cur;
 		    if ((norm == NULL) && (normOnTheFly)) {
 			norm = xmlSchemaCollapseString(value);
-			if (norm != NULL)
+			
+			#ifdef FRCOV
+			{if (FIXREVERTER[771]) {
+			  if ((norm != (void *) 0 ) && !(0))
+			    fprintf(stderr, "triggered bug index 771\n");
+			  else
+			    fprintf(stderr, "reached bug index 771\n");
+			}
+			if ((!FIXREVERTER[771] && (norm != (void *) 0 ))
+			#else
+			if (0
+			#endif
+			)
 			    value = norm;
+			    #ifdef FRCOV
+			    }
+			    #endif
 		    }
 		    tmpval = xmlStrdup(value);
-                    if (tmpval == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[772]) {
+                      if ((tmpval == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 772\n");
+                      else
+                        fprintf(stderr, "reached bug index 772\n");
+                    }
+                    if ((!FIXREVERTER[772] && (tmpval == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto error;
+                        #ifdef FRCOV
+                        }
+                        #endif
 		    for (cur = tmpval; *cur; ++cur) {
 			if (*cur < 32 || *cur >= 127 || *cur == ' ' ||
 			    *cur == '<' || *cur == '>' || *cur == '"' ||
@@ -3229,15 +4515,45 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 		    }
                     uri = xmlParseURI((const char *) tmpval);
 		    xmlFree(tmpval);
-                    if (uri == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[773]) {
+                      if ((uri == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 773\n");
+                      else
+                        fprintf(stderr, "reached bug index 773\n");
+                    }
+                    if ((!FIXREVERTER[773] && (uri == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto return1;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     xmlFreeURI(uri);
                 }
 
                 if (val != NULL) {
                     v = xmlSchemaNewValue(XML_SCHEMAS_ANYURI);
-                    if (v == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[774]) {
+                      if ((v == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 774\n");
+                      else
+                        fprintf(stderr, "reached bug index 774\n");
+                    }
+                    if ((!FIXREVERTER[774] && (v == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto error;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     v->value.str = xmlStrdup(value);
                     *val = v;
                 }
@@ -3248,8 +4564,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 xmlChar *base;
                 int total, i = 0;
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[775]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 775\n");
+                  else
+                    fprintf(stderr, "reached bug index 775\n");
+                }
+                if ((!FIXREVERTER[775] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 
 		if (normOnTheFly)
 		    while IS_WSP_BLANK_CH(*cur) cur++;
@@ -3272,18 +4603,48 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 if (val != NULL) {
 
                     v = xmlSchemaNewValue(XML_SCHEMAS_HEXBINARY);
-                    if (v == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[776]) {
+                      if ((v == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 776\n");
+                      else
+                        fprintf(stderr, "reached bug index 776\n");
+                    }
+                    if ((!FIXREVERTER[776] && (v == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto error;
+                        #ifdef FRCOV
+                        }
+                        #endif
 		    /*
 		    * Copy only the normalized piece.
 		    * CRITICAL TODO: Check this.
 		    */
                     cur = xmlStrndup(start, i);
-                    if (cur == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[777]) {
+                      if ((cur == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 777\n");
+                      else
+                        fprintf(stderr, "reached bug index 777\n");
+                    }
+                    if ((!FIXREVERTER[777] && (cur == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 		        xmlSchemaTypeErrMemory();
                         xmlFree(v);
                         goto return1;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                     total = i / 2;      /* number of octets */
 
@@ -3320,8 +4681,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                 xmlChar *base;
                 int total, i = 0, pad = 0;
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[778]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 778\n");
+                  else
+                    fprintf(stderr, "reached bug index 778\n");
+                }
+                if ((!FIXREVERTER[778] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
 
                 for (; *cur; ++cur) {
                     int decc;
@@ -3402,15 +4778,45 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 
                 if (val != NULL) {
                     v = xmlSchemaNewValue(XML_SCHEMAS_BASE64BINARY);
-                    if (v == NULL)
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[780]) {
+                      if ((v == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 780\n");
+                      else
+                        fprintf(stderr, "reached bug index 780\n");
+                    }
+                    if ((!FIXREVERTER[780] && (v == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    )
                         goto error;
+                        #ifdef FRCOV
+                        }
+                        #endif
                     base =
                         (xmlChar *) xmlMallocAtomic(i + pad + 1);
-                    if (base == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[781]) {
+                      if ((base == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 781\n");
+                      else
+                        fprintf(stderr, "reached bug index 781\n");
+                    }
+                    if ((!FIXREVERTER[781] && (base == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
 		        xmlSchemaTypeErrMemory();
                         xmlFree(v);
                         goto return1;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     v->value.base64.str = base;
                     for (cur = value; *cur; ++cur)
                         if (_xmlSchemaBase64Decode(*cur) >= 0) {
@@ -3442,8 +4848,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
 
                 memset(&decimal, 0, sizeof(decimal));
 
-                if (cur == NULL)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[782]) {
+                  if ((cur == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 782\n");
+                  else
+                    fprintf(stderr, "reached bug index 782\n");
+                }
+                if ((!FIXREVERTER[782] && (cur == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto return1;
+                    #ifdef FRCOV
+                    }
+                    #endif
  		if (normOnTheFly)
 		    while IS_WSP_BLANK_CH(*cur) cur++;
                 if (*cur == '-') {
@@ -3453,8 +4874,23 @@ xmlSchemaValAtomicType(xmlSchemaTypePtr type, const xmlChar * value,
                     cur++;
                 ret = xmlSchemaParseUInt(&cur, &decimal);
                 /* add sign */
-                if (ret < 0)
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[783]) {
+                  if ((ret < 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 783\n");
+                  else
+                    fprintf(stderr, "reached bug index 783\n");
+                }
+                if ((!FIXREVERTER[783] && (ret < 0 ))
+                #else
+                if (0
+                #endif
+                )
                     goto valIntegerReturn1;
+                    #ifdef FRCOV
+                    }
+                    #endif
                 decimal.str[0] = sign;
 		if (normOnTheFly)
 		    while IS_WSP_BLANK_CH(*cur) cur++;
@@ -3702,8 +5138,23 @@ xmlSchemaCompareDurations(xmlSchemaValPtr x, xmlSchemaValPtr y)
         { 0, 28, 59, 89, 120, 150, 181, 212, 242, 273, 303, 334, },
         { 0, 31, 62, 92, 123, 153, 184, 215, 245, 276, 306, 337} };
 
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[786]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 786\n");
+      else
+        fprintf(stderr, "reached bug index 786\n");
+    }
+    if ((!FIXREVERTER[786] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return -2;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* months */
     mon = x->value.dur.mon - y->value.dur.mon;
@@ -3796,8 +5247,23 @@ static xmlSchemaValPtr
 xmlSchemaDupVal (xmlSchemaValPtr v)
 {
     xmlSchemaValPtr ret = xmlSchemaNewValue(v->type);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[790]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 790\n");
+      else
+        fprintf(stderr, "reached bug index 790\n");
+    }
+    if ((!FIXREVERTER[790] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     memcpy(ret, v, sizeof(xmlSchemaVal));
     ret->next = NULL;
@@ -3917,35 +5383,110 @@ _xmlSchemaDateAdd (xmlSchemaValPtr dt, xmlSchemaValPtr dur)
     xmlSchemaValDatePtr r, d;
     xmlSchemaValDurationPtr u;
 
-    if ((dt == NULL) || (dur == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[791]) {
+      if ((dt == (void *) 0 || dur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 791\n");
+      else
+        fprintf(stderr, "reached bug index 791\n");
+    }
+    if ((!FIXREVERTER[791] && (dt == (void *) 0 || dur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     ret = xmlSchemaNewValue(dt->type);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[792]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 792\n");
+      else
+        fprintf(stderr, "reached bug index 792\n");
+    }
+    if ((!FIXREVERTER[792] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* make a copy so we don't alter the original value */
     tmp = xmlSchemaDupVal(dt);
-    if (tmp == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[793]) {
+      if ((tmp == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 793\n");
+      else
+        fprintf(stderr, "reached bug index 793\n");
+    }
+    if ((!FIXREVERTER[793] && (tmp == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlSchemaFreeValue(ret);
         return NULL;
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     r = &(ret->value.date);
     d = &(tmp->value.date);
     u = &(dur->value.dur);
 
     /* normalization */
-    if (d->mon == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[794]) {
+      if ((d -> mon == 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 794\n");
+      else
+        fprintf(stderr, "reached bug index 794\n");
+    }
+    if ((!FIXREVERTER[794] && (d -> mon == 0  ))
+    #else
+    if (0
+    #endif
+    )
         d->mon = 1;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* normalize for time zone offset */
     u->sec -= (d->tzo * 60);
     d->tzo = 0;
 
     /* normalization */
-    if (d->day == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[795]) {
+      if ((d -> day == 0  ) && !(0))
+        fprintf(stderr, "triggered bug index 795\n");
+      else
+        fprintf(stderr, "reached bug index 795\n");
+    }
+    if ((!FIXREVERTER[795] && (d -> day == 0  ))
+    #else
+    if (0
+    #endif
+    )
         d->day = 1;
+        #ifdef FRCOV
+        }
+        #endif
 
     /* month */
     carry  = d->mon + u->mon;
@@ -4007,10 +5548,40 @@ _xmlSchemaDateAdd (xmlSchemaValPtr dt, xmlSchemaValPtr dur)
 	     * Coverity detected an overrun in daysInMonth
 	     * of size 12 at position 12 with index variable "((r)->mon - 1)"
 	     */
-	    if (tmon < 1)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[796]) {
+	      if ((tmon < 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 796\n");
+	      else
+	        fprintf(stderr, "reached bug index 796\n");
+	    }
+	    if ((!FIXREVERTER[796] && (tmon < 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        tmon = 1;
-	    if (tmon > 12)
+	        #ifdef FRCOV
+	        }
+	        #endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[797]) {
+	      if ((tmon > 12 ) && !(0))
+	        fprintf(stderr, "triggered bug index 797\n");
+	      else
+	        fprintf(stderr, "reached bug index 797\n");
+	    }
+	    if ((!FIXREVERTER[797] && (tmon > 12 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 	        tmon = 12;
+	        #ifdef FRCOV
+	        }
+	        #endif
             tempdays += MAX_DAYINMONTH(tyr, tmon);
             carry = -1;
         } else if (VALID_YEAR(r->year) && VALID_MONTH(r->mon) &&
@@ -4067,8 +5638,23 @@ xmlSchemaDateNormalize (xmlSchemaValPtr dt, double offset)
 {
     xmlSchemaValPtr dur, ret;
 
-    if (dt == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[798]) {
+      if ((dt == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 798\n");
+      else
+        fprintf(stderr, "reached bug index 798\n");
+    }
+    if ((!FIXREVERTER[798] && (dt == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     if (((dt->type != XML_SCHEMAS_TIME) &&
          (dt->type != XML_SCHEMAS_DATETIME) &&
@@ -4076,14 +5662,44 @@ xmlSchemaDateNormalize (xmlSchemaValPtr dt, double offset)
         return xmlSchemaDupVal(dt);
 
     dur = xmlSchemaNewValue(XML_SCHEMAS_DURATION);
-    if (dur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[799]) {
+      if ((dur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 799\n");
+      else
+        fprintf(stderr, "reached bug index 799\n");
+    }
+    if ((!FIXREVERTER[799] && (dur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     dur->value.date.sec -= offset;
 
     ret = _xmlSchemaDateAdd(dt, dur);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[800]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 800\n");
+      else
+        fprintf(stderr, "reached bug index 800\n");
+    }
+    if ((!FIXREVERTER[800] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return NULL;
+        #ifdef FRCOV
+        }
+        #endif
 
     xmlSchemaFreeValue(dur);
 
@@ -4109,7 +5725,22 @@ _xmlSchemaDateCastYMToDays (const xmlSchemaValPtr dt)
     int mon;
 
     mon = dt->value.date.mon;
-    if (mon <= 0) mon = 1; /* normalization */
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[801]) {
+      if ((mon <= 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 801\n");
+      else
+        fprintf(stderr, "reached bug index 801\n");
+    }
+    if ((!FIXREVERTER[801] && (mon <= 0 ))
+    #else
+    if (0
+    #endif
+    ) mon = 1;
+    #ifdef FRCOV
+    }
+    #endif /* normalization */
 
     if (dt->value.date.year <= 0)
         ret = (dt->value.date.year * 365) +
@@ -4156,8 +5787,23 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
     xmlSchemaValPtr p1, p2, q1, q2;
     long p1d, p2d, q1d, q2d;
 
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[802]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 802\n");
+      else
+        fprintf(stderr, "reached bug index 802\n");
+    }
+    if ((!FIXREVERTER[802] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return -2;
+        #ifdef FRCOV
+        }
+        #endif
 
     if ((x->value.date.year > LONG_MAX / 366) ||
         (x->value.date.year < LONG_MIN / 366) ||
@@ -4171,15 +5817,45 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
 
         if (!y->value.date.tz_flag) {
             p1 = xmlSchemaDateNormalize(x, 0);
-            if (p1 == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[803]) {
+              if ((p1 == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 803\n");
+              else
+                fprintf(stderr, "reached bug index 803\n");
+            }
+            if ((!FIXREVERTER[803] && (p1 == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return -2;
+                #ifdef FRCOV
+                }
+                #endif
             p1d = _xmlSchemaDateCastYMToDays(p1) + p1->value.date.day;
             /* normalize y + 14:00 */
             q1 = xmlSchemaDateNormalize(y, (14 * SECS_PER_HOUR));
-            if (q1 == NULL) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[804]) {
+              if ((q1 == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 804\n");
+              else
+                fprintf(stderr, "reached bug index 804\n");
+            }
+            if ((!FIXREVERTER[804] && (q1 == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            ) {
 		xmlSchemaFreeValue(p1);
                 return -2;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             q1d = _xmlSchemaDateCastYMToDays(q1) + q1->value.date.day;
             if (p1d < q1d) {
@@ -4198,11 +5874,26 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
 		    int ret = 0;
                     /* normalize y - 14:00 */
                     q2 = xmlSchemaDateNormalize(y, -(14 * SECS_PER_HOUR));
-                    if (q2 == NULL) {
+                    
+                    #ifdef FRCOV
+                    {if (FIXREVERTER[805]) {
+                      if ((q2 == (void *) 0 ) && !(0))
+                        fprintf(stderr, "triggered bug index 805\n");
+                      else
+                        fprintf(stderr, "reached bug index 805\n");
+                    }
+                    if ((!FIXREVERTER[805] && (q2 == (void *) 0 ))
+                    #else
+                    if (0
+                    #endif
+                    ) {
                         xmlSchemaFreeValue(p1);
                         xmlSchemaFreeValue(q1);
                         return -2;
                     }
+                    #ifdef FRCOV
+                    }
+                    #endif
                     q2d = _xmlSchemaDateCastYMToDays(q2) + q2->value.date.day;
                     if (p1d > q2d)
                         ret = 1;
@@ -4216,8 +5907,23 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
 		    xmlSchemaFreeValue(p1);
 		    xmlSchemaFreeValue(q1);
 		    xmlSchemaFreeValue(q2);
-		    if (ret != 0)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[806]) {
+		      if ((ret != 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 806\n");
+		      else
+		        fprintf(stderr, "reached bug index 806\n");
+		    }
+		    if ((!FIXREVERTER[806] && (ret != 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 		        return(ret);
+		        #ifdef FRCOV
+		        }
+		        #endif
                 }
             } else {
 		xmlSchemaFreeValue(p1);
@@ -4226,16 +5932,46 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
         }
     } else if (y->value.date.tz_flag) {
         q1 = xmlSchemaDateNormalize(y, 0);
-        if (q1 == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[807]) {
+          if ((q1 == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 807\n");
+          else
+            fprintf(stderr, "reached bug index 807\n");
+        }
+        if ((!FIXREVERTER[807] && (q1 == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return -2;
+            #ifdef FRCOV
+            }
+            #endif
         q1d = _xmlSchemaDateCastYMToDays(q1) + q1->value.date.day;
 
         /* normalize x - 14:00 */
         p1 = xmlSchemaDateNormalize(x, -(14 * SECS_PER_HOUR));
-        if (p1 == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[808]) {
+          if ((p1 == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 808\n");
+          else
+            fprintf(stderr, "reached bug index 808\n");
+        }
+        if ((!FIXREVERTER[808] && (p1 == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlSchemaFreeValue(q1);
             return -2;
         }
+        #ifdef FRCOV
+        }
+        #endif
         p1d = _xmlSchemaDateCastYMToDays(p1) + p1->value.date.day;
 
         if (p1d < q1d) {
@@ -4254,11 +5990,26 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
 	        int ret = 0;
                 /* normalize x + 14:00 */
                 p2 = xmlSchemaDateNormalize(x, (14 * SECS_PER_HOUR));
-                if (p2 == NULL) {
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[809]) {
+                  if ((p2 == (void *) 0 ) && !(0))
+                    fprintf(stderr, "triggered bug index 809\n");
+                  else
+                    fprintf(stderr, "reached bug index 809\n");
+                }
+                if ((!FIXREVERTER[809] && (p2 == (void *) 0 ))
+                #else
+                if (0
+                #endif
+                ) {
                     xmlSchemaFreeValue(p1);
                     xmlSchemaFreeValue(q1);
                     return -2;
                 }
+                #ifdef FRCOV
+                }
+                #endif
                 p2d = _xmlSchemaDateCastYMToDays(p2) + p2->value.date.day;
 
                 if (p2d > q1d) {
@@ -4273,8 +6024,23 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
 		xmlSchemaFreeValue(p1);
 		xmlSchemaFreeValue(q1);
 		xmlSchemaFreeValue(p2);
-		if (ret != 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[810]) {
+		  if ((ret != 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 810\n");
+		  else
+		    fprintf(stderr, "reached bug index 810\n");
+		}
+		if ((!FIXREVERTER[810] && (ret != 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return(ret);
+		    #ifdef FRCOV
+		    }
+		    #endif
             }
 	} else {
 	    xmlSchemaFreeValue(p1);
@@ -4288,15 +6054,45 @@ xmlSchemaCompareDates (xmlSchemaValPtr x, xmlSchemaValPtr y)
     if (x->type == y->type) {
         int ret = 0;
         q1 = xmlSchemaDateNormalize(y, 0);
-        if (q1 == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[811]) {
+          if ((q1 == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 811\n");
+          else
+            fprintf(stderr, "reached bug index 811\n");
+        }
+        if ((!FIXREVERTER[811] && (q1 == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return -2;
+            #ifdef FRCOV
+            }
+            #endif
         q1d = _xmlSchemaDateCastYMToDays(q1) + q1->value.date.day;
 
         p1 = xmlSchemaDateNormalize(x, 0);
-        if (p1 == NULL) {
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[812]) {
+          if ((p1 == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 812\n");
+          else
+            fprintf(stderr, "reached bug index 812\n");
+        }
+        if ((!FIXREVERTER[812] && (p1 == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        ) {
 	    xmlSchemaFreeValue(q1);
             return -2;
         }
+        #ifdef FRCOV
+        }
+        #endif
         p1d = _xmlSchemaDateCastYMToDays(p1) + p1->value.date.day;
 
         if (p1d < q1d) {
@@ -4762,10 +6558,40 @@ xmlSchemaCompareNormStrings(const xmlChar *x,
 	    while (IS_BLANK_CH(*y)) y++;
 	} else {
 	    tmp = *x++ - *y++;
-	    if (tmp < 0)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[817]) {
+	      if ((tmp < 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 817\n");
+	      else
+	        fprintf(stderr, "reached bug index 817\n");
+	    }
+	    if ((!FIXREVERTER[817] && (tmp < 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
-	    if (tmp > 0)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[818]) {
+	      if ((tmp > 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 818\n");
+	      else
+	        fprintf(stderr, "reached bug index 818\n");
+	    }
+	    if ((!FIXREVERTER[818] && (tmp > 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(1);
+		#ifdef FRCOV
+		}
+		#endif
 	}
     }
     if (*x != 0) {
@@ -4795,8 +6621,23 @@ static int
 xmlSchemaCompareFloats(xmlSchemaValPtr x, xmlSchemaValPtr y) {
     double d1, d2;
 
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[819]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 819\n");
+      else
+        fprintf(stderr, "reached bug index 819\n");
+    }
+    if ((!FIXREVERTER[819] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-2);
+	#ifdef FRCOV
+	}
+	#endif
 
     /*
      * Cast everything to doubles.
@@ -4896,8 +6737,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
         case XML_SCHEMAS_BYTE:
         case XML_SCHEMAS_UBYTE:
 	case XML_SCHEMAS_DECIMAL:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[820]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 820\n");
+	      else
+	        fprintf(stderr, "reached bug index 820\n");
+	    }
+	    if ((!FIXREVERTER[820] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
 	    if (ytype == xtype)
 		return(xmlSchemaCompareDecimals(x, y));
 	    if ((ytype == XML_SCHEMAS_DECIMAL) ||
@@ -4917,8 +6773,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 		return(xmlSchemaCompareDecimals(x, y));
 	    return(-2);
         case XML_SCHEMAS_DURATION:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[821]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 821\n");
+	      else
+	        fprintf(stderr, "reached bug index 821\n");
+	    }
+	    if ((!FIXREVERTER[821] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
 	    if (ytype == XML_SCHEMAS_DURATION)
                 return(xmlSchemaCompareDurations(x, y));
             return(-2);
@@ -4930,8 +6801,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
         case XML_SCHEMAS_GYEARMONTH:
         case XML_SCHEMAS_DATE:
         case XML_SCHEMAS_DATETIME:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[822]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 822\n");
+	      else
+	        fprintf(stderr, "reached bug index 822\n");
+	    }
+	    if ((!FIXREVERTER[822] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if ((ytype == XML_SCHEMAS_DATETIME)  ||
                 (ytype == XML_SCHEMAS_TIME)      ||
                 (ytype == XML_SCHEMAS_GDAY)      ||
@@ -4974,8 +6860,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 	    */
 	    if (ytype == XML_SCHEMAS_QNAME) {
 		/* TODO */
-		if (y == NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[823]) {
+		  if ((y == (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 823\n");
+		  else
+		    fprintf(stderr, "reached bug index 823\n");
+		}
+		if ((!FIXREVERTER[823] && (y == (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return(-2);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		return (-2);
 	    }
             if ((ytype == XML_SCHEMAS_ANYSIMPLETYPE) ||
@@ -5029,8 +6930,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 	}
         case XML_SCHEMAS_QNAME:
 	case XML_SCHEMAS_NOTATION:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[824]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 824\n");
+	      else
+	        fprintf(stderr, "reached bug index 824\n");
+	    }
+	    if ((!FIXREVERTER[824] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if ((ytype == XML_SCHEMAS_QNAME) ||
 		(ytype == XML_SCHEMAS_NOTATION)) {
 		if ((xmlStrEqual(x->value.qname.name, y->value.qname.name)) &&
@@ -5041,15 +6957,45 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 	    return (-2);
         case XML_SCHEMAS_FLOAT:
         case XML_SCHEMAS_DOUBLE:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[825]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 825\n");
+	      else
+	        fprintf(stderr, "reached bug index 825\n");
+	    }
+	    if ((!FIXREVERTER[825] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if ((ytype == XML_SCHEMAS_FLOAT) ||
                 (ytype == XML_SCHEMAS_DOUBLE))
                 return (xmlSchemaCompareFloats(x, y));
             return (-2);
         case XML_SCHEMAS_BOOLEAN:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[826]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 826\n");
+	      else
+	        fprintf(stderr, "reached bug index 826\n");
+	    }
+	    if ((!FIXREVERTER[826] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if (ytype == XML_SCHEMAS_BOOLEAN) {
 		if (x->value.b == y->value.b)
 		    return(0);
@@ -5059,8 +7005,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
 	    }
 	    return (-2);
         case XML_SCHEMAS_HEXBINARY:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[827]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 827\n");
+	      else
+	        fprintf(stderr, "reached bug index 827\n");
+	    }
+	    if ((!FIXREVERTER[827] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if (ytype == XML_SCHEMAS_HEXBINARY) {
 	        if (x->value.hex.total == y->value.hex.total) {
 		    int ret = xmlStrcmp(x->value.hex.str, y->value.hex.str);
@@ -5076,8 +7037,23 @@ xmlSchemaCompareValuesInternal(xmlSchemaValType xtype,
             }
             return (-2);
         case XML_SCHEMAS_BASE64BINARY:
-	    if ((x == NULL) || (y == NULL))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[829]) {
+	      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 829\n");
+	      else
+	        fprintf(stderr, "reached bug index 829\n");
+	    }
+	    if ((!FIXREVERTER[829] && (x == (void *) 0 || y == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-2);
+		#ifdef FRCOV
+		}
+		#endif
             if (ytype == XML_SCHEMAS_BASE64BINARY) {
                 if (x->value.base64.total == y->value.base64.total) {
                     int ret = xmlStrcmp(x->value.base64.str,
@@ -5118,8 +7094,23 @@ int
 xmlSchemaCompareValues(xmlSchemaValPtr x, xmlSchemaValPtr y) {
     xmlSchemaWhitespaceValueType xws, yws;
 
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[830]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 830\n");
+      else
+        fprintf(stderr, "reached bug index 830\n");
+    }
+    if ((!FIXREVERTER[830] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-2);
+        #ifdef FRCOV
+        }
+        #endif
     if (x->type == XML_SCHEMAS_STRING)
 	xws = XML_SCHEMA_WHITESPACE_PRESERVE;
     else if (x->type == XML_SCHEMAS_NORMSTRING)
@@ -5156,8 +7147,23 @@ xmlSchemaCompareValuesWhtsp(xmlSchemaValPtr x,
 			    xmlSchemaValPtr y,
 			    xmlSchemaWhitespaceValueType yws)
 {
-    if ((x == NULL) || (y == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[831]) {
+      if ((x == (void *) 0 || y == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 831\n");
+      else
+        fprintf(stderr, "reached bug index 831\n");
+    }
+    if ((!FIXREVERTER[831] && (x == (void *) 0 || y == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-2);
+	#ifdef FRCOV
+	}
+	#endif
     return(xmlSchemaCompareValuesInternal(x->type, x, NULL, xws, y->type,
 	y, NULL, yws));
 }
@@ -5201,8 +7207,23 @@ xmlSchemaNormLen(const xmlChar *value) {
     const xmlChar *utf;
     int ret = 0;
 
-    if (value == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[832]) {
+      if ((value == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 832\n");
+      else
+        fprintf(stderr, "reached bug index 832\n");
+    }
+    if ((!FIXREVERTER[832] && (value == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
     utf = value;
     while (IS_BLANK_CH(*utf)) utf++;
     while (*utf != 0) {
@@ -5249,8 +7270,23 @@ xmlSchemaGetFacetValueAsULong(xmlSchemaFacetPtr facet)
     * TODO: Check if this is a decimal.
     */
     char *discard;
-    if (facet == NULL || facet->val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[833]) {
+      if ((facet == (void *) 0 || facet -> val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 833\n");
+      else
+        fprintf(stderr, "reached bug index 833\n");
+    }
+    if ((!FIXREVERTER[833] && (facet == (void *) 0 || facet -> val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return 0;
+        #ifdef FRCOV
+        }
+        #endif
     return strtoul((const char*)facet->val->value.decimal.str+1, &discard, 10);
 }
 
@@ -5272,8 +7308,23 @@ xmlSchemaValidateListSimpleTypeFacet(xmlSchemaFacetPtr facet,
 				     unsigned long actualLen,
 				     unsigned long *expectedLen)
 {
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[834]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 834\n");
+      else
+        fprintf(stderr, "reached bug index 834\n");
+    }
+    if ((!FIXREVERTER[834] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
     /*
     * TODO: Check if this will work with large numbers.
     * (compare value.decimal.mi and value.decimal.hi as well?).
@@ -5331,8 +7382,23 @@ xmlSchemaValidateLengthFacetInternal(xmlSchemaFacetPtr facet,
 {
     unsigned int len = 0;
 
-    if ((length == NULL) || (facet == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[838]) {
+      if ((length == (void *) 0 || facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 838\n");
+      else
+        fprintf(stderr, "reached bug index 838\n");
+    }
+    if ((!FIXREVERTER[838] && (length == (void *) 0 || facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return (-1);
+        #ifdef FRCOV
+        }
+        #endif
     *length = 0;
     if ((facet->type != XML_SCHEMA_FACET_LENGTH) &&
 	(facet->type != XML_SCHEMA_FACET_MAXLENGTH) &&
@@ -5390,8 +7456,23 @@ xmlSchemaValidateLengthFacetInternal(xmlSchemaFacetPtr facet,
 		* FIXME: What exactly to do with anyURI?
 		*/
 	    case XML_SCHEMAS_ANYURI:
-		if (value != NULL)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[839]) {
+		  if ((value != (void *) 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 839\n");
+		  else
+		    fprintf(stderr, "reached bug index 839\n");
+		}
+		if ((!FIXREVERTER[839] && (value != (void *) 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    len = xmlSchemaNormLen(value);
+		    #ifdef FRCOV
+		    }
+		    #endif
 		break;
 	    case XML_SCHEMAS_QNAME:
 	    case XML_SCHEMAS_NOTATION:
@@ -5410,14 +7491,59 @@ xmlSchemaValidateLengthFacetInternal(xmlSchemaFacetPtr facet,
     * TODO: Return the whole expected value. (This may be possible now with xmlSchemaValDecimalCompareWithInteger)
     */
     if (facet->type == XML_SCHEMA_FACET_LENGTH) {
-        if (len != xmlSchemaGetFacetValueAsULong(facet))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[840]) {
+          if ((len != xmlSchemaGetFacetValueAsULong ( facet ) ) && !(0))
+            fprintf(stderr, "triggered bug index 840\n");
+          else
+            fprintf(stderr, "reached bug index 840\n");
+        }
+        if ((!FIXREVERTER[840] && (len != xmlSchemaGetFacetValueAsULong ( facet ) ))
+        #else
+        if (0
+        #endif
+        )
 	    return(XML_SCHEMAV_CVC_LENGTH_VALID);
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else if (facet->type == XML_SCHEMA_FACET_MINLENGTH) {
-        if (len < xmlSchemaGetFacetValueAsULong(facet))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[841]) {
+          if ((len < xmlSchemaGetFacetValueAsULong ( facet ) ) && !(0))
+            fprintf(stderr, "triggered bug index 841\n");
+          else
+            fprintf(stderr, "reached bug index 841\n");
+        }
+        if ((!FIXREVERTER[841] && (len < xmlSchemaGetFacetValueAsULong ( facet ) ))
+        #else
+        if (0
+        #endif
+        )
 	    return(XML_SCHEMAV_CVC_MINLENGTH_VALID);
+	    #ifdef FRCOV
+	    }
+	    #endif
     } else {
-        if (len > xmlSchemaGetFacetValueAsULong(facet))
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[842]) {
+          if ((len > xmlSchemaGetFacetValueAsULong ( facet ) ) && !(0))
+            fprintf(stderr, "triggered bug index 842\n");
+          else
+            fprintf(stderr, "reached bug index 842\n");
+        }
+        if ((!FIXREVERTER[842] && (len > xmlSchemaGetFacetValueAsULong ( facet ) ))
+        #else
+        if (0
+        #endif
+        )
 	    return(XML_SCHEMAV_CVC_MAXLENGTH_VALID);
+	    #ifdef FRCOV
+	    }
+	    #endif
     }
 
     return (0);
@@ -5502,8 +7628,23 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
 {
     int ret;
 
-    if (facet == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[844]) {
+      if ((facet == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 844\n");
+      else
+        fprintf(stderr, "reached bug index 844\n");
+    }
+    if ((!FIXREVERTER[844] && (facet == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(-1);
+	#ifdef FRCOV
+	}
+	#endif
 
     switch (facet->type) {
 	case XML_SCHEMA_FACET_PATTERN:
@@ -5511,8 +7652,23 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
 	    * NOTE that for patterns, the @value needs to be the normalized
 	    * value, *not* the lexical initial value or the canonical value.
 	    */
-	    if (value == NULL)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[845]) {
+	      if ((value == (void *) 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 845\n");
+	      else
+	        fprintf(stderr, "reached bug index 845\n");
+	    }
+	    if ((!FIXREVERTER[845] && (value == (void *) 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(-1);
+		#ifdef FRCOV
+		}
+		#endif
 	    /*
 	    * If string-derived type, regexp must be tested on the value space of
 	    * the datatype.
@@ -5528,10 +7684,40 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
                 value = val->value.str;
             }
 	    ret = xmlRegexpExec(facet->regexp, value);
-	    if (ret == 1)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[846]) {
+	      if ((ret == 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 846\n");
+	      else
+	        fprintf(stderr, "reached bug index 846\n");
+	    }
+	    if ((!FIXREVERTER[846] && (ret == 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
-	    if (ret == 0)
+		#ifdef FRCOV
+		}
+		#endif
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[847]) {
+	      if ((ret == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 847\n");
+	      else
+	        fprintf(stderr, "reached bug index 847\n");
+	    }
+	    if ((!FIXREVERTER[847] && (ret == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(XML_SCHEMAV_CVC_PATTERN_VALID);
+		#ifdef FRCOV
+		}
+		#endif
 	    return(ret);
 	case XML_SCHEMA_FACET_MAXEXCLUSIVE:
 	    ret = xmlSchemaCompareValues(val, facet->val);
@@ -5551,15 +7737,45 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
 	    ret = xmlSchemaCompareValues(val, facet->val);
 	    if (ret == -2)
 		return(-1);
-	    if (ret == 1)
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[848]) {
+	      if ((ret == 1 ) && !(0))
+	        fprintf(stderr, "triggered bug index 848\n");
+	      else
+	        fprintf(stderr, "reached bug index 848\n");
+	    }
+	    if ((!FIXREVERTER[848] && (ret == 1 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
+		#ifdef FRCOV
+		}
+		#endif
 	    return(XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID);
 	case XML_SCHEMA_FACET_MININCLUSIVE:
 	    ret = xmlSchemaCompareValues(val, facet->val);
 	    if (ret == -2)
 		return(-1);
-	    if ((ret == 1) || (ret == 0))
+	    
+	    #ifdef FRCOV
+	    {if (FIXREVERTER[849]) {
+	      if ((ret == 1 || ret == 0 ) && !(0))
+	        fprintf(stderr, "triggered bug index 849\n");
+	      else
+	        fprintf(stderr, "reached bug index 849\n");
+	    }
+	    if ((!FIXREVERTER[849] && (ret == 1 || ret == 0 ))
+	    #else
+	    if (0
+	    #endif
+	    )
 		return(0);
+		#ifdef FRCOV
+		}
+		#endif
 	    return(XML_SCHEMAV_CVC_MININCLUSIVE_VALID);
 	case XML_SCHEMA_FACET_WHITESPACE:
 	    /* TODO whitespaces */
@@ -5585,8 +7801,23 @@ xmlSchemaValidateFacetInternal(xmlSchemaFacetPtr facet,
 		    value, ws);
 		if (ret == -2)
 		    return(-1);
-		if (ret == 0)
+		
+		#ifdef FRCOV
+		{if (FIXREVERTER[850]) {
+		  if ((ret == 0 ) && !(0))
+		    fprintf(stderr, "triggered bug index 850\n");
+		  else
+		    fprintf(stderr, "reached bug index 850\n");
+		}
+		if ((!FIXREVERTER[850] && (ret == 0 ))
+		#else
+		if (0
+		#endif
+		)
 		    return(0);
+		    #ifdef FRCOV
+		    }
+		    #endif
 	    }
 	    return(XML_SCHEMAV_CVC_ENUMERATION_VALID);
 	case XML_SCHEMA_FACET_LENGTH:
@@ -5879,8 +8110,23 @@ xmlSchemaFormatFloat(double number, char buffer[], int buffersize)
 int
 xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 {
-    if ((retValue == NULL) || (val == NULL))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[855]) {
+      if ((retValue == (void *) 0 || val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 855\n");
+      else
+        fprintf(stderr, "reached bug index 855\n");
+    }
+    if ((!FIXREVERTER[855] && (retValue == (void *) 0 || val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     *retValue = NULL;
     switch (val->type) {
 	case XML_SCHEMAS_STRING:
@@ -6073,8 +8319,23 @@ xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 		    xmlSchemaValPtr norm;
 
 		    norm = xmlSchemaDateNormalize(val, 0);
-		    if (norm == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[856]) {
+		      if ((norm == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 856\n");
+		      else
+		        fprintf(stderr, "reached bug index 856\n");
+		    }
+		    if ((!FIXREVERTER[856] && (norm == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return (-1);
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * TODO: Check if "%.14g" is portable.
 		    */
@@ -6102,8 +8363,23 @@ xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 		    xmlSchemaValPtr norm;
 
 		    norm = xmlSchemaDateNormalize(val, 0);
-		    if (norm == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[857]) {
+		      if ((norm == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 857\n");
+		      else
+		        fprintf(stderr, "reached bug index 857\n");
+		    }
+		    if ((!FIXREVERTER[857] && (norm == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return (-1);
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * TODO: Append the canonical value of the
 		    * recoverable timezone and not "Z".
@@ -6130,8 +8406,23 @@ xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
 		    xmlSchemaValPtr norm;
 
 		    norm = xmlSchemaDateNormalize(val, 0);
-		    if (norm == NULL)
+		    
+		    #ifdef FRCOV
+		    {if (FIXREVERTER[858]) {
+		      if ((norm == (void *) 0 ) && !(0))
+		        fprintf(stderr, "triggered bug index 858\n");
+		      else
+		        fprintf(stderr, "reached bug index 858\n");
+		    }
+		    if ((!FIXREVERTER[858] && (norm == (void *) 0 ))
+		    #else
+		    if (0
+		    #endif
+		    )
 			return (-1);
+			#ifdef FRCOV
+			}
+			#endif
 		    /*
 		    * TODO: Check if "%.14g" is portable.
 		    */
@@ -6260,8 +8551,23 @@ xmlSchemaGetCanonValueWhtsp(xmlSchemaValPtr val,
 xmlSchemaValType
 xmlSchemaGetValType(xmlSchemaValPtr val)
 {
-    if (val == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[860]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 860\n");
+      else
+        fprintf(stderr, "reached bug index 860\n");
+    }
+    if ((!FIXREVERTER[860] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(XML_SCHEMAS_UNKNOWN);
+        #ifdef FRCOV
+        }
+        #endif
     return (val->type);
 }
 
diff --git a/xmlstring.c b/xmlstring.c
index 258ecc92..5d6ef76e 100644
--- a/xmlstring.c
+++ b/xmlstring.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * string.c : an XML string utilities module
  *
@@ -53,11 +57,41 @@ xmlChar *
 xmlStrndup(const xmlChar *cur, int len) {
     xmlChar *ret;
 
-    if ((cur == NULL) || (len < 0)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[360]) {
+      if ((cur == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 360\n");
+      else
+        fprintf(stderr, "reached bug index 360\n");
+    }
+    if ((!FIXREVERTER[360] && (cur == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = (xmlChar *) xmlMallocAtomic((size_t) len + 1);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[361]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 361\n");
+      else
+        fprintf(stderr, "reached bug index 361\n");
+    }
+    if ((!FIXREVERTER[361] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memcpy(ret, cur, len);
     ret[len] = 0;
     return(ret);
@@ -77,7 +111,22 @@ xmlChar *
 xmlStrdup(const xmlChar *cur) {
     const xmlChar *p = cur;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[362]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 362\n");
+      else
+        fprintf(stderr, "reached bug index 362\n");
+    }
+    if ((!FIXREVERTER[362] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while (*p != 0) p++; /* non input consuming */
     return(xmlStrndup(cur, p - cur));
 }
@@ -97,11 +146,41 @@ xmlCharStrndup(const char *cur, int len) {
     int i;
     xmlChar *ret;
 
-    if ((cur == NULL) || (len < 0)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[363]) {
+      if ((cur == (void *) 0 || len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 363\n");
+      else
+        fprintf(stderr, "reached bug index 363\n");
+    }
+    if ((!FIXREVERTER[363] && (cur == (void *) 0 || len < 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     ret = (xmlChar *) xmlMallocAtomic((size_t) len + 1);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[364]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 364\n");
+      else
+        fprintf(stderr, "reached bug index 364\n");
+    }
+    if ((!FIXREVERTER[364] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     for (i = 0;i < len;i++) {
         /* Explicit sign change */
         ret[i] = (xmlChar) cur[i];
@@ -124,7 +203,22 @@ xmlChar *
 xmlCharStrdup(const char *cur) {
     const char *p = cur;
 
-    if (cur == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[365]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 365\n");
+      else
+        fprintf(stderr, "reached bug index 365\n");
+    }
+    if ((!FIXREVERTER[365] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while (*p != '\0') p++; /* non input consuming */
     return(xmlCharStrndup(cur, p - cur));
 }
@@ -142,8 +236,38 @@ xmlCharStrdup(const char *cur) {
 int
 xmlStrcmp(const xmlChar *str1, const xmlChar *str2) {
     if (str1 == str2) return(0);
-    if (str1 == NULL) return(-1);
-    if (str2 == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[366]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 366\n");
+      else
+        fprintf(stderr, "reached bug index 366\n");
+    }
+    if ((!FIXREVERTER[366] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[367]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 367\n");
+      else
+        fprintf(stderr, "reached bug index 367\n");
+    }
+    if ((!FIXREVERTER[367] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
     return(strcmp((const char *)str1, (const char *)str2));
 #else
@@ -169,8 +293,38 @@ xmlStrcmp(const xmlChar *str1, const xmlChar *str2) {
 int
 xmlStrEqual(const xmlChar *str1, const xmlChar *str2) {
     if (str1 == str2) return(1);
-    if (str1 == NULL) return(0);
-    if (str2 == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[368]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 368\n");
+      else
+        fprintf(stderr, "reached bug index 368\n");
+    }
+    if ((!FIXREVERTER[368] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[369]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 369\n");
+      else
+        fprintf(stderr, "reached bug index 369\n");
+    }
+    if ((!FIXREVERTER[369] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
     return(strcmp((const char *)str1, (const char *)str2) == 0);
 #else
@@ -194,9 +348,54 @@ xmlStrEqual(const xmlChar *str1, const xmlChar *str2) {
 
 int
 xmlStrQEqual(const xmlChar *pref, const xmlChar *name, const xmlChar *str) {
-    if (pref == NULL) return(xmlStrEqual(name, str));
-    if (name == NULL) return(0);
-    if (str == NULL) return(0);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[370]) {
+      if ((pref == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 370\n");
+      else
+        fprintf(stderr, "reached bug index 370\n");
+    }
+    if ((!FIXREVERTER[370] && (pref == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(xmlStrEqual(name, str));
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[371]) {
+      if ((name == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 371\n");
+      else
+        fprintf(stderr, "reached bug index 371\n");
+    }
+    if ((!FIXREVERTER[371] && (name == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[372]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 372\n");
+      else
+        fprintf(stderr, "reached bug index 372\n");
+    }
+    if ((!FIXREVERTER[372] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(0);
+    #ifdef FRCOV
+    }
+    #endif
 
     do {
         if (*pref++ != *str) return(0);
@@ -223,8 +422,38 @@ int
 xmlStrncmp(const xmlChar *str1, const xmlChar *str2, int len) {
     if (len <= 0) return(0);
     if (str1 == str2) return(0);
-    if (str1 == NULL) return(-1);
-    if (str2 == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[374]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 374\n");
+      else
+        fprintf(stderr, "reached bug index 374\n");
+    }
+    if ((!FIXREVERTER[374] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[375]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 375\n");
+      else
+        fprintf(stderr, "reached bug index 375\n");
+    }
+    if ((!FIXREVERTER[375] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
     return(strncmp((const char *)str1, (const char *)str2, len));
 #else
@@ -286,8 +515,38 @@ xmlStrcasecmp(const xmlChar *str1, const xmlChar *str2) {
     register int tmp;
 
     if (str1 == str2) return(0);
-    if (str1 == NULL) return(-1);
-    if (str2 == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[376]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 376\n");
+      else
+        fprintf(stderr, "reached bug index 376\n");
+    }
+    if ((!FIXREVERTER[376] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[377]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 377\n");
+      else
+        fprintf(stderr, "reached bug index 377\n");
+    }
+    if ((!FIXREVERTER[377] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
     do {
         tmp = casemap[*str1++] - casemap[*str2];
         if (tmp != 0) return(tmp);
@@ -312,8 +571,38 @@ xmlStrncasecmp(const xmlChar *str1, const xmlChar *str2, int len) {
 
     if (len <= 0) return(0);
     if (str1 == str2) return(0);
-    if (str1 == NULL) return(-1);
-    if (str2 == NULL) return(1);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[380]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 380\n");
+      else
+        fprintf(stderr, "reached bug index 380\n");
+    }
+    if ((!FIXREVERTER[380] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(-1);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[381]) {
+      if ((str2 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 381\n");
+      else
+        fprintf(stderr, "reached bug index 381\n");
+    }
+    if ((!FIXREVERTER[381] && (str2 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(1);
+    #ifdef FRCOV
+    }
+    #endif
     do {
         tmp = casemap[*str1++] - casemap[*str2];
         if (tmp != 0 || --len == 0) return(tmp);
@@ -333,7 +622,22 @@ xmlStrncasecmp(const xmlChar *str1, const xmlChar *str2, int len) {
 
 const xmlChar *
 xmlStrchr(const xmlChar *str, xmlChar val) {
-    if (str == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[382]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 382\n");
+      else
+        fprintf(stderr, "reached bug index 382\n");
+    }
+    if ((!FIXREVERTER[382] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     while (*str != 0) { /* non input consuming */
         if (*str == val) return((xmlChar *) str);
         str++;
@@ -355,8 +659,38 @@ const xmlChar *
 xmlStrstr(const xmlChar *str, const xmlChar *val) {
     int n;
 
-    if (str == NULL) return(NULL);
-    if (val == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[383]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 383\n");
+      else
+        fprintf(stderr, "reached bug index 383\n");
+    }
+    if ((!FIXREVERTER[383] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[384]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 384\n");
+      else
+        fprintf(stderr, "reached bug index 384\n");
+    }
+    if ((!FIXREVERTER[384] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     n = xmlStrlen(val);
 
     if (n == 0) return(str);
@@ -383,8 +717,38 @@ const xmlChar *
 xmlStrcasestr(const xmlChar *str, const xmlChar *val) {
     int n;
 
-    if (str == NULL) return(NULL);
-    if (val == NULL) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[386]) {
+      if ((str == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 386\n");
+      else
+        fprintf(stderr, "reached bug index 386\n");
+    }
+    if ((!FIXREVERTER[386] && (str == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[387]) {
+      if ((val == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 387\n");
+      else
+        fprintf(stderr, "reached bug index 387\n");
+    }
+    if ((!FIXREVERTER[387] && (val == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
     n = xmlStrlen(val);
 
     if (n == 0) return(str);
@@ -457,21 +821,96 @@ xmlStrncat(xmlChar *cur, const xmlChar *add, int len) {
     int size;
     xmlChar *ret;
 
-    if ((add == NULL) || (len == 0))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[392]) {
+      if ((add == (void *) 0 || len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 392\n");
+      else
+        fprintf(stderr, "reached bug index 392\n");
+    }
+    if ((!FIXREVERTER[392] && (add == (void *) 0 || len == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(cur);
-    if (len < 0)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[393]) {
+      if ((len < 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 393\n");
+      else
+        fprintf(stderr, "reached bug index 393\n");
+    }
+    if ((!FIXREVERTER[393] && (len < 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return(NULL);
-    if (cur == NULL)
+	#ifdef FRCOV
+	}
+	#endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[394]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 394\n");
+      else
+        fprintf(stderr, "reached bug index 394\n");
+    }
+    if ((!FIXREVERTER[394] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrndup(add, len));
+        #ifdef FRCOV
+        }
+        #endif
 
     size = xmlStrlen(cur);
-    if ((size < 0) || (size > INT_MAX - len))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[395]) {
+      if ((size < 0 || size > 2147483647 - len ) && !(0))
+        fprintf(stderr, "triggered bug index 395\n");
+      else
+        fprintf(stderr, "reached bug index 395\n");
+    }
+    if ((!FIXREVERTER[395] && (size < 0 || size > 2147483647 - len ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret = (xmlChar *) xmlRealloc(cur, (size_t) size + len + 1);
-    if (ret == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[396]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 396\n");
+      else
+        fprintf(stderr, "reached bug index 396\n");
+    }
+    if ((!FIXREVERTER[396] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         xmlFree(cur);
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
     memcpy(&ret[size], add, len);
     ret[size + len] = 0;
     return(ret);
@@ -496,20 +935,95 @@ xmlStrncatNew(const xmlChar *str1, const xmlChar *str2, int len) {
 
     if (len < 0) {
         len = xmlStrlen(str2);
-        if (len < 0)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[397]) {
+          if ((len < 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 397\n");
+          else
+            fprintf(stderr, "reached bug index 397\n");
+        }
+        if ((!FIXREVERTER[397] && (len < 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(NULL);
+            #ifdef FRCOV
+            }
+            #endif
+    }
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[398]) {
+      if ((str1 == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 398\n");
+      else
+        fprintf(stderr, "reached bug index 398\n");
     }
-    if (str1 == NULL)
+    if ((!FIXREVERTER[398] && (str1 == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrndup(str2, len));
-    if ((str2 == NULL) || (len == 0))
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[399]) {
+      if ((str2 == (void *) 0 || len == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 399\n");
+      else
+        fprintf(stderr, "reached bug index 399\n");
+    }
+    if ((!FIXREVERTER[399] && (str2 == (void *) 0 || len == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrdup(str1));
+        #ifdef FRCOV
+        }
+        #endif
 
     size = xmlStrlen(str1);
-    if ((size < 0) || (size > INT_MAX - len))
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[400]) {
+      if ((size < 0 || size > 2147483647 - len ) && !(0))
+        fprintf(stderr, "triggered bug index 400\n");
+      else
+        fprintf(stderr, "reached bug index 400\n");
+    }
+    if ((!FIXREVERTER[400] && (size < 0 || size > 2147483647 - len ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     ret = (xmlChar *) xmlMalloc((size_t) size + len + 1);
-    if (ret == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[401]) {
+      if ((ret == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 401\n");
+      else
+        fprintf(stderr, "reached bug index 401\n");
+    }
+    if ((!FIXREVERTER[401] && (ret == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     memcpy(ret, str1, size);
     memcpy(&ret[size], str2, len);
     ret[size + len] = 0;
@@ -532,9 +1046,39 @@ xmlChar *
 xmlStrcat(xmlChar *cur, const xmlChar *add) {
     const xmlChar *p = add;
 
-    if (add == NULL) return(cur);
-    if (cur == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[402]) {
+      if ((add == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 402\n");
+      else
+        fprintf(stderr, "reached bug index 402\n");
+    }
+    if ((!FIXREVERTER[402] && (add == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(cur);
+    #ifdef FRCOV
+    }
+    #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[403]) {
+      if ((cur == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 403\n");
+      else
+        fprintf(stderr, "reached bug index 403\n");
+    }
+    if ((!FIXREVERTER[403] && (cur == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(xmlStrdup(add));
+        #ifdef FRCOV
+        }
+        #endif
 
     while (*p != 0) p++; /* non input consuming */
     return(xmlStrncat(cur, add, p - add));
@@ -613,13 +1157,58 @@ xmlStrVASPrintf(xmlChar **out, int maxSize, const char *msg, va_list ap) {
     int res, size;
     int truncated = 0;
 
-    if (out == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[406]) {
+      if ((out == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 406\n");
+      else
+        fprintf(stderr, "reached bug index 406\n");
+    }
+    if ((!FIXREVERTER[406] && (out == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(1);
+        #ifdef FRCOV
+        }
+        #endif
     *out = NULL;
-    if (msg == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[407]) {
+      if ((msg == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 407\n");
+      else
+        fprintf(stderr, "reached bug index 407\n");
+    }
+    if ((!FIXREVERTER[407] && (msg == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(1);
-    if (maxSize < 32)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[408]) {
+      if ((maxSize < 32 ) && !(0))
+        fprintf(stderr, "triggered bug index 408\n");
+      else
+        fprintf(stderr, "reached bug index 408\n");
+    }
+    if ((!FIXREVERTER[408] && (maxSize < 32 ))
+    #else
+    if (0
+    #endif
+    )
         maxSize = 32;
+        #ifdef FRCOV
+        }
+        #endif
 
     va_copy(copy, ap);
     res = vsnprintf(empty, 1, msg, copy);
@@ -635,8 +1224,23 @@ xmlStrVASPrintf(xmlChar **out, int maxSize, const char *msg, va_list ap) {
             truncated = 1;
         }
         buf = xmlMalloc(size);
-        if (buf == NULL)
+        
+        #ifdef FRCOV
+        {if (FIXREVERTER[409]) {
+          if ((buf == (void *) 0 ) && !(0))
+            fprintf(stderr, "triggered bug index 409\n");
+          else
+            fprintf(stderr, "reached bug index 409\n");
+        }
+        if ((!FIXREVERTER[409] && (buf == (void *) 0 ))
+        #else
+        if (0
+        #endif
+        )
             return(-1);
+            #ifdef FRCOV
+            }
+            #endif
         if (vsnprintf((char *) buf, size, msg, ap) < 0) {
             xmlFree(buf);
             return(1);
@@ -664,8 +1268,23 @@ xmlStrVASPrintf(xmlChar **out, int maxSize, const char *msg, va_list ap) {
         size = 32;
         while (1) {
             buf = xmlMalloc(size);
-            if (buf == NULL)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[410]) {
+              if ((buf == (void *) 0 ) && !(0))
+                fprintf(stderr, "triggered bug index 410\n");
+              else
+                fprintf(stderr, "reached bug index 410\n");
+            }
+            if ((!FIXREVERTER[410] && (buf == (void *) 0 ))
+            #else
+            if (0
+            #endif
+            )
                 return(-1);
+                #ifdef FRCOV
+                }
+                #endif
 
             va_copy(copy, ap);
             res = vsnprintf((char *) buf, size, msg, copy);
@@ -673,10 +1292,25 @@ xmlStrVASPrintf(xmlChar **out, int maxSize, const char *msg, va_list ap) {
             if ((res >= 0) && (res < size - 1))
                 break;
 
-            if (size >= maxSize) {
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[411]) {
+              if ((size >= maxSize ) && !(0))
+                fprintf(stderr, "triggered bug index 411\n");
+              else
+                fprintf(stderr, "reached bug index 411\n");
+            }
+            if ((!FIXREVERTER[411] && (size >= maxSize ))
+            #else
+            if (0
+            #endif
+            ) {
                 truncated = 1;
                 break;
             }
+            #ifdef FRCOV
+            }
+            #endif
 
             xmlFree(buf);
 
@@ -814,8 +1448,23 @@ int
 xmlUTF8Strlen(const xmlChar *utf) {
     size_t ret = 0;
 
-    if (utf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[415]) {
+      if ((utf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 415\n");
+      else
+        fprintf(stderr, "reached bug index 415\n");
+    }
+    if ((!FIXREVERTER[415] && (utf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(-1);
+        #ifdef FRCOV
+        }
+        #endif
 
     while (*utf != 0) {
         if (utf[0] & 0x80) {
@@ -858,10 +1507,40 @@ int
 xmlGetUTF8Char(const unsigned char *utf, int *len) {
     unsigned int c;
 
-    if (utf == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[416]) {
+      if ((utf == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 416\n");
+      else
+        fprintf(stderr, "reached bug index 416\n");
+    }
+    if ((!FIXREVERTER[416] && (utf == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
-    if (len == NULL)
+        #ifdef FRCOV
+        }
+        #endif
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[417]) {
+      if ((len == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 417\n");
+      else
+        fprintf(stderr, "reached bug index 417\n");
+    }
+    if ((!FIXREVERTER[417] && (len == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
         goto error;
+        #ifdef FRCOV
+        }
+        #endif
 
     c = utf[0];
     if (c < 0x80) {
@@ -873,8 +1552,23 @@ xmlGetUTF8Char(const unsigned char *utf, int *len) {
         if ((*len < 2) || ((utf[1] & 0xc0) != 0x80))
             goto error;
         if (c < 0xe0) {
-            if (c < 0xc2)
+            
+            #ifdef FRCOV
+            {if (FIXREVERTER[418]) {
+              if ((c < 194 ) && !(0))
+                fprintf(stderr, "triggered bug index 418\n");
+              else
+                fprintf(stderr, "reached bug index 418\n");
+            }
+            if ((!FIXREVERTER[418] && (c < 194 ))
+            #else
+            if (0
+            #endif
+            )
                 goto error;
+                #ifdef FRCOV
+                }
+                #endif
             /* 2-byte code */
             *len = 2;
             c = (c & 0x1f) << 6;
@@ -899,8 +1593,23 @@ xmlGetUTF8Char(const unsigned char *utf, int *len) {
                 c |= (utf[1] & 0x3f) << 12;
                 c |= (utf[2] & 0x3f) << 6;
                 c |= utf[3] & 0x3f;
-                if ((c < 0x10000) || (c >= 0x110000))
+                
+                #ifdef FRCOV
+                {if (FIXREVERTER[419]) {
+                  if ((c < 65536 || c >= 1114112 ) && !(0))
+                    fprintf(stderr, "triggered bug index 419\n");
+                  else
+                    fprintf(stderr, "reached bug index 419\n");
+                }
+                if ((!FIXREVERTER[419] && (c < 65536 || c >= 1114112 ))
+                #else
+                if (0
+                #endif
+                )
                     goto error;
+                    #ifdef FRCOV
+                    }
+                    #endif
             }
         }
     }
@@ -1169,20 +1878,65 @@ xmlEscapeFormatString(xmlChar **msg)
             ++count;
     }
 
-    if (count == 0)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[432]) {
+      if ((count == 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 432\n");
+      else
+        fprintf(stderr, "reached bug index 432\n");
+    }
+    if ((!FIXREVERTER[432] && (count == 0 ))
+    #else
+    if (0
+    #endif
+    )
         return(*msg);
-
-    if ((count > INT_MAX) || (msgLen > INT_MAX - count))
+        #ifdef FRCOV
+        }
+        #endif
+
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[433]) {
+      if ((count > 2147483647 || msgLen > 2147483647 - count ) && !(0))
+        fprintf(stderr, "triggered bug index 433\n");
+      else
+        fprintf(stderr, "reached bug index 433\n");
+    }
+    if ((!FIXREVERTER[433] && (count > 2147483647 || msgLen > 2147483647 - count ))
+    #else
+    if (0
+    #endif
+    )
         return(NULL);
+        #ifdef FRCOV
+        }
+        #endif
     resultLen = msgLen + count + 1;
     result = (xmlChar *) xmlMallocAtomic(resultLen);
-    if (result == NULL) {
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[434]) {
+      if ((result == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 434\n");
+      else
+        fprintf(stderr, "reached bug index 434\n");
+    }
+    if ((!FIXREVERTER[434] && (result == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) {
         /* Clear *msg to prevent format string vulnerabilities in
            out-of-memory situations. */
         xmlFree(*msg);
         *msg = NULL;
         return(NULL);
     }
+    #ifdef FRCOV
+    }
+    #endif
 
     for (msgPtr = *msg, resultPtr = result; *msgPtr != '\0'; ++msgPtr, ++resultPtr) {
         *resultPtr = *msgPtr;
diff --git a/xmlunicode.c b/xmlunicode.c
index 677f25e8..0bdeb84d 100644
--- a/xmlunicode.c
+++ b/xmlunicode.c
@@ -1,3 +1,7 @@
+#ifdef FRCOV
+#include <stdio.h>
+extern short FIXREVERTER[];
+#endif
 /*
  * xmlunicode.c: this module implements the Unicode character APIs
  *
@@ -947,7 +951,22 @@ static xmlIntFunc
     int low, high, mid, cmp;
     const xmlUnicodeRange *sptr;
 
-    if ((tptr == NULL) || (tname == NULL)) return(NULL);
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[201]) {
+      if ((tptr == (void *) 0 || tname == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 201\n");
+      else
+        fprintf(stderr, "reached bug index 201\n");
+    }
+    if ((!FIXREVERTER[201] && (tptr == (void *) 0 || tname == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    ) return(NULL);
+    #ifdef FRCOV
+    }
+    #endif
 
     low = 0;
     high = tptr->numentries - 1;
@@ -2644,8 +2663,23 @@ xmlUCSIsBlock(int code, const char *block) {
     xmlIntFunc *func;
 
     func = xmlUnicodeLookup(&xmlUnicodeBlockTbl, block);
-    if (func == NULL)
+    
+    #ifdef FRCOV
+    {if (FIXREVERTER[202]) {
+      if ((func == (void *) 0 ) && !(0))
+        fprintf(stderr, "triggered bug index 202\n");
+      else
+        fprintf(stderr, "reached bug index 202\n");
+    }
+    if ((!FIXREVERTER[202] && (func == (void *) 0 ))
+    #else
+    if (0
+    #endif
+    )
 	return (-1);
+	#ifdef FRCOV
+	}
+	#endif
     return (func(code));
 }
 
